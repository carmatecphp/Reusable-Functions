<?php
App::uses('AppController', 'Controller');
CakePlugin::load('Export'); 
/**
 * AccountsLedgers Controller
 *
 * @property AccountsLedger $AccountsLedger
 */
class AccountsLedgersController extends AppController {
	
	public $components = array('Export.Export','Session');

	public function beforeFilter(){
		parent::beforeFilter();
		$this->loadModel('Aco');
		$this->loadModel('ArosAco');
		$url = $this->params['action'];
		$controller = $this->params['controller'];
			$module_name = 'Ledgers';
			$aco = $this->Aco->find('first',array('conditions'=>array('Aco.alias'=>$module_name)));
			$aros_acosDetails = $this->ArosAco->find('first',array('conditions'=>array('ArosAco.aro_id'=>$this->Session->read('Auth1.User.Aro_id'),'ArosAco.aco_id'=>$aco['Aco']['id'])));
			$this->Session->write('Auth1.User.Permission',$aros_acosDetails);
			if($aros_acosDetails['ArosAco']['_create'] == 1){
	    		$proceed=1; 
		    }
		    if($aros_acosDetails['ArosAco']['_read'] == 1){
	    		$proceed=1;
		    }
		    if($aros_acosDetails['ArosAco']['_update'] == 1){
	    		$proceed=1;
	    	}
		    if($aros_acosDetails['ArosAco']['_delete'] == 1){
		    	$proceed=1;
	    	}	    
	    
	    if(!$proceed){
	    	$this->redirect(array('controller'=>'users','action' => 'noaccess'));
	    }
    }


/**
 * index method
 *
 * @return void
 */
	public function index($page=null,$limit=null,$count=null,$account_id=null,$closing_balanceee=null,$cr_dr_amount=null,$amount =null,$transaction_type=null,$accountx=null) {
		//Configure::write('debug',2);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		$acc_name = $this->AccountsAccount->findById($account_id,array('fields'=>'AccountsAccount.id,AccountsAccount.account_name,AccountsAccount.opening_balance,AccountsAccount.closing_balance'));
		$ledger_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id),'fields'=>array('AccountsLedger.balance'),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
		$closing_balance = $acc_name['AccountsAccount']['closing_balance'];
		/*if(empty($ledger_balance)){
			$closing_balance = $acc_name['AccountsAccount']['opening_balance'];
		} else {
			$closing_balance = $ledger_balance['AccountsLedger']['balance'];
		}*/
		
		if($page) {
			$url = 'ledger_home'.'/'.$page.'/'.$limit.'/'.$count.'/'.$account_id;
		} else {
			$url = 'ledger_home/0/0/0/'.$account_id;
		}
		$checkifpresent=0;
 		foreach($this->Session->read('Ledger.Links123') as $k3=>$v3){
 			if($v3 == $url)	{
 				$checkifpresent=1;
 			}
 		}
		$qwer=1;
 		if($this->Session->read('Ledger.Links123')) {
 			foreach($this->Session->read('Ledger.Links123') as $k=>$v){
				$x = explode("/",$v);
				$y = explode("/",$url);
				if($x[4]=='page_style.css'){
				   $this->Session->write('Ledger.Name.'.$k,'Yes');
			       $this->Session->delete('Ledger.Links123.'.$k);
			       $this->Session->delete('Ledger.Name.'.$k);
				}
				if($x[4] == $y[4]){
					$flag[$k] = $v;
				}
				
			}
			$var = count($this->Session->read('Ledger.Links123'));
 			$var1 = $var+1;
 			if($var >= 5 && !$checkifpresent){
 				$this->Session->delete('Ledger.Name.1');
 				$this->Session->delete('Ledger.Links123.1');
 				$i=1;
 				foreach($this->Session->read('Ledger.Name') as $k1=>$v1){
 					 $this->Session->delete('Ledger.Name.'.$k1);
 					 $this->Session->write('Ledger.Name.'.$i,$v1);
 					 $i++;
 				}
 				$j=1;
 				foreach($this->Session->read('Ledger.Links123') as $k2=>$v2){
 					 $this->Session->delete('Ledger.Links123.'.$k2);
 					 $this->Session->write('Ledger.Links123.'.$j,$v2);
 					 $j++;
 				}
 			}
 			if(empty($flag)){
 				$this->Session->write('Ledger.Name.'.$var1,$acc_name['AccountsAccount']['account_name']);
 				$this->Session->write('Ledger.Links123.'.$var1,$url);
 			}
 		} else {
 			$this->Session->write('Ledger.Name.'.$qwer,$acc_name['AccountsAccount']['account_name']);
 			$this->Session->write('Ledger.Links123.'.$qwer,$url);
 		}
	//	$this->AccountsLedger->recursive = 0;
		$this->set('id',$account_id);
		
		$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AccountsAccount.active'=>'Y'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name','AccountsAccount.level','AccountsAccount.parent_id')));
		$i=$j=$k=$l=0;
		/**
		 * Foreach to seperate accounts in levelwise.
		 * */
		foreach($accounts as $account){
			switch($account['AccountsAccount']['level']){
				case 1:
					$level1[$i]=$account;
					$i++;
					break;
					
				case 2:
					$level2[$j]=$account;
					$j++;
					break;
					
				case 3:
					$level3[$k]=$account;
					$k++;
					break;
				case 4:
					$level4[$l]=$account;
					$l++;
					break;
			}
		}
		if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
		if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
		if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
		if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');

		/**
		 * To get all accounts in a tree structure.
		 * It is used to set parent_id for a new account.
		 * */
		foreach($level1 as $level11){
			$final_account[$level11['AccountsAccount']['id']] = $level11['AccountsAccount']['account_name']; 
			if($level2){
				foreach($level2 as $level22){
					if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
						$final_account[$level22['AccountsAccount']['id']] = '|----'.$level22['AccountsAccount']['account_name'];
						if($level3){$w=1;
							foreach($level3 as $level33){
								if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
									$final_account[$level33['AccountsAccount']['id']] = '|--------'.$level33['AccountsAccount']['account_name'];
									if($level4){
										foreach($level4 as $level44){
											if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
												$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		$this->set(compact('final_account','closing_balance','acc_name'));		
		/**
		 * To set the pagination 
		 **/
		if(empty($this->data)) {
			if(!$final = Cache::read('final')){
				if(!$page) $page=1; //Initialize the page 
				if(!$limit) $limit=20; // Initialize the limit 
				$offset=$this->countPages($count,$limit,$page);//Get Offset value
				$offset11=$this->countPages($count,$limit,$page-1);//Get Offset value 
				if(!$offset11) $offset11=0;
				if(!$offset)  $offset=0;
				$current_year = date('Y');
				$record = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/),'offset'=>$offset11,'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC'),'fields'=>array('AccountsLedger.id','AccountsLedger.credit','AccountsLedger.debit','AccountsLedger.balance')));
				$ledgeraccounts = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
				$count= $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/)));
				foreach($ledgeraccounts as $key => $ledgeraccount){
					if($key == 0) {
						if((!$closing_balanceee) || ($page == 0) || ($page == 1)) {
							$balancee = $acc_name['AccountsAccount']['closing_balance'];
							$this->Session->write('LedgerPagination.1',$balancee);
						} else {
							$balancee = $closing_balanceee;
							
							$cr_dr = explode('-',$cr_dr_amount);
							if($cr_dr[1] == 'd') {
								$balancee = $balancee + $cr_dr[0];
							} elseif($cr_dr[1] == 'c') {
								$balancee = $balancee - $cr_dr[0];
							}
						}
					} else {
						if(!$closing_balanceee) {
							if($ledgeraccounts[$key-1]['AccountsLedger']['credit'] > 0) {
								$balancee = $balancee - $ledgeraccounts[$key-1]['AccountsLedger']['credit'];
							} elseif($ledgeraccounts[$key-1]['AccountsLedger']['debit'] > 0) {
								$balancee = $balancee + $ledgeraccounts[$key-1]['AccountsLedger']['debit'];
							}
						} else {
							if($ledgeraccounts[$key-1]['AccountsLedger']['credit'] > 0) {
								$balancee = $balancee - $ledgeraccounts[$key-1]['AccountsLedger']['credit'];
							} elseif($ledgeraccounts[$key-1]['AccountsLedger']['debit'] > 0) {
								$balancee = $balancee + $ledgeraccounts[$key-1]['AccountsLedger']['debit'];
							}
						}
					} 
					$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id']/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/)),'fields'=>array('AccountsLedger.accounts_account_id')));                       
					$transfer_account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$transfer_account['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));
					$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
					$final[$ledgeraccount['AccountsLedger']['id']]['date'] = AppModel::dateFormat($ledgeraccount['AccountsLedger']['date']);
					$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
					$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = $balancee;
					$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
				}
				Cache::write('final', $final, 86400);		
				$this->set(compact('final'));
				$this->set(compact('page','limit','count','account_id','record'));
			}
		}
		$proceed = null;
		if(!empty($this->data['Ledger'])) {
			if($this->data['Ledger']['date'] == 'Click for Date') {
				$this->Session->setFlash(__('<div class="flashMessageError">Kindly select the date!</div>',true));
				return;
			}
			if($this->data['Ledger']['cheque_no'] == 'Enter Details') {
				$this->Session->setFlash(__('<div class="flashMessageError">Kindly enter the details!</div>',true));
				return;
			}
			/**
			 * Finds the recent transaction of the current account 
			 *  
			 * Purpose:To Calculate the Balance
			 **/
			$currentledgeraccount=$this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id ),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
			
			/**
			 * Finds the recent transaction of the selected account 
			 * 
			 * Purpose:To Calculate Balance   
			 **/
			$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
			
			/**
			 * Finds the AccountsAccount record for current and selected account 
			 * 
			 * Purpose: This is used when there are no records found in AccountsLedger for current or selected account or for both.  
			 **/
			$this->loadModel('AccountsAccount');
			$this->loadModel('AccountsGoldenrule');
			$balance = $this->AccountsAccount->findById($account_id);
			$currentAccountType = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$balance['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.id','AccountType.accounts_goldenrule_id')));
			$currentGoldenRule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$currentAccountType['AccountType']['accounts_goldenrule_id'])));	
			
			$balance2 = $this->AccountsAccount->findById($this->data['Ledger']['accounts_account_id']);
			$sellectedAccount_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$balance2['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
			$selectedAcccount_Golddeenruulee = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$sellectedAccount_type['AccountType']['accounts_goldenrule_id']))); 
			
			/**Validation Part**/
			if((!is_numeric($this->data['Ledger']['credit'])) || (!is_numeric($this->data['Ledger']['debit']))){
				$this->Session->setFlash(__('<div class="flashMessageError">Please enter the valid amount for successful Transaction!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if(($this->data['Ledger']['credit']==0) && ($this->data['Ledger']['debit']==0)){
				$this->Session->setFlash(__('<div class="flashMessageError">Transaction failed! Please enter the valid amount for successful Transaction!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if($this->data['Ledger']['debit']>0 && $this->data['Ledger']['credit']>0){
				$this->Session->setFlash(__('<div class="flashMessageError">Transaction Failed! Couldn\'t process Credit and Debit at the same time.</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if($account_id==$this->data['Ledger']['accounts_account_id']){
				$this->Session->setFlash(__('<div class="flashMessageError">You have selected the same account for transaction! Sorry could not process!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			
			if($this->data['Ledger']['credit'] > 0) {
				if($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit') {
					if($balance2['AccountsAccount']['closing_balance'] < $this->data['Ledger']['credit']) {
						$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				} elseif($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit') {
					if($balance['AccountsAccount']['closing_balance'] < $this->data['Ledger']['credit']) {
						$this->Session->setFlash('<div class="flashMessageError">Sorry! your account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				}
			}
			
			
			
			if($this->data['Ledger']['debit'] > 0){
				if($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit'){
					if($balance2['AccountsAccount']['closing_balance'] < $this->data['Ledger']['debit']) {
						$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				} elseif($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit') {
					if($balance['AccountsAccount']['closing_balance'] < $this->data['Ledger']['debit']){
						$this->Session->setFlash('<div class="flashMessageError">Sorry! your account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				}
			}
			$proceed = 1; 
			/**Validation Ends**/
			
			/**
			 * Transaction starts 
			 **/
			if($proceed == 1) {
				$currentAcc_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));     	
				$selectedAcc_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id'],'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
				if((empty($currentAcc_past_entries)) && (empty($selectedAcc_past_entries))){
					/** 
					 * $save1 array is used for current account 
					 * 
					 * $save2 array is used for selected account  
					 **/
					$save1['AccountsLedger']['accounts_account_id'] = $account_id;
					$save1['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
					$save1['AccountsLedger']['date'] = $this->data['Ledger']['date'];
					$save1['AccountsLedger']['transaction_id'];
					$save1['AccountsLedger']['accounts_bill_id'];
					$save1['AccountsLedger']['approved_by'];
				
					$save2['AccountsLedger']['accounts_account_id'] = $this->data['Ledger']['accounts_account_id'];
					$save2['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
					$save2['AccountsLedger']['date'] = $this->data['Ledger']['date'];
					$save2['AccountsLedger']['transaction_id'];
					$save2['AccountsLedger']['accounts_bill_id'];
					$save2['AccountsLedger']['approved_by'];
				
					/**
					 * The current transaction is credit for current account then it goes here 
					 * 
					 * Here the balance is calculated 
					 **/
					if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
						
						/**
						 * If there is no previous transaction for the selected or current account then, it enters into *if condition 
						 * 
						 * If transaction happened already then it enters into *else part 
						 **/
						$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['closing_balance'] + $this->data['Ledger']['credit']; 
						$save1['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
						$save1['AccountsLedger']['debit'] = 0;
						$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						
						//9-nov
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['decrease'] == 'Debit'){
							if(empty($transfer_account)){
								$save2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
							}
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						else{
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['credit'];	
							}
							
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount credited';
							debug($save2);
						}
						//end 9-nov
						
					
					}
					elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
						if(empty($currentledgeraccount)){
							$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
						}
						else{
							$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
						}
						
						$save1['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['credit'] = 0;
						$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
						
						//9-nov
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['increase'] == 'Credit'){
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
							}
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
							debug($save2);
						}
						else{
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['debit'];
							}
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
							debug($save2);
						}
						//end 09-nov
						
						
					}elseif(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
						
						
						if(($balance['AccountsAccount']['liability_type'] == 'Credit Card') && ($this->data['Ledger']['credit'] > 0) && ($balance['AccountsAccount']['account_name'] !='Accounts Payable')){
							
							//Accounts Payable 
							$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id')));
							$accountsPayable_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
							
							$accountsPayable_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accountsPayable_accountdetails['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
							$accountsPayable_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accountsPayable_type['AccountType']['accounts_goldenrule_id'])));
							
							if(empty($accountsPayable_ledgerdetails)){
								$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['opening_balance'];
							}
							else{
								$accountsPayable_balance_amount = $accountsPayable_ledgerdetails['AccountsLedger']['balance'];
							}
							
							$savecredit->data = null;
							$this->AccountsLedger->create();
							$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
							$savecredit->data['AccountsLedger']['date'] = $this->data['Ledger']['date']; 
							$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
							$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
							$savecredit->data['AccountsLedger']['cheque_no'] = "Amount debited from ".$balance['AccountsAccount']['account_name'];
							if($accountsPayable_golden_rule['AccountsGoldenrule']['decrease'] == 'Debit'){
								$savecredit->data['AccountsLedger']['credit'] = "0";
								$savecredit->data['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
								$decrease_payable = 'debit';
							}
							else{
								$savecredit->data['AccountsLedger']['debit'] = "0";
								$savecredit->data['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
								$decrease_payable = 'credit';
							}
							
							if($accountsPayable_golden_rule['AccountsGoldenrule']['increase'] == 'Debit'){
								$increase_payable = 'debit';
							}
							else{
								$increase_payable = 'credit';
							}
							
							$savecredit->data['AccountsLedger']['balance'] = ($accountsPayable_balance_amount - $this->data['Ledger']['credit']);
							
							$this->AccountsLedger->save($savecredit->data);
							
							$acc_payable = $this->AccountsLedger->getLastInsertId();
							$save_transac_id['AccountsLedger']['id'] = $acc_payable;
							$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
							
							$current_payable_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$acc_payable)));
								$current_payable_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
								
								if(!empty($current_payable_past_entries)){
									foreach($current_payable_past_entries as $current_payable_transaction){
										$updatePayableLedger['AccountsLedger']['id'] = $current_payable_transaction['AccountsLedger']['id'];
										/*if(($increase_payable == 'credit') && ($current_payable_transaction['AccountsLedger']['credit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['credit'];
										}*/
										if($current_payable_transaction['AccountsLedger']['credit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['credit'];
										}
										
										if($current_payable_transaction['AccountsLedger']['debit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['debit'];
										}
										/*if(($decrease_payable == 'debit') && ($current_payable_transaction['AccountsLedger']['debit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['debit'];
										}*/
										$this->AccountsLedger->save($updatePayableLedger);
										$current_payable_transaction_balance = $this->AccountsLedger->findById($current_payable_transaction['AccountsLedger']['id']);
									}
								}
					
						}
						
						
						
						
						
						if(empty($currentledgeraccount)){
							$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
						}
						else{
							$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
						}
						
						$save1['AccountsLedger']['credit'] = 0;
						$save1['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
						$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
						
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['decrease'] == 'Credit'){
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['credit'];
							}
							
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
						else{
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['credit'];
							}
							
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
						
					}elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
						if(empty($currentledgeraccount)){
							$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit']; 
						}
						else{
							$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
						}
						$save1['AccountsLedger']['debit'] = 0;
						$save1['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['increase'] == 'Debit') {
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
							}
							
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						else {
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['debit'];	
							}
							
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						
					}
									
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($save1);
					$getLasIns = $this->AccountsLedger->getLastInsertId();
					
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($save2);
					
					/**
					 * Transaction id for both the accounts are gets added here
					 * The transaction_id is taken as the (*id) of ($save2)=>array
					 * And to find the lastly inserted record we use the cheque no.  
					 **/
					$transact_id = $this->AccountsLedger->getLastInsertId();
					
					$save11['AccountsLedger']['id'] = $getLasIns;
					$save11['AccountsLedger']['transaction_id'] = $transact_id;
					$this->AccountsLedger->save($save11);
					
					$save22['AccountsLedger']['id'] = $transact_id;
					$save22['AccountsLedger']['transaction_id'] =$transact_id; 
					$this->AccountsLedger->save($save22);
					
					/**
					 * Update the existing ledger entries
					 **/
					
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Transaction is successful!</div>'));
					$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					
				}
				else{
					if(!empty($currentAcc_past_entries)){
						
						$calculate_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.date <='=>$this->data['Ledger']['date']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
						if(empty($calculate_balance)){
							$baaalaanceeeee = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$account_id),'fields'=>array('AccountsAccount.opening_balance')));
							$calculate_balance['AccountsLedger']['balance'] = $baaalaanceeeee['AccountsAccount']['opening_balance'];
						}
						
						
						if($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit'){
							$increase = 'credit';
						}
						else{
							$increase = 'debit';
						}
						
						if($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit'){
							$decrease = 'credit';
						}
						else{
							$decrease = 'debit';
						}
					
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
							$current_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$current_saveledger['AccountsLedger']['debit'] = 0;
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] + $this->data['Ledger']['credit'];
							
						}
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							
							
							
							
							$current_saveledger['AccountsLedger']['credit'] = 0;
							$current_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] - $this->data['Ledger']['credit'];
							
							if(($balance['AccountsAccount']['liability_type'] == 'Credit Card') && ($this->data['Ledger']['credit'] > 0) && ($balance['AccountsAccount']['account_name'] !='Accounts Payable')){
							
								//Accounts Payable 
								$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id')));
								$accountsPayable_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
								
								$accountsPayable_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accountsPayable_accountdetails['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
								$accountsPayable_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accountsPayable_type['AccountType']['accounts_goldenrule_id'])));
								
								if(empty($accountsPayable_ledgerdetails)){
									$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['opening_balance'];
								}
								else{
									$accountsPayable_balance_amount = $accountsPayable_ledgerdetails['AccountsLedger']['balance'];
								}
								
								$savecredit->data = null;
								$this->AccountsLedger->create();
								$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
								$savecredit->data['AccountsLedger']['date'] = $this->data['Ledger']['date']; 
								$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
								$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
								$savecredit->data['AccountsLedger']['cheque_no'] = "Amount debited from ".$balance['AccountsAccount']['account_name'];
								if($accountsPayable_golden_rule['AccountsGoldenrule']['decrease'] == 'Debit'){
									$savecredit->data['AccountsLedger']['credit'] = "0";
									$savecredit->data['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'debit';
								}
								else{
									$savecredit->data['AccountsLedger']['debit'] = "0";
									$savecredit->data['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'credit';
								}
								if($accountsPayable_golden_rule['AccountsGoldenrule']['increase'] == 'Debit'){
									$increase_payable = 'debit';
								}
								else{
									$increase_payable = 'credit';
								}
								
								$savecredit->data['AccountsLedger']['balance'] = ($accountsPayable_balance_amount - $this->data['Ledger']['credit']);
								
								$this->AccountsLedger->save($savecredit->data);
								
								$acc_payable = $this->AccountsLedger->getLastInsertId();
								$save_transac_id['AccountsLedger']['id'] = $acc_payable;
								$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
								
								
								$current_payable_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$acc_payable)));
								$current_payable_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
								
								if(!empty($current_payable_past_entries)){
									foreach($current_payable_past_entries as $current_payable_transaction){
										$updatePayableLedger['AccountsLedger']['id'] = $current_payable_transaction['AccountsLedger']['id'];
										/*if(($increase_payable == 'credit') && ($current_payable_transaction['AccountsLedger']['credit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['credit'];
										}*/
										if($current_payable_transaction['AccountsLedger']['credit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['credit'];
										}
										
										if($current_payable_transaction['AccountsLedger']['debit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['debit'];
										}
										/*if(($decrease_payable == 'debit') && ($current_payable_transaction['AccountsLedger']['debit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['debit'];
										}*/
										$this->AccountsLedger->save($updatePayableLedger);
										$current_payable_transaction_balance = $this->AccountsLedger->findById($current_payable_transaction['AccountsLedger']['id']);
									}
								}
							}
							
							
					}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							$current_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$current_saveledger['AccountsLedger']['debit'] = 0;
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] + $this->data['Ledger']['debit'];
							
						}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							$current_saveledger['AccountsLedger']['credit'] = 0;
							$current_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] - $this->data['Ledger']['debit'];
							
						}
						$current_saveledger['AccountsLedger']['accounts_account_id'] = $account_id;
						$current_saveledger['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$current_saveledger['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($current_saveledger);
						$current_transac_id = $this->AccountsLedger->getLastInsertId();
						$savee_traansact_id['AccountsLedger']['id'] = $current_transac_id;
						$savee_traansact_id['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->save($savee_traansact_id);
						
						$current_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$current_transac_id)));
						
						
						foreach($currentAcc_past_entries as $currentAcc_past_entry){
							$updateCurrentLedger['AccountsLedger']['id'] = $currentAcc_past_entry['AccountsLedger']['id'];
							/*if(($increase == 'credit') && ($currentAcc_past_entry['AccountsLedger']['credit'] > 0)){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] - $currentAcc_past_entry['AccountsLedger']['credit'];
							}*/
							if($currentAcc_past_entry['AccountsLedger']['credit'] > 0){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] + $currentAcc_past_entry['AccountsLedger']['credit'];
							}
							
							if($currentAcc_past_entry['AccountsLedger']['debit'] > 0){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] - $currentAcc_past_entry['AccountsLedger']['debit'];
							}
							/*if(($decrease == 'debit') && ($currentAcc_past_entry['AccountsLedger']['debit'] > 0)){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] + $currentAcc_past_entry['AccountsLedger']['debit'];
							}*/
							$this->AccountsLedger->save($updateCurrentLedger);
							$current_transaction_balance = $this->AccountsLedger->findById($currentAcc_past_entry['AccountsLedger']['id']);
						}
					}
					else{
						$save1['AccountsLedger']['accounts_account_id'] = $account_id;
						$save1['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$save1['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
						
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit']; 
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']+$this->data['Ledger']['credit'];
							}
							$save1['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save1['AccountsLedger']['debit'] = 0;
							$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
							}
							
							$save1['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save1['AccountsLedger']['credit'] = 0;
							$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
							
						}
						elseif(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							
							
							if(($balance['AccountsAccount']['liability_type'] == 'Credit Card') && ($this->data['Ledger']['credit'] > 0) && ($balance['AccountsAccount']['account_name'] !='Accounts Payable')){
							
								//Accounts Payable 
								$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id')));
								$accountsPayable_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
								
								$accountsPayable_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accountsPayable_accountdetails['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
								$accountsPayable_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accountsPayable_type['AccountType']['accounts_goldenrule_id'])));
								
								if(empty($accountsPayable_ledgerdetails)){
									$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['opening_balance'];
								}
								else{
									$accountsPayable_balance_amount = $accountsPayable_ledgerdetails['AccountsLedger']['balance'];
								}
								
								$savecredit->data = null;
								$this->AccountsLedger->create();
								$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
								$savecredit->data['AccountsLedger']['date'] = $this->data['Ledger']['date']; 
								$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
								$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
								$savecredit->data['AccountsLedger']['cheque_no'] = "Amount debited from ".$balance['AccountsAccount']['account_name'];
								if($accountsPayable_golden_rule['AccountsGoldenrule']['decrease'] == 'Debit'){
									$savecredit->data['AccountsLedger']['credit'] = "0";
									$savecredit->data['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'debit';
								}
								else{
									$savecredit->data['AccountsLedger']['debit'] = "0";
									$savecredit->data['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'credit';
								}
								
								if($accountsPayable_golden_rule['AccountsGoldenrule']['increase'] == 'Debit'){
									$increase_payable = 'debit';
								}
								else{
									$increase_payable = 'credit';
								}
								
								$savecredit->data['AccountsLedger']['balance'] = ($accountsPayable_balance_amount - $this->data['Ledger']['credit']);
								
								$this->AccountsLedger->save($savecredit->data);
								
								$acc_payable = $this->AccountsLedger->getLastInsertId();
								$save_transac_id['AccountsLedger']['id'] = $acc_payable;
								$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
								
								$current_payable_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$acc_payable)));
								$current_payable_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
								
								if(!empty($current_payable_past_entries)){
									foreach($current_payable_past_entries as $current_payable_transaction){
										$updatePayableLedger['AccountsLedger']['id'] = $current_payable_transaction['AccountsLedger']['id'];
										/*if(($increase_payable == 'credit') && ($current_payable_transaction['AccountsLedger']['credit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['credit'];
										}*/
										if($current_payable_transaction['AccountsLedger']['credit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['credit'];
										}
										
										if($current_payable_transaction['AccountsLedger']['debit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['debit'];
										}
										/*if(($decrease_payable == 'debit') && ($current_payable_transaction['AccountsLedger']['debit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['debit'];
										}*/
										$this->AccountsLedger->save($updatePayableLedger);
										$current_payable_transaction_balance = $this->AccountsLedger->findById($current_payable_transaction['AccountsLedger']['id']);
									}
								}
								
							}
							
							
							
							
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
							}
							
							$save1['AccountsLedger']['credit'] = 0;
							$save1['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
							
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit']; 
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
							}
							$save1['AccountsLedger']['debit'] = 0;
							$save1['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						}
						
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($save1);
						$current_transac_id = $this->AccountsLedger->getLastInsertId();
						
						$save_transac_id['AccountsLedger']['id'] = $current_transac_id;
						$save_transac_id['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->save($save_transac_id);
					}
					
					if(!empty($selectedAcc_past_entries)){
						$calculate_selected_acc_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id'],'AccountsLedger.date <='=>$this->data['Ledger']['date']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
						if(empty($calculate_selected_acc_balance)){
							$balanceeeee = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Ledger']['accounts_account_id']),'fields'=>array('AccountsAccount.opening_balance')));
							$calculate_selected_acc_balance['AccountsLedger']['balance'] = $balanceeeee['AccountsAccount']['opening_balance'];
						}
						$selected_account_detail = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Ledger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_type_id')));
						$$selected_account_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$selected_account_detail['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
						$selected_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$selected_account_type['AccountType']['accounts_goldenrule_id'])));
						if($selected_golden_rule['AccountsGoldenrule']['increase'] == 'Credit'){
							$increase1 = 'credit';
						}
						else{
							$increase1 = 'debit';
						}
						
						if($selected_golden_rule['AccountsGoldenrule']['decrease'] == 'Credit'){
							$decrease1 = 'credit';
						}
						else{
							$decrease1 = 'debit';
						}
					
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
							$selected_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$selected_saveledger['AccountsLedger']['credit'] = 0;
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] - $this->data['Ledger']['credit'];
							
						}
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							$selected_saveledger['AccountsLedger']['debit'] =0;
							$selected_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] + $this->data['Ledger']['credit'];
							
						}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							$selected_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$selected_saveledger['AccountsLedger']['credit'] = 0;
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] - $this->data['Ledger']['debit'];
							
						}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							$selected_saveledger['AccountsLedger']['debit'] = 0;
							$selected_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] + $this->data['Ledger']['debit'];
							
						}
						
						$selected_saveledger['AccountsLedger']['accounts_account_id'] = $this->data['Ledger']['accounts_account_id'];
						$selected_saveledger['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$selected_saveledger['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						$selected_saveledger['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($selected_saveledger);
						/*$selected_transac_id = $this->AccountsLedger->getLastInsertId();
						$savee_traansact_id['AccountsLedger']['id'] = $selected_transac_id;
						$savee_traansact_id['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->save($savee_traansact_id);*/
						
						$selected_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$selected_transac_id)));
						
						
						foreach($selectedAcc_past_entries as $selectedAcc_past_entry){
							
							$updateSelectedLedger['AccountsLedger']['id']= $selectedAcc_past_entry['AccountsLedger']['id'];
							
							if($selectedAcc_past_entry['AccountsLedger']['credit'] > 0){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] + $selectedAcc_past_entry['AccountsLedger']['credit'];
							}
							/*if(($increase1 == 'debit') && ($selectedAcc_past_entry['AccountsLedger']['credit'] > 0)){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] - $selectedAcc_past_entry['AccountsLedger']['credit'];
							}*/
							
							/*if(($decrease1 == 'credit') && ($selectedAcc_past_entry['AccountsLedger']['debit'] > 0)){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] + $selectedAcc_past_entry['AccountsLedger']['debit'];
							}*/
							if($selectedAcc_past_entry['AccountsLedger']['debit'] > 0){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] - $selectedAcc_past_entry['AccountsLedger']['debit'];
							}
							$this->AccountsLedger->save($updateSelectedLedger);
							$selected_transaction_balance = $this->AccountsLedger->findById($selectedAcc_past_entry['AccountsLedger']['id']);
						}
					}
					else{
						$save2['AccountsLedger']['accounts_account_id'] = $this->data['Ledger']['accounts_account_id'];
						$save2['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$save2['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
						
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
							}
							
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
							}
							
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
							
						}
						elseif(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['credit'];
							}
							
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
							}
							
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($save2);
					
					}
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Transaction is successful!</div>'));
					$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
				}
			
			}
		}
		$final = null;$ledgeraccount=null;
		if($amount){
		$this->request->data['Filter']['transaction_type'] = $transaction_type;
		$this->request->data['Filter']['amount'] = $amount;
		$this->request->data['Filter']['account'] = $accountx;
		}
		//debug($this->data);
		if(!empty($this->data['Filter'])){
			
			debug($this->data);
			if(!$page) $page=1; //Initialize the page 
			if(!$limit) $limit=15; // Initialize the limit 
			$offset=$this->countPages($count,$limit,$page);//Get Offset value 
			if(!$offset)  $offset=0;
			$current_year = date('Y');
			debug($this->data['Filter']['transaction_type']);
			if(!empty($this->data['Filter']['transaction_type'])){
				if(!empty($this->data['Filter']['amount'])){
					$amount = $this->data['Filter']['amount'];
				}else{
					$amount = 0;
				}
				debug($amount);
				$transaction_type = $this->data['Filter']['transaction_type'];
				
				if($this->data['Filter']['transaction_type'] == 'Credit'){
					$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.credit >'=>$amount),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));
					$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.credit >'=>$amount)));
				}
				else{
					$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.debit >'=>$amount),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));
					$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.debit >'=>$amount)));
				}
			}
			else{
				if(!empty($this->data['Filter']['amount'])){
					$amount = $this->data['Filter']['amount'];
				}else{
					$amount = 0;
				}
				$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$amount,'AccountsLedger.debit >' => $amount)),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));     
				$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$amount,'AccountsLedger.debit >' => $amount))));
				
			}
			
			/*if(!empty($this->data['Filter']['account'])){
				$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$this->data['Filter']['amount'],'AccountsLedger.debit >' => $this->data['Filter']['amount']))));
			}*/
			debug($filterd_account);
			debug($this->data['Filter']['account']);
			foreach($filterd_account as $ledgeraccount){
			/**
			 * Finds the corresponding transfer account name using the transaction_id     
			 **/
			 	/*if(!empty($this->data['Filter']['account'])){
			 		$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.accounts_account_id'=>$this->data['Filter']['account']),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id'])),'limit'=>$limit,'offset'=>$offset));
			 		$count = $this->AccountsLedger->find('count',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.accounts_account_id'=>$this->data['Filter']['account']),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id']))));
			 	}else{*/
					$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.accounts_account_id'=>$this->data['Filter']['account']),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id'])),'fields'=>array('AccountsLedger.accounts_account_id')));
					$transfer_account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$transfer_account['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));
			 	//}
				debug($transfer_account);
				debug($transfer_account_name);
				if($transfer_account['AccountsLedger']['accounts_account_id'] == $this->data['Filter']['account']){
					$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
					$final[$ledgeraccount['AccountsLedger']['id']]['date'] = $ledgeraccount['AccountsLedger']['date'];
					$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
					$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = $ledgeraccount['AccountsLedger']['balance'];
					$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
				}
				elseif(empty($this->data['Filter']['account'])){
					$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
					$final[$ledgeraccount['AccountsLedger']['id']]['date'] = $ledgeraccount['AccountsLedger']['date'];
					$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
					$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = $ledgeraccount['AccountsLedger']['balance'];
					$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
				}
			}
			debug($final);
			$this->set(compact('final'));
			debug($this->data['Filter']['transaction_type']);
			$transaction_type = $this->data['Filter']['transaction_type'];
			$amount = $this->data['Filter']['amount'];
			$accountx = $this->data['Filter']['account'];
			$this->set(compact('page','limit','count','account_id','amount','transaction_type','accountx'));
		}
		
		
		
		
		
	}

/**
 * view method
 *
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		$this->AccountsLedger->id = $id;
		if (!$this->AccountsLedger->exists()) {
			throw new NotFoundException(__('Invalid accounts ledger'));
		}
		$this->set('accountsLedger', $this->AccountsLedger->read(null, $id));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->AccountsLedger->create();
			if ($this->AccountsLedger->save($this->request->data)) {
				$this->Session->setFlash(__('The accounts ledger has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The accounts ledger could not be saved. Please, try again.'));
			}
		}
		$accountsAccounts = $this->AccountsLedger->AccountsAccount->find('list');
		$accountsBills = $this->AccountsLedger->AccountsBill->find('list');
		$this->set(compact('accountsAccounts', 'accountsBills'));
	}

/**
 * edit method
 *
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		$this->AccountsLedger->id = $id;
		if (!$this->AccountsLedger->exists()) {
			throw new NotFoundException(__('Invalid accounts ledger'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->AccountsLedger->save($this->request->data)) {
				$this->Session->setFlash(__('The accounts ledger has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The accounts ledger could not be saved. Please, try again.'));
			}
		} else {
			$this->request->data = $this->AccountsLedger->read(null, $id);
		}
		$accountsAccounts = $this->AccountsLedger->AccountsAccount->find('list');
		$accountsBills = $this->AccountsLedger->AccountsBill->find('list');
		$this->set(compact('accountsAccounts', 'accountsBills'));
	}

/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->AccountsLedger->id = $id;
		if (!$this->AccountsLedger->exists()) {
			throw new NotFoundException(__('Invalid accounts ledger'));
		}
		if ($this->AccountsLedger->delete()) {
			$this->Session->setFlash(__('Accounts ledger deleted'));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Accounts ledger was not deleted'));
		$this->redirect(array('action' => 'index'));
	}
	
	public function ledger_home($page=null,$limit=null,$count=null,$account_id=null,$closing_balanceee=null,$cr_dr_amount=null,$amount =null,$transaction_type=null,$accountx=null){
		//configure::write('debug',2);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		$acc_name = $this->AccountsAccount->findById($account_id,array('fields'=>'AccountsAccount.id,AccountsAccount.account_name,AccountsAccount.opening_balance,AccountsAccount.closing_balance'));
		$ledger_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id),'fields'=>array('AccountsLedger.balance'),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
		$closing_balance = $acc_name['AccountsAccount']['closing_balance'];
		if($page) {
			$url = 'ledger_home'.'/'.$page.'/'.$limit.'/'.$count.'/'.$account_id;
		} else {
			$url = 'ledger_home/0/0/0/'.$account_id;
		}
		$checkifpresent=0;
 		foreach($this->Session->read('Ledger.Links123') as $k3=>$v3){
 			if($v3 == $url)	{
 				$checkifpresent=1;
 			}
 		}
		$qwer=1;
 		if($this->Session->read('Ledger.Links123')) {
 			foreach($this->Session->read('Ledger.Links123') as $k=>$v){
				$x = explode("/",$v);
				$y = explode("/",$url);
				if($x[4]=='page_style.css'){
				   $this->Session->write('Ledger.Name.'.$k,'Yes');
			       $this->Session->delete('Ledger.Links123.'.$k);
			       $this->Session->delete('Ledger.Name.'.$k);
				}
				if($x[4] == $y[4]){
					$flag[$k] = $v;
				}
				
			}
			$var = count($this->Session->read('Ledger.Links123'));
 			$var1 = $var+1;
 			if($var >= 5 && !$checkifpresent){
 				$this->Session->delete('Ledger.Name.1');
 				$this->Session->delete('Ledger.Links123.1');
 				$i=1;
 				foreach($this->Session->read('Ledger.Name') as $k1=>$v1){
 					 $this->Session->delete('Ledger.Name.'.$k1);
 					 $this->Session->write('Ledger.Name.'.$i,$v1);
 					 $i++;
 				}
 				$j=1;
 				foreach($this->Session->read('Ledger.Links123') as $k2=>$v2){
 					 $this->Session->delete('Ledger.Links123.'.$k2);
 					 $this->Session->write('Ledger.Links123.'.$j,$v2);
 					 $j++;
 				}
 			}
 			if(empty($flag)){
 				$this->Session->write('Ledger.Name.'.$var1,$acc_name['AccountsAccount']['account_name']);
 				$this->Session->write('Ledger.Links123.'.$var1,$url);
 			}
 		} else {
 			$this->Session->write('Ledger.Name.'.$qwer,$acc_name['AccountsAccount']['account_name']);
 			$this->Session->write('Ledger.Links123.'.$qwer,$url);
 		}
	//	$this->AccountsLedger->recursive = 0;
		$this->set('id',$account_id);
		
		$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AccountsAccount.active'=>'Y'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name','AccountsAccount.level','AccountsAccount.parent_id')));
		$i=$j=$k=$l=0;
		/**
		 * Foreach to seperate accounts in levelwise.
		 * */
		foreach($accounts as $account){
			switch($account['AccountsAccount']['level']){
				case 1:
					$level1[$i]=$account;
					$i++;
					break;
					
				case 2:
					$level2[$j]=$account;
					$j++;
					break;
					
				case 3:
					$level3[$k]=$account;
					$k++;
					break;
				case 4:
					$level4[$l]=$account;
					$l++;
					break;
			}
		}
		if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
		if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
		if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
		if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');

		/**
		 * To get all accounts in a tree structure.
		 * It is used to set parent_id for a new account.
		 * */
		foreach($level1 as $level11){
			$final_account[$level11['AccountsAccount']['id']] = $level11['AccountsAccount']['account_name']; 
			if($level2){
				foreach($level2 as $level22){
					if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
						$final_account[$level22['AccountsAccount']['id']] = '|----'.$level22['AccountsAccount']['account_name'];
						if($level3){$w=1;
							foreach($level3 as $level33){
								if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
									$final_account[$level33['AccountsAccount']['id']] = '|--------'.$level33['AccountsAccount']['account_name'];
									if($level4){
										foreach($level4 as $level44){
											if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
												$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		$this->set(compact('final_account','closing_balance','acc_name'));		
		/**
		 * To set the pagination 
		 **/
		if(empty($this->data)) {
			//if(!$final = Cache::read('final')){
				if(!$page) $page=1; //Initialize the page 
				if(!$limit) $limit=50; // Initialize the limit 
				$offset=$this->countPages($count,$limit,$page);//Get Offset value
				$offset11=$this->countPages($count,$limit,$page-1);//Get Offset value 
				if(!$offset11) $offset11=0;
				if(!$offset)  $offset=0;
				$current_year = date('Y');
				$record = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/),'offset'=>$offset11,'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC'),'fields'=>array('AccountsLedger.id','AccountsLedger.credit','AccountsLedger.debit','AccountsLedger.balance')));
			//	$ledgeraccounts = Cache::read('ledger_home_ledgeraccounts'.$account_id.$offset);
			//	if(!$ledgeraccounts) {
					$ledgeraccounts = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC','AccountsLedger.credit ASC','AccountsLedger.debit DESC')));
				//	debug($ledgeraccounts);
			//		Cache::write('ledger_home_ledgeraccounts'.$account_id.$offset,$ledgeraccounts);
			//	}
				
				$count= $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/)));
		//		$final = Cache::read('final_ledger_home_ledgerfinal'.$account_id.$offset);
		//		if(!$final){
					//debug($ledgeraccounts);
					foreach($ledgeraccounts as $key => $ledgeraccount){
						//debug($key);
						if($key == 0) {
							debug($closing_balanceee);
							debug($page);
							if((!$closing_balanceee) || ($page == 0) || ($page == 1)) {
								$balancee = $acc_name['AccountsAccount']['closing_balance'];
								debug($balancee);
								$this->Session->write('LedgerPagination.amount.'.$account_id.'.1',$balancee);
							} else {
								$balancee = $closing_balanceee;
								debug($balancee);
								debug($cr_dr_amount);
								$cr_dr = explode('-',$cr_dr_amount);
								debug($cr_dr);
								if($cr_dr[1] == 'd') {
									$balancee = $balancee + $cr_dr[0];
									debug($balancee);
								} elseif($cr_dr[1] == 'c') {
									$balancee = $balancee - $cr_dr[0];
									debug($balancee);
								}
								$this->Session->write('LedgerPagination.cr_db.'.$account_id.'.'.$page,$cr_dr_amount);
								$this->Session->write('LedgerPagination.amount.'.$account_id.'.'.$page,$closing_balanceee);
							}
						} else {
							if(!$closing_balanceee) {
								if($ledgeraccounts[$key-1]['AccountsLedger']['credit'] > 0) {
									$balancee = $balancee - $ledgeraccounts[$key-1]['AccountsLedger']['credit'];
									debug($ledgeraccounts[$key-1]['AccountsLedger']['credit']);
									debug($balancee);
								} elseif($ledgeraccounts[$key-1]['AccountsLedger']['debit'] > 0) {
									$balancee = $balancee + $ledgeraccounts[$key-1]['AccountsLedger']['debit'];
									debug($ledgeraccounts[$key-1]['AccountsLedger']['debit']);
									debug($balancee);
								}
							} else {
								if($ledgeraccounts[$key-1]['AccountsLedger']['credit'] > 0) {
									$balancee = $balancee - $ledgeraccounts[$key-1]['AccountsLedger']['credit'];
									debug($ledgeraccounts[$key-1]['AccountsLedger']['credit']);
									debug($balancee);
								} elseif($ledgeraccounts[$key-1]['AccountsLedger']['debit'] > 0) {
									$balancee = $balancee + $ledgeraccounts[$key-1]['AccountsLedger']['debit'];
									debug($ledgeraccounts[$key-1]['AccountsLedger']['debit']);
									debug($balancee);
								}
							}
						} 
						$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id']/*,'AccountsLedger.date LIKE'=>$current_year.'%'*/)),'fields'=>array('AccountsLedger.accounts_account_id')));                       
						$transfer_account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$transfer_account['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));
						$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
						$final[$ledgeraccount['AccountsLedger']['id']]['date'] = AppModel::dateFormat($ledgeraccount['AccountsLedger']['date']);
						$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
						$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
						$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
						$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = $balancee;
						$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
						$final[$ledgeraccount['AccountsLedger']['id']]['accounts_clientinvoice_id'] = $ledgeraccount['AccountsLedger']['accounts_clientinvoice_id'];
						$final[$ledgeraccount['AccountsLedger']['id']]['accounts_bill_id'] =$ledgeraccount['AccountsLedger']['accounts_bill_id'];
					}
					//Cache::write('final_ledger_home_ledgerfinal'.$account_id.$offset,$final);
				//}	
				$this->set(compact('final'));
				$this->set(compact('page','limit','count','account_id','record'));
				$outputArray = $this->Session->write('finalArray',$final);
			//}
		}
		$proceed = null;
		if(!empty($this->data['Ledger'])) {
			if($this->data['Ledger']['date'] == 'Click for Date') {
				$this->Session->setFlash(__('<div class="flashMessageError">Kindly select the date!</div>',true));
				return;
			}
			if($this->data['Ledger']['cheque_no'] == 'Enter Details') {
				$this->Session->setFlash(__('<div class="flashMessageError">Kindly enter the details!</div>',true));
				return;
			}
			/**
			 * Finds the recent transaction of the current account 
			 *  
			 * Purpose:To Calculate the Balance
			 **/
			$currentledgeraccount=$this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id ),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
			
			/**
			 * Finds the recent transaction of the selected account 
			 * 
			 * Purpose:To Calculate Balance   
			 **/
			$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
			
			/**
			 * Finds the AccountsAccount record for current and selected account 
			 * 
			 * Purpose: This is used when there are no records found in AccountsLedger for current or selected account or for both.  
			 **/
			$this->loadModel('AccountsAccount');
			$this->loadModel('AccountsGoldenrule');
			$balance = $this->AccountsAccount->findById($account_id);
			$currentAccountType = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$balance['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.id','AccountType.accounts_goldenrule_id')));
			$currentGoldenRule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$currentAccountType['AccountType']['accounts_goldenrule_id'])));	
			
			$balance2 = $this->AccountsAccount->findById($this->data['Ledger']['accounts_account_id']);
			$sellectedAccount_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$balance2['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
			$selectedAcccount_Golddeenruulee = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$sellectedAccount_type['AccountType']['accounts_goldenrule_id']))); 
			
			/**Validation Part**/
			if((!is_numeric($this->data['Ledger']['credit'])) || (!is_numeric($this->data['Ledger']['debit']))){
				$this->Session->setFlash(__('<div class="flashMessageError">Please enter the valid amount for successful Transaction!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if(($this->data['Ledger']['credit']==0) && ($this->data['Ledger']['debit']==0)){
				$this->Session->setFlash(__('<div class="flashMessageError">Transaction failed! Please enter the valid amount for successful Transaction!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if($this->data['Ledger']['debit']>0 && $this->data['Ledger']['credit']>0){
				$this->Session->setFlash(__('<div class="flashMessageError">Transaction Failed! Couldn\'t process Credit and Debit at the same time.</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if($account_id==$this->data['Ledger']['accounts_account_id']){
				$this->Session->setFlash(__('<div class="flashMessageError">You have selected the same account for transaction! Sorry could not process!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			
			if($this->data['Ledger']['credit'] > 0) {
				if($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit') {
					if($balance2['AccountsAccount']['closing_balance'] < $this->data['Ledger']['credit']) {
						$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				} elseif($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit') {
					if($balance['AccountsAccount']['closing_balance'] < $this->data['Ledger']['credit']) {
						$this->Session->setFlash('<div class="flashMessageError">Sorry! your account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				}
			}
			
			if($this->data['Ledger']['debit'] > 0) {
				if($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit'){
					if($balance2['AccountsAccount']['closing_balance'] < $this->data['Ledger']['debit']) {
						$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				} elseif($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit') {
					if($balance['AccountsAccount']['closing_balance'] < $this->data['Ledger']['debit']){
						$this->Session->setFlash('<div class="flashMessageError">Sorry! your account don\'t have enough balance for this transaction!</div>');
						$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					}
				}
			}
			$proceed = 1; 
			/**Validation Ends**/
			
			/**
			 * Transaction starts 
			 **/
			if($proceed == 1) {
				//Cache::clear();
				//Cache::delete('final_ledger_home_ledgerfinal'.$account_id);
				//Cache::delete('ledger_home_ledgeraccounts'.$account_id);
				$currentAcc_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));     	
				$selectedAcc_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id'],'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
					/** 
					 * $save1 array is used for current account 
					 * 
					 * $save2 array is used for selected account  
					 **/
					$save_balance1['AccountsAccount']['id'] = $balance['AccountsAccount']['id'];
					$save_balance2['AccountsAccount']['id'] = $balance2['AccountsAccount']['id'];
					$save1['AccountsLedger']['accounts_account_id'] = $account_id;
					$save1['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
					$save1['AccountsLedger']['date'] = $this->data['Ledger']['date'];
					$save1['AccountsLedger']['transaction_id'];
					$save1['AccountsLedger']['accounts_bill_id'];
					$save1['AccountsLedger']['approved_by'];
				
					$save2['AccountsLedger']['accounts_account_id'] = $this->data['Ledger']['accounts_account_id'];
					$save2['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
					$save2['AccountsLedger']['date'] = $this->data['Ledger']['date'];
					$save2['AccountsLedger']['transaction_id'];
					$save2['AccountsLedger']['accounts_bill_id'];
					$save2['AccountsLedger']['approved_by'];
					
					if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
						$save_balance1['AccountsAccount']['closing_balance'] = $balance['AccountsAccount']['closing_balance'] + $this->data['Ledger']['credit']; 
						$save1['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
						$save1['AccountsLedger']['debit'] = 0;
						$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['decrease'] == 'Debit') {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance'] - $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						} else {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance'] + $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount credited';
						}
					}
					elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')) {
						$save_balance1['AccountsAccount']['closing_balance'] = $balance['AccountsAccount']['closing_balance'] - $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['credit'] = 0;
						$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['increase'] == 'Credit') {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance'] + $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						} else {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance']-$this->data['Ledger']['debit'];
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
					} elseif(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')) {
						if(($balance['AccountsAccount']['liability_type'] == 'Credit Card') && ($this->data['Ledger']['credit'] > 0) && ($balance['AccountsAccount']['account_name'] !='Accounts Payable')) {
							//Accounts Payable 
							$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
							$accountsPayable_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accountsPayable_accountdetails['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
							$accountsPayable_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accountsPayable_type['AccountType']['accounts_goldenrule_id'])));
							$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['closing_balance'];
							$savecredit->data = null;
							$this->AccountsLedger->create();
							$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
							$savecredit->data['AccountsLedger']['date'] = $this->data['Ledger']['date']; 
							$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
							$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
							$savecredit->data['AccountsLedger']['cheque_no'] = "Amount debited from ".$balance['AccountsAccount']['account_name'];
							$savecredit->data['AccountsLedger']['credit'] = "0";
							$savecredit->data['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$this->AccountsLedger->save($savecredit->data);
							
							$save_payable->data['AccountsAccount']['id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
							$save_payable->data['AccountsAccount']['closing_balance'] = ($accountsPayable_balance_amount - $this->data['Ledger']['credit']);
							$this->AccountsAccount->save($save_payable->data);
							
							$acc_payable = $this->AccountsLedger->getLastInsertId();
							$save_transac_id['AccountsLedger']['id'] = $acc_payable;
							$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
							$this->AccountsLedger->save($save_transac_id);
						}
						$save_balance1['AccountsAccount']['closing_balance'] = $balance['AccountsAccount']['closing_balance'] - $this->data['Ledger']['credit'];
						$save1['AccountsLedger']['credit'] = 0;
						$save1['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
						$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['decrease'] == 'Credit') {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance'] + $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						} else {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance'] - $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
					} elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')) {
						$save_balance1['AccountsAccount']['closing_balance'] = $balance['AccountsAccount']['closing_balance'] + $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['debit'] = 0;
						$save1['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['increase'] == 'Debit') {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance'] - $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						} else {
							$save_balance2['AccountsAccount']['closing_balance'] = $balance2['AccountsAccount']['closing_balance'] + $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						
					}
					$this->AccountsAccount->save($save_balance1);
					$this->AccountsAccount->save($save_balance2);
					
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($save1);
					$getLasIns = $this->AccountsLedger->getLastInsertId();
					
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($save2);
				
					$transact_id = $this->AccountsLedger->getLastInsertId();
					
					$save11['AccountsLedger']['id'] = $getLasIns;
					$save11['AccountsLedger']['transaction_id'] = $transact_id;
					$this->AccountsLedger->save($save11);
					
					$save22['AccountsLedger']['id'] = $transact_id;
					$save22['AccountsLedger']['transaction_id'] =$transact_id; 
					$this->AccountsLedger->save($save22);
					
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save_balance1['AccountsAccount']['id'],$save1['AccountsLedger']['credit'],$save1['AccountsLedger']['debit'],$balance['AccountsAccount']['closing_balance'],$save_balance1['AccountsAccount']['closing_balance'],$getLasIns,0,0,'Ledger transaction','Ledger transfer'));
					/**Log Code**/
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save_balance2['AccountsAccount']['id'],$save2['AccountsLedger']['credit'],$save2['AccountsLedger']['debit'],$balance2['AccountsAccount']['closing_balance'],$save_balance2['AccountsAccount']['closing_balance'],$transact_id,0,0,'Ledger transaction','Ledger transfer'));
					/**Log Code**/
					
					
					$this->AccountsAccount->cacheQueries = false;
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Transaction is successful!</div>'));
					$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));	
			}
		}
		$final = null;$ledgeraccount=null;
		if($amount){ 
		$this->request->data['Filter']['transaction_type'] = $transaction_type;
		$this->request->data['Filter']['amount'] = $amount;
		$this->request->data['Filter']['account'] = $accountx;
		}
		if(!empty($this->data['Filter'])){
			if(!$page) $page=1; //Initialize the page 
			if(!$limit) $limit=50; // Initialize the limit 
			$offset=$this->countPages($count,$limit,$page);//Get Offset value 
			if(!$offset)  $offset=0;
			$current_year = date('Y');
			if(!empty($this->data['Filter']['amount'])) {
				$amount = $this->data['Filter']['amount'];
			} else {
				$amount = 0;
			}
			if(!empty($this->data['Filter']['transaction_type'])){
				
				$transaction_type = $this->data['Filter']['transaction_type'];
				
				if($this->data['Filter']['transaction_type'] == 'Credit'){
					$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.credit >'=>$amount),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));
					$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.credit >'=>$amount)));
				} else {
					$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.debit >'=>$amount),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));
					$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.debit >'=>$amount)));
				}
			}
			else {
				$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$amount,'AccountsLedger.debit >' => $amount)),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));     
				$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$amount,'AccountsLedger.debit >' => $amount))));
			}
			foreach($filterd_account as $ledgeraccount) {
				
				if($key == 0) {
						if((!$closing_balanceee) || ($page == 0) || ($page == 1)) {
							$this->Session->write('LedgerPagination.amount.'.$account_id.'.1','1');
							if($ledgeraccount['AccountsLedger']['credit'] > 0) {
								$crr_drr = $ledgeraccount['AccountsLedger']['credit'].'-c';
							} else {
								$crr_drr = $ledgeraccount['AccountsLedger']['debit'].'-d';
							}
							$this->Session->write('LedgerPagination.cr_db.'.$account_id.'.'.$page,$crr_drr);
						} else {
							$cr_dr = explode('-',$cr_dr_amount);
							$this->Session->write('LedgerPagination.cr_db.'.$account_id.'.'.$page,$cr_dr_amount);
							$this->Session->write('LedgerPagination.amount.'.$account_id.'.'.$page,'1');
						}
					}
				
				$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.accounts_account_id'=>$this->data['Filter']['account']),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id'])),'fields'=>array('AccountsLedger.accounts_account_id')));
				$transfer_account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$transfer_account['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));
				if($transfer_account['AccountsLedger']['accounts_account_id'] == $this->data['Filter']['account']){
					$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
					$final[$ledgeraccount['AccountsLedger']['id']]['date'] = $ledgeraccount['AccountsLedger']['date'];
					$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
					$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = '';
					$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
				} elseif(empty($this->data['Filter']['account'])) {
					$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
					$final[$ledgeraccount['AccountsLedger']['id']]['date'] = $ledgeraccount['AccountsLedger']['date'];
					$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
					$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = '';
					$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
					//debug($final);
				}
			}
			$this->set(compact('final'));
			//debug($final);
			$transaction_type = $this->data['Filter']['transaction_type'];
			$amount = $this->data['Filter']['amount'];
			$accountx = $this->data['Filter']['account'];
			$this->set(compact('page','limit','count','account_id','amount','transaction_type','accountx'));
			
			$outputArray = $this->Session->write('finalArray',$final);
		}
	}
	
	
	public function ledger_csv($amount=null){
		 //configure::write('debug',2);
		
		$ledgerArray = $this->Session->read('finalArray');
        //debug($ledgerArray);
		$this->loadModel('Currency');
        $currencies = $this->Currency->find('list',array('fields'=>array('Currency.symbol','Currency.name')));
        
        $i=0; $final=null;
        foreach($ledgerArray as $ledger){
        	
            $debit=null;
			if($ledger['credit'] == 0){ $credit = 0;}else { $credit =$ledger['credit'];}
			if($ledger['debit'] == 0){} else {$debit = $ledger['debit'];}
        	
        	$final[$i]['Id']       =  $i+1;
        	$final[$i]['Date']     =  date("d M Y", strtotime($ledger['date'].' 00:00:00'));
        	$final[$i]['Details']  =  $ledger['cheque_no'];
        	if($ledger['transfer_account']){
        		$final[$i]['Transfer'] =  $ledger['transfer_account'];
        	}else{
        		$final[$i]['Transfer'] =  ' ';
        	}
        	
        	$final[$i]['Increase'] =  $currencies[$this->params['currency']].' '.$credit;
        	$final[$i]['Decrease'] =  $currencies[$this->params['currency']].' '.$debit;
        	
        	if(!$amount){
        		$balance = $currencies[$this->params['currency']].' '.$ledger['balance'];
        	}
        	$final[$i]['Balance']  = $balance;
        	
        	$i++;
        }
        
        $this->Export->exportCsv($final, 'ledger.csv');
	}
	
	
	
	
	public function ledger_home1($page=null,$limit=null,$count=null,$account_id=null,$amount =null,$transaction_type=null,$accountx=null){
	//	Configure::write('debug',2);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		
		$acc_name = $this->AccountsAccount->findById($account_id,array('fields'=>'AccountsAccount.id,AccountsAccount.account_name,AccountsAccount.opening_balance'));
		$ledger_balance = $this->AccountsLedger->find('first',array(
								'conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id),
								'fields'=>array('AccountsLedger.balance'),
								'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')
							));
		if(empty($ledger_balance)){
			$closing_balance = $acc_name['AccountsAccount']['opening_balance'];
		}
		else{
			$closing_balance = $ledger_balance['AccountsLedger']['balance'];
		}
		
		if($page){
			$url = 'ledger_home'.'/'.$page.'/'.$limit.'/'.$count.'/'.$account_id;
		}else{
			$url = 'ledger_home/0/0/0/'.$account_id;
		}
		$checkifpresent=0;
 		foreach($this->Session->read('Ledger.Links123') as $k3=>$v3){
 			if($v3 == $url)	{
 				$checkifpresent=1;
 			}
 		}
		$qwer=1;
 		if($this->Session->read('Ledger.Links123')){
 			foreach($this->Session->read('Ledger.Links123') as $k=>$v){
				$x = explode("/",$v);
				$y = explode("/",$url);
				if($x[4]=='page_style.css'){
				   $this->Session->write('Ledger.Name.'.$k,'Yes');
			       $this->Session->delete('Ledger.Links123.'.$k);
			       $this->Session->delete('Ledger.Name.'.$k);
				}
				if($x[4] == $y[4]){
					$flag[$k] = $v;
				}
				
			}
			$var = count($this->Session->read('Ledger.Links123'));
 			$var1 = $var+1;
 			if($var >= 5 && !$checkifpresent){
 				$this->Session->delete('Ledger.Name.1');
 				$this->Session->delete('Ledger.Links123.1');
 				$i=1;
 				foreach($this->Session->read('Ledger.Name') as $k1=>$v1){
 					 $this->Session->delete('Ledger.Name.'.$k1);
 					 $this->Session->write('Ledger.Name.'.$i,$v1);
 					 $i++;
 				}
 				$j=1;
 				foreach($this->Session->read('Ledger.Links123') as $k2=>$v2){
 					 $this->Session->delete('Ledger.Links123.'.$k2);
 					 $this->Session->write('Ledger.Links123.'.$j,$v2);
 					 $j++;
 				}
 			}
 			if(empty($flag)){
 				$this->Session->write('Ledger.Name.'.$var1,$acc_name['AccountsAccount']['account_name']);
 				$this->Session->write('Ledger.Links123.'.$var1,$url);
 			}
 		}else{
 			$this->Session->write('Ledger.Name.'.$qwer,$acc_name['AccountsAccount']['account_name']);
 			$this->Session->write('Ledger.Links123.'.$qwer,$url);
 		}
	//	$this->AccountsLedger->recursive = 0;
		$this->set('id',$account_id);
		
		$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AccountsAccount.active'=>'Y'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name','AccountsAccount.level','AccountsAccount.parent_id')));
		$i=$j=$k=$l=0;
		/**
		 * Foreach to seperate accounts in levelwise.
		 * */
		foreach($accounts as $account){
			switch($account['AccountsAccount']['level']){
				case 1:
					$level1[$i]=$account;
					$i++;
					break;
					
				case 2:
					$level2[$j]=$account;
					$j++;
					break;
					
				case 3:
					$level3[$k]=$account;
					$k++;
					break;
				case 4:
					$level4[$l]=$account;
					$l++;
					break;
			}
		}
		if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
		if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
		if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
		if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');

		/**
		 * To get all accounts in a tree structure.
		 * It is used to set parent_id for a new account.
		 * */
		foreach($level1 as $level11){
			$final_account[$level11['AccountsAccount']['id']] = $level11['AccountsAccount']['account_name']; 
			if($level2){
				foreach($level2 as $level22){
					if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
						$final_account[$level22['AccountsAccount']['id']] = '|----'.$level22['AccountsAccount']['account_name'];
						if($level3){$w=1;
							foreach($level3 as $level33){
								if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
									$final_account[$level33['AccountsAccount']['id']] = '|--------'.$level33['AccountsAccount']['account_name'];
									if($level4){
										foreach($level4 as $level44){
											if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
												$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		$this->set(compact('final_account','closing_balance','acc_name'));		
		/**
		 * To set the pagination 
		 **/
		if(empty($this->data)){
			
		if(!$final = Cache::read('final')){
		if(!$page) $page=1; //Initialize the page 
		if(!$limit) $limit=20; // Initialize the limit 
		$offset=$this->countPages($count,$limit,$page);//Get Offset value 
		if(!$offset)  $offset=0;
		/**
		 * Finding the all ledgers for current year for selected account
		 **/
		$current_year = date('Y');
		$ledgeraccounts = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.date LIKE'=>$current_year.'%'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
		$count= $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.date LIKE'=>$current_year.'%')));
		foreach($ledgeraccounts as $ledgeraccount){
			/**
			 * Finds the corresponding transfer account name using the transaction_id     
			 **/
			$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id'],'AccountsLedger.date LIKE'=>$current_year.'%')),'fields'=>array('AccountsLedger.accounts_account_id')));                       
			$transfer_account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$transfer_account['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));
			$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
			$final[$ledgeraccount['AccountsLedger']['id']]['date'] = AppModel::dateFormat($ledgeraccount['AccountsLedger']['date']);
			$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
			$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
			$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
			$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = $ledgeraccount['AccountsLedger']['balance'];
			$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
		}
		Cache::write('final', $final, 86400);		
		$this->set(compact('final'));
		
		
		$this->set(compact('page','limit','count','account_id'));
		}
		}
		$proceed = null;
		if(!empty($this->data['Ledger'])){
			debug($this->data);
			
			if($this->data['Ledger']['date'] == 'Click for Date'){
				$this->Session->setFlash(__('<div class="flashMessageError">Kindly select the date!</div>',true));
				return;
			}
			if($this->data['Ledger']['cheque_no'] == 'Enter Details'){
				$this->Session->setFlash(__('<div class="flashMessageError">Kindly enter the details!</div>',true));
				return;
			}
			/**
			 * Finds the recent transaction of the current account 
			 *  
			 * Purpose:To Calculate the Balance
			 **/
			$currentledgeraccount=$this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id ),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
			
			/**
			 * Finds the recent transaction of the selected account 
			 * 
			 * Purpose:To Calculate Balance   
			 **/
			$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
			
			/**
			 * Finds the AccountsAccount record for current and selected account 
			 * 
			 * Purpose: This is used when there are no records found in AccountsLedger for current or selected account or for both.  
			 **/
			$this->loadModel('AccountsAccount');
			$this->loadModel('AccountsGoldenrule');
			$balance = $this->AccountsAccount->findById($account_id);
			$currentAccountType = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$balance['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.id','AccountType.accounts_goldenrule_id')));
			$currentGoldenRule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$currentAccountType['AccountType']['accounts_goldenrule_id'])));	
			
			
			
			
			$balance2 = $this->AccountsAccount->findById($this->data['Ledger']['accounts_account_id']);
			$sellectedAccount_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$balance2['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
			$selectedAcccount_Golddeenruulee = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$sellectedAccount_type['AccountType']['accounts_goldenrule_id']))); 
			
			/**Validation Part**/
			if((!is_numeric($this->data['Ledger']['credit'])) || (!is_numeric($this->data['Ledger']['debit']))){
				$this->Session->setFlash(__('<div class="flashMessageError">Please enter the valid amount for successful Transaction!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if(($this->data['Ledger']['credit']==0) && ($this->data['Ledger']['debit']==0)){
				$this->Session->setFlash(__('<div class="flashMessageError">Transaction failed! Please enter the valid amount for successful Transaction!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if($this->data['Ledger']['debit']>0 && $this->data['Ledger']['credit']>0){
				$this->Session->setFlash(__('<div class="flashMessageError">Transaction Failed! Couldn\'t process Credit and Debit at the same time.</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			if($account_id==$this->data['Ledger']['accounts_account_id']){
				$this->Session->setFlash(__('<div class="flashMessageError">You have selected the same account for transaction! Sorry could not process!</div>'));
				$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
			}
			
			if($this->data['Ledger']['credit']>0){
				if($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit'){
					if(empty($transfer_account)){
						if($balance2['AccountsAccount']['opening_balance'] < $this->data['Ledger']['credit']){
							$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}else{
						if($transfer_account['AccountsLedger']['balance'] < $this->data['Ledger']['credit']){
							$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}
				}elseif($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit'){
					if(empty($currentledgeraccount)){
						if($balance['AccountsAccount']['opening_balance'] < $this->data['Ledger']['credit']){
							$this->Session->setFlash('<div class="flashMessageError">Sorry! your account don\'t have enough balance for this transaction!</div>');
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}else{
						if($currentledgeraccount['AccountsLedger']['balance'] < $this->data['Ledger']['credit']){
							$this->Session->setFlash(__('<div class="flashMessageError">Sorry! you don\'t have enough balance for this transaction!</div>'));
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}
				}
			}
			
			
			
			if($this->data['Ledger']['debit'] > 0){
				if($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit'){
					if(empty($transfer_account)){
						if($balance2['AccountsAccount']['opening_balance'] < $this->data['Ledger']['debit']){
							$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}else{
						if($transfer_account['AccountsLedger']['balance'] < $this->data['Ledger']['debit']){
							$this->Session->setFlash('<div class="flashMessageError">Sorry! selected account don\'t have enough balance for this transaction!</div>');
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}
				}elseif($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit'){
				if(empty($currentledgeraccount)){
						if($balance['AccountsAccount']['opening_balance'] < $this->data['Ledger']['debit']){
							$this->Session->setFlash('<div class="flashMessageError">Sorry! your account don\'t have enough balance for this transaction!</div>');
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}else{
						if($currentledgeraccount['AccountsLedger']['balance'] < $this->data['Ledger']['debit']){
							$this->Session->setFlash(__('<div class="flashMessageError">Sorry! you don\'t have enough balance for this transaction!</div>'));
							$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
						}
					}
				}
			}
			
			$proceed = 1; 
			/**Validation Ends**/
			
			/**
			 * Transaction starts 
			 **/
			if($proceed == 1){
				
				
				
				$currentAcc_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));     	
				$selectedAcc_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id'],'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
				
				
				if((empty($currentAcc_past_entries)) && (empty($selectedAcc_past_entries))){
					/** 
					 * $save1 array is used for current account 
					 * 
					 * $save2 array is used for selected account  
					 **/
					$save1['AccountsLedger']['accounts_account_id'] = $account_id;
					$save1['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
					$save1['AccountsLedger']['date'] = $this->data['Ledger']['date'];
					$save1['AccountsLedger']['transaction_id'];
					$save1['AccountsLedger']['accounts_bill_id'];
					$save1['AccountsLedger']['approved_by'];
				
					$save2['AccountsLedger']['accounts_account_id'] = $this->data['Ledger']['accounts_account_id'];
					$save2['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
					$save2['AccountsLedger']['date'] = $this->data['Ledger']['date'];
					$save2['AccountsLedger']['transaction_id'];
					$save2['AccountsLedger']['accounts_bill_id'];
					$save2['AccountsLedger']['approved_by'];
				
					/**
					 * The current transaction is credit for current account then it goes here 
					 * 
					 * Here the balance is calculated 
					 **/
					if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
						
						/**
						 * If there is no previous transaction for the selected or current account then, it enters into *if condition 
						 * 
						 * If transaction happened already then it enters into *else part 
						 **/
						if(empty($currentledgeraccount)){
							$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit']; 
						}
						else{
							$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']+$this->data['Ledger']['credit'];
						}
						$save1['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
						$save1['AccountsLedger']['debit'] = 0;
						$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						
						//9-nov
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['decrease'] == 'Debit'){
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
							}
							
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
							debug($save2);
						}
						else{
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['credit'];	
							}
							
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount credited';
							debug($save2);
						}
						//end 9-nov
						
					
					}
					elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
						if(empty($currentledgeraccount)){
							$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
						}
						else{
							$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
						}
						
						$save1['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['credit'] = 0;
						$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
						
						//9-nov
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['increase'] == 'Credit'){
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
							}
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
							debug($save2);
						}
						else{
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['debit'];
							}
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
							debug($save2);
						}
						//end 09-nov
						
						
					}elseif(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
						
						
						if(($balance['AccountsAccount']['liability_type'] == 'Credit Card') && ($this->data['Ledger']['credit'] > 0) && ($balance['AccountsAccount']['account_name'] !='Accounts Payable')){
							
							//Accounts Payable 
							$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id')));
							$accountsPayable_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
							
							$accountsPayable_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accountsPayable_accountdetails['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
							$accountsPayable_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accountsPayable_type['AccountType']['accounts_goldenrule_id'])));
							
							if(empty($accountsPayable_ledgerdetails)){
								$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['opening_balance'];
							}
							else{
								$accountsPayable_balance_amount = $accountsPayable_ledgerdetails['AccountsLedger']['balance'];
							}
							
							$savecredit->data = null;
							$this->AccountsLedger->create();
							$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
							$savecredit->data['AccountsLedger']['date'] = $this->data['Ledger']['date']; 
							$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
							$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
							$savecredit->data['AccountsLedger']['cheque_no'] = "Amount debited from ".$balance['AccountsAccount']['account_name'];
							if($accountsPayable_golden_rule['AccountsGoldenrule']['decrease'] == 'Debit'){
								$savecredit->data['AccountsLedger']['credit'] = "0";
								$savecredit->data['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
								$decrease_payable = 'debit';
							}
							else{
								$savecredit->data['AccountsLedger']['debit'] = "0";
								$savecredit->data['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
								$decrease_payable = 'credit';
							}
							
							if($accountsPayable_golden_rule['AccountsGoldenrule']['increase'] == 'Debit'){
								$increase_payable = 'debit';
							}
							else{
								$increase_payable = 'credit';
							}
							
							$savecredit->data['AccountsLedger']['balance'] = ($accountsPayable_balance_amount - $this->data['Ledger']['credit']);
							
							$this->AccountsLedger->save($savecredit->data);
							
							$acc_payable = $this->AccountsLedger->getLastInsertId();
							$save_transac_id['AccountsLedger']['id'] = $acc_payable;
							$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
							
							$current_payable_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$acc_payable)));
								$current_payable_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
								
								if(!empty($current_payable_past_entries)){
									foreach($current_payable_past_entries as $current_payable_transaction){
										$updatePayableLedger['AccountsLedger']['id'] = $current_payable_transaction['AccountsLedger']['id'];
										/*if(($increase_payable == 'credit') && ($current_payable_transaction['AccountsLedger']['credit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['credit'];
										}*/
										if($current_payable_transaction['AccountsLedger']['credit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['credit'];
										}
										
										if($current_payable_transaction['AccountsLedger']['debit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['debit'];
										}
										/*if(($decrease_payable == 'debit') && ($current_payable_transaction['AccountsLedger']['debit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['debit'];
										}*/
										$this->AccountsLedger->save($updatePayableLedger);
										$current_payable_transaction_balance = $this->AccountsLedger->findById($current_payable_transaction['AccountsLedger']['id']);
									}
								}
					
						}
						
						
						
						
						
						if(empty($currentledgeraccount)){
							$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
						}
						else{
							$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
						}
						
						$save1['AccountsLedger']['credit'] = 0;
						$save1['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
						$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
						
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['decrease'] == 'Credit'){
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['credit'];
							}
							
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
						else{
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['credit'];
							}
							
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
						
					}elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
						if(empty($currentledgeraccount)){
							$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit']; 
						}
						else{
							$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
						}
						$save1['AccountsLedger']['debit'] = 0;
						$save1['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
						$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						
						if($selectedAcccount_Golddeenruulee['AccountsGoldenrule']['increase'] == 'Debit') {
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
							}
							
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						else {
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['debit'];	
							}
							
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						
					}
									
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($save1);
					$getLasIns = $this->AccountsLedger->getLastInsertId();
					
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($save2);
					
					/**
					 * Transaction id for both the accounts are gets added here
					 * The transaction_id is taken as the (*id) of ($save2)=>array
					 * And to find the lastly inserted record we use the cheque no.  
					 **/
					$transact_id = $this->AccountsLedger->getLastInsertId();
					
					$save11['AccountsLedger']['id'] = $getLasIns;
					$save11['AccountsLedger']['transaction_id'] = $transact_id;
					$this->AccountsLedger->save($save11);
					
					$save22['AccountsLedger']['id'] = $transact_id;
					$save22['AccountsLedger']['transaction_id'] =$transact_id; 
					$this->AccountsLedger->save($save22);
					
					/**
					 * Update the existing ledger entries
					 **/
					
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Transaction is successful!</div>'));
					$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
					
				}
				else{
					if(!empty($currentAcc_past_entries)){
						
						$calculate_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.date <='=>$this->data['Ledger']['date']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
						if(empty($calculate_balance)){
							$baaalaanceeeee = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$account_id),'fields'=>array('AccountsAccount.opening_balance')));
							$calculate_balance['AccountsLedger']['balance'] = $baaalaanceeeee['AccountsAccount']['opening_balance'];
						}
						
						
						if($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit'){
							$increase = 'credit';
						}
						else{
							$increase = 'debit';
						}
						
						if($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit'){
							$decrease = 'credit';
						}
						else{
							$decrease = 'debit';
						}
					
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
							$current_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$current_saveledger['AccountsLedger']['debit'] = 0;
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] + $this->data['Ledger']['credit'];
							
						}
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							
							
							
							
							$current_saveledger['AccountsLedger']['credit'] = 0;
							$current_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] - $this->data['Ledger']['credit'];
							
							if(($balance['AccountsAccount']['liability_type'] == 'Credit Card') && ($this->data['Ledger']['credit'] > 0) && ($balance['AccountsAccount']['account_name'] !='Accounts Payable')){
							
								//Accounts Payable 
								$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id')));
								$accountsPayable_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
								
								$accountsPayable_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accountsPayable_accountdetails['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
								$accountsPayable_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accountsPayable_type['AccountType']['accounts_goldenrule_id'])));
								
								if(empty($accountsPayable_ledgerdetails)){
									$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['opening_balance'];
								}
								else{
									$accountsPayable_balance_amount = $accountsPayable_ledgerdetails['AccountsLedger']['balance'];
								}
								
								$savecredit->data = null;
								$this->AccountsLedger->create();
								$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
								$savecredit->data['AccountsLedger']['date'] = $this->data['Ledger']['date']; 
								$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
								$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
								$savecredit->data['AccountsLedger']['cheque_no'] = "Amount debited from ".$balance['AccountsAccount']['account_name'];
								if($accountsPayable_golden_rule['AccountsGoldenrule']['decrease'] == 'Debit'){
									$savecredit->data['AccountsLedger']['credit'] = "0";
									$savecredit->data['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'debit';
								}
								else{
									$savecredit->data['AccountsLedger']['debit'] = "0";
									$savecredit->data['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'credit';
								}
								if($accountsPayable_golden_rule['AccountsGoldenrule']['increase'] == 'Debit'){
									$increase_payable = 'debit';
								}
								else{
									$increase_payable = 'credit';
								}
								
								$savecredit->data['AccountsLedger']['balance'] = ($accountsPayable_balance_amount - $this->data['Ledger']['credit']);
								
								$this->AccountsLedger->save($savecredit->data);
								
								$acc_payable = $this->AccountsLedger->getLastInsertId();
								$save_transac_id['AccountsLedger']['id'] = $acc_payable;
								$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
								
								
								$current_payable_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$acc_payable)));
								$current_payable_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
								
								if(!empty($current_payable_past_entries)){
									foreach($current_payable_past_entries as $current_payable_transaction){
										$updatePayableLedger['AccountsLedger']['id'] = $current_payable_transaction['AccountsLedger']['id'];
										/*if(($increase_payable == 'credit') && ($current_payable_transaction['AccountsLedger']['credit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['credit'];
										}*/
										if($current_payable_transaction['AccountsLedger']['credit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['credit'];
										}
										
										if($current_payable_transaction['AccountsLedger']['debit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['debit'];
										}
										/*if(($decrease_payable == 'debit') && ($current_payable_transaction['AccountsLedger']['debit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['debit'];
										}*/
										$this->AccountsLedger->save($updatePayableLedger);
										$current_payable_transaction_balance = $this->AccountsLedger->findById($current_payable_transaction['AccountsLedger']['id']);
									}
								}
							}
							
							
					}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							$current_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$current_saveledger['AccountsLedger']['debit'] = 0;
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] + $this->data['Ledger']['debit'];
							
						}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							$current_saveledger['AccountsLedger']['credit'] = 0;
							$current_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$current_saveledger['AccountsLedger']['balance'] = $calculate_balance['AccountsLedger']['balance'] - $this->data['Ledger']['debit'];
							
						}
						$current_saveledger['AccountsLedger']['accounts_account_id'] = $account_id;
						$current_saveledger['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$current_saveledger['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($current_saveledger);
						$current_transac_id = $this->AccountsLedger->getLastInsertId();
						$savee_traansact_id['AccountsLedger']['id'] = $current_transac_id;
						$savee_traansact_id['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->save($savee_traansact_id);
						
						$current_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$current_transac_id)));
						
						
						foreach($currentAcc_past_entries as $currentAcc_past_entry){
							$updateCurrentLedger['AccountsLedger']['id'] = $currentAcc_past_entry['AccountsLedger']['id'];
							/*if(($increase == 'credit') && ($currentAcc_past_entry['AccountsLedger']['credit'] > 0)){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] - $currentAcc_past_entry['AccountsLedger']['credit'];
							}*/
							if($currentAcc_past_entry['AccountsLedger']['credit'] > 0){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] + $currentAcc_past_entry['AccountsLedger']['credit'];
							}
							
							if($currentAcc_past_entry['AccountsLedger']['debit'] > 0){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] - $currentAcc_past_entry['AccountsLedger']['debit'];
							}
							/*if(($decrease == 'debit') && ($currentAcc_past_entry['AccountsLedger']['debit'] > 0)){
								$updateCurrentLedger['AccountsLedger']['balance'] = $current_transaction_balance['AccountsLedger']['balance'] + $currentAcc_past_entry['AccountsLedger']['debit'];
							}*/
							$this->AccountsLedger->save($updateCurrentLedger);
							$current_transaction_balance = $this->AccountsLedger->findById($currentAcc_past_entry['AccountsLedger']['id']);
						}
					}
					else{
						$save1['AccountsLedger']['accounts_account_id'] = $account_id;
						$save1['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$save1['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
						
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit']; 
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']+$this->data['Ledger']['credit'];
							}
							$save1['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save1['AccountsLedger']['debit'] = 0;
							$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
							}
							
							$save1['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save1['AccountsLedger']['credit'] = 0;
							$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
							
						}
						elseif(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							
							
							if(($balance['AccountsAccount']['liability_type'] == 'Credit Card') && ($this->data['Ledger']['credit'] > 0) && ($balance['AccountsAccount']['account_name'] !='Accounts Payable')){
							
								//Accounts Payable 
								$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id')));
								$accountsPayable_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
								
								$accountsPayable_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accountsPayable_accountdetails['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
								$accountsPayable_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accountsPayable_type['AccountType']['accounts_goldenrule_id'])));
								
								if(empty($accountsPayable_ledgerdetails)){
									$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['opening_balance'];
								}
								else{
									$accountsPayable_balance_amount = $accountsPayable_ledgerdetails['AccountsLedger']['balance'];
								}
								
								$savecredit->data = null;
								$this->AccountsLedger->create();
								$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
								$savecredit->data['AccountsLedger']['date'] = $this->data['Ledger']['date']; 
								$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
								$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
								$savecredit->data['AccountsLedger']['cheque_no'] = "Amount debited from ".$balance['AccountsAccount']['account_name'];
								if($accountsPayable_golden_rule['AccountsGoldenrule']['decrease'] == 'Debit'){
									$savecredit->data['AccountsLedger']['credit'] = "0";
									$savecredit->data['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'debit';
								}
								else{
									$savecredit->data['AccountsLedger']['debit'] = "0";
									$savecredit->data['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
									$decrease_payable = 'credit';
								}
								
								if($accountsPayable_golden_rule['AccountsGoldenrule']['increase'] == 'Debit'){
									$increase_payable = 'debit';
								}
								else{
									$increase_payable = 'credit';
								}
								
								$savecredit->data['AccountsLedger']['balance'] = ($accountsPayable_balance_amount - $this->data['Ledger']['credit']);
								
								$this->AccountsLedger->save($savecredit->data);
								
								$acc_payable = $this->AccountsLedger->getLastInsertId();
								$save_transac_id['AccountsLedger']['id'] = $acc_payable;
								$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
								
								$current_payable_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$acc_payable)));
								$current_payable_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable,'AccountsLedger.date >'=> $this->data['Ledger']['date']),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));
								
								if(!empty($current_payable_past_entries)){
									foreach($current_payable_past_entries as $current_payable_transaction){
										$updatePayableLedger['AccountsLedger']['id'] = $current_payable_transaction['AccountsLedger']['id'];
										/*if(($increase_payable == 'credit') && ($current_payable_transaction['AccountsLedger']['credit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['credit'];
										}*/
										if($current_payable_transaction['AccountsLedger']['credit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['credit'];
										}
										
										if($current_payable_transaction['AccountsLedger']['debit'] > 0){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] - $current_payable_transaction['AccountsLedger']['debit'];
										}
										/*if(($decrease_payable == 'debit') && ($current_payable_transaction['AccountsLedger']['debit'] > 0)){
											$updatePayableLedger['AccountsLedger']['balance'] = $current_payable_transaction_balance['AccountsLedger']['balance'] + $current_payable_transaction['AccountsLedger']['debit'];
										}*/
										$this->AccountsLedger->save($updatePayableLedger);
										$current_payable_transaction_balance = $this->AccountsLedger->findById($current_payable_transaction['AccountsLedger']['id']);
									}
								}
								
							}
							
							
							
							
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
							}
							
							$save1['AccountsLedger']['credit'] = 0;
							$save1['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save1['AccountsLedger']['payment_description'] = 'Amount Debited!';
							
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							if(empty($currentledgeraccount)){
								$save1['AccountsLedger']['balance'] = $balance['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit']; 
							}
							else{
								$save1['AccountsLedger']['balance'] = $currentledgeraccount['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
							}
							$save1['AccountsLedger']['debit'] = 0;
							$save1['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save1['AccountsLedger']['payment_description'] = 'Amount credited';
						}
						
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($save1);
						$current_transac_id = $this->AccountsLedger->getLastInsertId();
						
						$save_transac_id['AccountsLedger']['id'] = $current_transac_id;
						$save_transac_id['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->save($save_transac_id);
					}
					
					if(!empty($selectedAcc_past_entries)){
						$calculate_selected_acc_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$this->data['Ledger']['accounts_account_id'],'AccountsLedger.date <='=>$this->data['Ledger']['date']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
						if(empty($calculate_selected_acc_balance)){
							$balanceeeee = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Ledger']['accounts_account_id']),'fields'=>array('AccountsAccount.opening_balance')));
							$calculate_selected_acc_balance['AccountsLedger']['balance'] = $balanceeeee['AccountsAccount']['opening_balance'];
						}
						$selected_account_detail = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Ledger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_type_id')));
						$$selected_account_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$selected_account_detail['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
						$selected_golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$selected_account_type['AccountType']['accounts_goldenrule_id'])));
						if($selected_golden_rule['AccountsGoldenrule']['increase'] == 'Credit'){
							$increase1 = 'credit';
						}
						else{
							$increase1 = 'debit';
						}
						
						if($selected_golden_rule['AccountsGoldenrule']['decrease'] == 'Credit'){
							$decrease1 = 'credit';
						}
						else{
							$decrease1 = 'debit';
						}
					
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
							$selected_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$selected_saveledger['AccountsLedger']['credit'] = 0;
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] - $this->data['Ledger']['credit'];
							
						}
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							$selected_saveledger['AccountsLedger']['debit'] =0;
							$selected_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] + $this->data['Ledger']['credit'];
							
						}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							$selected_saveledger['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$selected_saveledger['AccountsLedger']['credit'] = 0;
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] - $this->data['Ledger']['debit'];
							
						}
						
						if(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							$selected_saveledger['AccountsLedger']['debit'] = 0;
							$selected_saveledger['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$selected_saveledger['AccountsLedger']['balance'] = $calculate_selected_acc_balance['AccountsLedger']['balance'] + $this->data['Ledger']['debit'];
							
						}
						
						$selected_saveledger['AccountsLedger']['accounts_account_id'] = $this->data['Ledger']['accounts_account_id'];
						$selected_saveledger['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$selected_saveledger['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						$selected_saveledger['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($selected_saveledger);
						/*$selected_transac_id = $this->AccountsLedger->getLastInsertId();
						$savee_traansact_id['AccountsLedger']['id'] = $selected_transac_id;
						$savee_traansact_id['AccountsLedger']['transaction_id'] = $current_transac_id;
						$this->AccountsLedger->save($savee_traansact_id);*/
						
						$selected_transaction_balance = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$selected_transac_id)));
						
						
						foreach($selectedAcc_past_entries as $selectedAcc_past_entry){
							
							$updateSelectedLedger['AccountsLedger']['id']= $selectedAcc_past_entry['AccountsLedger']['id'];
							
							if($selectedAcc_past_entry['AccountsLedger']['credit'] > 0){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] + $selectedAcc_past_entry['AccountsLedger']['credit'];
							}
							/*if(($increase1 == 'debit') && ($selectedAcc_past_entry['AccountsLedger']['credit'] > 0)){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] - $selectedAcc_past_entry['AccountsLedger']['credit'];
							}*/
							
							/*if(($decrease1 == 'credit') && ($selectedAcc_past_entry['AccountsLedger']['debit'] > 0)){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] + $selectedAcc_past_entry['AccountsLedger']['debit'];
							}*/
							if($selectedAcc_past_entry['AccountsLedger']['debit'] > 0){
								$updateSelectedLedger['AccountsLedger']['balance'] = $selected_transaction_balance['AccountsLedger']['balance'] - $selectedAcc_past_entry['AccountsLedger']['debit'];
							}
							$this->AccountsLedger->save($updateSelectedLedger);
							$selected_transaction_balance = $this->AccountsLedger->findById($selectedAcc_past_entry['AccountsLedger']['id']);
						}
					}
					else{
						$save2['AccountsLedger']['accounts_account_id'] = $this->data['Ledger']['accounts_account_id'];
						$save2['AccountsLedger']['cheque_no'] = $this->data['Ledger']['cheque_no'];
						$save2['AccountsLedger']['date'] = $this->data['Ledger']['date'];
						
						if(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Credit')){
						
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['credit'];	
							}
							
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Debit')){
							
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['debit'];
							}
							
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
							
						}
						elseif(($this->data['Ledger']['debit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['increase'] == 'Debit')){
							
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']+$this->data['Ledger']['credit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']+$this->data['Ledger']['credit'];
							}
							
							$save2['AccountsLedger']['debit'] = 0;
							$save2['AccountsLedger']['credit'] = $this->data['Ledger']['credit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Credited!';
						}
						elseif(($this->data['Ledger']['credit'] == 0) && ($currentGoldenRule['AccountsGoldenrule']['decrease'] == 'Credit')){
							
							if(empty($transfer_account)){
								$save2['AccountsLedger']['balance'] = $balance2['AccountsAccount']['opening_balance']-$this->data['Ledger']['debit'];
							}
							else{
								$save2['AccountsLedger']['balance'] = $transfer_account['AccountsLedger']['balance']-$this->data['Ledger']['debit'];	
							}
							
							$save2['AccountsLedger']['credit'] = 0;
							$save2['AccountsLedger']['debit'] = $this->data['Ledger']['debit'];
							$save2['AccountsLedger']['payment_description'] = 'Amount Debited!';
						}
						
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($save2);
					
					}
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Transaction is successful!</div>'));
					$this->redirect(array('action'=>'ledger_home'.'/0/0/0/'.$account_id));
				}
			
			}
		}
		$final = null;$ledgeraccount=null;
		if($amount){
		$this->request->data['Filter']['transaction_type'] = $transaction_type;
		$this->request->data['Filter']['amount'] = $amount;
		$this->request->data['Filter']['account'] = $accountx;
		}
		//debug($this->data);
		if(!empty($this->data['Filter'])){
			
			debug($this->data);
			if(!$page) $page=1; //Initialize the page 
			if(!$limit) $limit=15; // Initialize the limit 
			$offset=$this->countPages($count,$limit,$page);//Get Offset value 
			if(!$offset)  $offset=0;
			$current_year = date('Y');
			debug($this->data['Filter']['transaction_type']);
			if(!empty($this->data['Filter']['transaction_type'])){
				if(!empty($this->data['Filter']['amount'])){
					$amount = $this->data['Filter']['amount'];
				}else{
					$amount = 0;
				}
				debug($amount);
				$transaction_type = $this->data['Filter']['transaction_type'];
				
				if($this->data['Filter']['transaction_type'] == 'Credit'){
					$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.credit >'=>$amount),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));
					$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.credit >'=>$amount)));
				}
				else{
					$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.debit >'=>$amount),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));
					$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'AccountsLedger.debit >'=>$amount)));
				}
			}
			else{
				if(!empty($this->data['Filter']['amount'])){
					$amount = $this->data['Filter']['amount'];
				}else{
					$amount = 0;
				}
				$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$amount,'AccountsLedger.debit >' => $amount)),'fields' => array('AccountsLedger.id','AccountsLedger.transaction_id','AccountsLedger.accounts_account_id','AccountsLedger.date','AccountsLedger.debit','AccountsLedger.credit','AccountsLedger.balance','AccountsLedger.cheque_no'),'limit'=>$limit,'offset'=>$offset,'order'=>array('AccountsLedger.date DESC')));     
				$count = $this->AccountsLedger->find('count',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$amount,'AccountsLedger.debit >' => $amount))));
				
			}
			
			/*if(!empty($this->data['Filter']['account'])){
				$filterd_account = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$account_id,'OR'=>array('AccountsLedger.credit >'=>$this->data['Filter']['amount'],'AccountsLedger.debit >' => $this->data['Filter']['amount']))));
			}*/
			debug($filterd_account);
			debug($this->data['Filter']['account']);
			foreach($filterd_account as $ledgeraccount){
			/**
			 * Finds the corresponding transfer account name using the transaction_id     
			 **/
			 	/*if(!empty($this->data['Filter']['account'])){
			 		$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.accounts_account_id'=>$this->data['Filter']['account']),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id'])),'limit'=>$limit,'offset'=>$offset));
			 		$count = $this->AccountsLedger->find('count',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.accounts_account_id'=>$this->data['Filter']['account']),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id']))));
			 	}else{*/
					$transfer_account = $this->AccountsLedger->find('first',array('conditions'=>array('NOT'=>array('AccountsLedger.accounts_account_id'=>$account_id),'AND'=>array('AccountsLedger.accounts_account_id'=>$this->data['Filter']['account']),'AND'=>array('AccountsLedger.transaction_id'=>$ledgeraccount['AccountsLedger']['transaction_id'])),'fields'=>array('AccountsLedger.accounts_account_id')));
					$transfer_account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$transfer_account['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));
			 	//}
				debug($transfer_account);
				debug($transfer_account_name);
				if($transfer_account['AccountsLedger']['accounts_account_id'] == $this->data['Filter']['account']){
					$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
					$final[$ledgeraccount['AccountsLedger']['id']]['date'] = $ledgeraccount['AccountsLedger']['date'];
					$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
					$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = $ledgeraccount['AccountsLedger']['balance'];
					$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
				}
				elseif(empty($this->data['Filter']['account'])){
					$final[$ledgeraccount['AccountsLedger']['id']]['id'] = $ledgeraccount['AccountsLedger']['id'];
					$final[$ledgeraccount['AccountsLedger']['id']]['date'] = $ledgeraccount['AccountsLedger']['date'];
					$final[$ledgeraccount['AccountsLedger']['id']]['cheque_no'] = $ledgeraccount['AccountsLedger']['cheque_no'];
					$final[$ledgeraccount['AccountsLedger']['id']]['credit'] = $ledgeraccount['AccountsLedger']['credit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['debit'] = $ledgeraccount['AccountsLedger']['debit'];
					$final[$ledgeraccount['AccountsLedger']['id']]['balance'] = $ledgeraccount['AccountsLedger']['balance'];
					$final[$ledgeraccount['AccountsLedger']['id']]['transfer_account'] = $transfer_account_name['AccountsAccount']['account_name'];
				}
			}
			debug($final);
			$this->set(compact('final'));
			debug($this->data['Filter']['transaction_type']);
			$transaction_type = $this->data['Filter']['transaction_type'];
			$amount = $this->data['Filter']['amount'];
			$accountx = $this->data['Filter']['account'];
			$this->set(compact('page','limit','count','account_id','amount','transaction_type','accountx'));
		}
		
		
		
		
		
	}
		function countPages($numHits, $limit, $page)
	{
		$numHits  = (int) $numHits;
		$limit    = max((int) $limit, 1);
		$page     = (int) $page;
		$numPages = ceil($numHits / $limit);

		$page = max($page, 1);
		$page = min($page, $numPages);

		if($numHits == 0) {
			$offset = 0;
		} else 	$offset = ($page - 1) * $limit;

		return $offset;
	}	
	
	
	function check(){
	//	configure::write('debug',2);
		debug($this->data);
		
	}
	
	function delete_link($key=null,$id=null){
		//Configure::write('debug',2);
		foreach($this->Session->read('Ledger.Links123') as $index => $links){
			$explode_link = explode("/",$links);
			if($explode_link[4] == 'page_style.css'){
				$this->Session->delete('Ledger.Links123.'.$index);
				$this->Session->write('Ledger.Name.'.$index,'Yess');
				$this->Session->delete('Ledger.Name.'.$index);
			}
		}
		if(!$id){
			$this->Session->delete('Ledger.Links123.'.$key);
			$this->Session->delete('Ledger.Name.'.$key);
			$this->Session->delete('LedgerPagination.'.$key);
			$this->redirect(array('controller'=>'accounts_accounts','action'=>'home'));
		}
		if($id){
			$this->Session->delete('Ledger.Links123.'.$key);
			$this->Session->delete('Ledger.Name.'.$key);
			$this->Session->delete('LedgerPagination.'.$key);
			$this->redirect(array('action'=>'ledger_home/0/0/0/'.$id));
		}
	}
	
	
	
	function delete_ledger($id=null,$ledger_id=null) {
		$this->autoRender = false;
		$this->loadModel('AccountsBill');
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsClientpaymentdetail');
		
		$ledgerRecord = $this->AccountsLedger->findById($ledger_id);
		if(!empty($ledgerRecord['AccountsLedger']['accounts_bill_id']) && $ledgerRecord['AccountsLedger']['is_neutral'] == 'N') {
			if ($ledgerRecord['AccountsLedger']['credit'] > 0) {
				$amount = $ledgerRecord['AccountsLedger']['credit'];
			} else {
				$amount = $ledgerRecord['AccountsLedger']['debit'];
			}
			if(empty($ledgerRecord['AccountsLedger']['debit'])) {
				$ledgerRecord['AccountsLedger']['debit'] = 0;
			}
			if(empty($ledgerRecord['AccountsLedger']['credit'])) {
				$ledgerRecord['AccountsLedger']['credit'] = 0;
			}
			//$bill = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'])));
			$otherledgerEntry = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id !='=>$ledgerRecord['AccountsLedger']['id'],'AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.is_neutral'=>'N','AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.credit'=>$amount,'AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));
			if(empty($otherledgerEntry))
				$otherledgerEntry = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id !='=>$ledgerRecord['AccountsLedger']['id'],'AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.is_neutral'=>'N','AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.debit'=>$amount,'AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));
			$account1 = $this->AccountsAccount->findById($otherledgerEntry['AccountsLedger']['accounts_account_id'],array('AccountsAccount.id','AccountsAccount.closing_balance'));	
			if($otherledgerEntry['AccountsLedger']['debit'] > 0) {
				$saveAccount1['AccountsAccount']['id'] = $account1['AccountsAccount']['id'];
				$saveAccount1['AccountsAccount']['closing_balance'] = $account1['AccountsAccount']['closing_balance'] + $otherledgerEntry['AccountsLedger']['debit'];
			} else {
				$saveAccount1['AccountsAccount']['id'] = $account1['AccountsAccount']['id'];
				$saveAccount1['AccountsAccount']['closing_balance'] = $account1['AccountsAccount']['closing_balance'] - $otherledgerEntry['AccountsLedger']['credit'];
			}
			$this->AccountsAccount->save($saveAccount1);
			debug($otherledgerEntry['AccountsLedger']['credit']);
			/**Log Code**/
				$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveAccount1['AccountsAccount']['id'],$otherledgerEntry['AccountsLedger']['credit'],$otherledgerEntry['AccountsLedger']['debit'],$account1['AccountsAccount']['closing_balance'],$saveAccount1['AccountsAccount']['closing_balance'],$otherledgerEntry['AccountsLedger']['id'],$ledgerRecord['AccountsLedger']['accounts_bill_id'],0,'Delete Ledger','Delete Bill Ledger from ledger interface'));
			/**Log Code**/
			
			
			
			$bill = $this->AccountsBill->findById($ledgerRecord['AccountsLedger']['accounts_bill_id'],array('AccountsBill.id','AccountsBill.amount','AccountsBill.billamount'));
			$updateBill = null;
			$updateBill['AccountsBill']['id'] = $ledgerRecord['AccountsLedger']['accounts_bill_id'];
			$updateBill['AccountsBill']['billamount'] = ($bill['AccountsBill']['billamount'] - $amount) ;
			if($bill['AccountsBill']['amount'] > ($bill['AccountsBill']['billamount'] - $amount)) {
				 $updateBill['AccountsBill']['paid_status'] = 'N';
			} else {
				$updateBill['AccountsBill']['paid_status'] = 'Y';
			}
			$this->AccountsBill->save($updateBill); 
			
			$laccounts = $this->AccountsAccount->findById($ledgerRecord['AccountsLedger']['accounts_account_id'],array('AccountsAccount.id','AccountsAccount.closing_balance'));
			$saveClosingBalance1['AccountsAccount']['id'] = $laccounts['AccountsAccount']['id'];
			if($ledgerRecord['AccountsLedger']['credit'] > 0) {
				$saveClosingBalance1['AccountsAccount']['closing_balance'] = $laccounts['AccountsAccount']['closing_balance'] - $ledgerRecord['AccountsLedger']['credit'];
			} else {
				$saveClosingBalance1['AccountsAccount']['closing_balance'] = $laccounts['AccountsAccount']['closing_balance'] + $ledgerRecord['AccountsLedger']['debit'];
			}
			$this->AccountsAccount->save($saveClosingBalance1);
			
			
			
			/**Log Code**/
				$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveClosingBalance1['AccountsAccount']['id'],$ledgerRecord['AccountsLedger']['credit'],$ledgerRecord['AccountsLedger']['debit'],$laccounts['AccountsAccount']['closing_balance'],$saveClosingBalance1['AccountsAccount']['closing_balance'],$ledgerRecord['AccountsLedger']['id'],$ledgerRecord['AccountsLedger']['accounts_bill_id'],0,'Delete Ledger','Delete Bill Ledger from ledger interface'));
			/**Log Code**/
			
			
			
			
			
			//Accounts Payable
			$accountsPayableBill = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id !='=>$ledgerRecord['AccountsLedger']['id'],'AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.is_neutral'=>'Y','AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.debit'=>$amount)));
			$accPayableClosingBalance = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$accountsPayableBill['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.closing_balance')));
			$saveAccPayableClosingBalance['AccountsAccount']['id'] = $accountsPayableBill['AccountsLedger']['accounts_account_id'];
			if($accountsPayableBill['AccountsLedger']['credit'] > 0) {
				$saveAccPayableClosingBalance['AccountsAccount']['closing_balance'] = $accPayableClosingBalance['AccountsAccount']['closing_balance'] - $accountsPayableBill['AccountsLedger']['credit'];
			} else {
				$saveAccPayableClosingBalance['AccountsAccount']['closing_balance'] = $accPayableClosingBalance['AccountsAccount']['closing_balance'] + $accountsPayableBill['AccountsLedger']['debit'];
			}
			$this->AccountsAccount->save($saveAccPayableClosingBalance);
			
			
			
			/**Log Code**/
				$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveAccPayableClosingBalance['AccountsAccount']['id'],$accountsPayableBill['AccountsLedger']['credit'],$accountsPayableBill['AccountsLedger']['debit'],$accPayableClosingBalance['AccountsAccount']['closing_balance'],$saveAccPayableClosingBalance['AccountsAccount']['closing_balance'],$accountsPayableBill['AccountsLedger']['id'],$ledgerRecord['AccountsLedger']['accounts_bill_id'],0,'Delete Ledger','Delete Bill Ledger from ledger interface'));
			/**Log Code**/
			
			
			
			$this->AccountsLedger->delete($ledger_id);
			$this->AccountsLedger->delete($accountsPayableBill['AccountsLedger']['id']);
			if($this->AccountsLedger->delete($otherledgerEntry['AccountsLedger']['id'])) {
				$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been deleted successfully!</div>'));
				$this->redirect(array('action'=>'ledger_home',0,0,0,$id,$ledger_id));
			}
		} elseif(!empty($ledgerRecord['AccountsLedger']['accounts_bill_id']) && $ledgerRecord['AccountsLedger']['is_neutral'] == 'Y') {
			/*if ($ledgerRecord['AccountsLedger']['credit'] > 0) {
				$amount = $ledgerRecord['AccountsLedger']['credit'];
			} else {
				$amount = $ledgerRecord['AccountsLedger']['debit'];
			}
			$otherledgerEntry = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id !='=>$ledgerRecord['AccountsLedger']['id'],'AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.is_neutral'=>'N','AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.credit'=>$amount)));
			if(empty($otherledgerEntry))
				$otherledgerEntry = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id !='=>$ledgerRecord['AccountsLedger']['id'],'AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.is_neutral'=>'N','AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.debit'=>$amount)));
			debug($otherledgerEntry);*/
		} elseif(!empty($ledgerRecord['AccountsLedger']['accounts_clientinvoice_id'])) {
			$invoice = $this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$ledgerRecord['AccountsLedger']['accounts_clientinvoice_id']),'fields'=>array('AccountsClientinvoice.id','AccountsClientinvoice.paid','AccountsClientinvoice.invoice_amount','AccountsClientinvoice.amount_recieved')));
			$paymentDetails = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$invoice['AccountsClientinvoice']['id']),'fields'=>array('AccountsClientpaymentdetail.id')));
			$otherledgerEntries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_clientinvoice_id'=>$ledgerRecord['AccountsLedger']['accounts_clientinvoice_id'],'AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['id'])));
			if(empty($otherledgerEntries))
				$otherledgerEntries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_clientinvoice_id'=>$ledgerRecord['AccountsLedger']['accounts_clientinvoice_id'],'AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));
			if(!empty($paymentDetails)) {
				foreach($otherledgerEntries as $otherledgerEntry) {
					$acccount = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$otherledgerEntry['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
					if($otherledgerEntry['AccountsLedger']['credit'] > 0) {
						$saveAccountsAccount['AccountsAccount']['id'] = $acccount['AccountsAccount']['id'];
						$saveAccountsAccount['AccountsAccount']['closing_balance'] = $acccount['AccountsAccount']['closing_balance'] - $otherledgerEntry['AccountsLedger']['credit'];
					} else {
						$saveAccountsAccount['AccountsAccount']['id'] = $acccount['AccountsAccount']['id'];
						$saveAccountsAccount['AccountsAccount']['closing_balance'] =  $acccount['AccountsAccount']['closing_balance'] + $otherledgerEntry['AccountsLedger']['debit'];
					}
					if($this->AccountsAccount->save($saveAccountsAccount)) {
						$this->AccountsLedger->delete($otherledgerEntry['AccountsLedger']['id']);
					}
					
					/**Log Code**/
						$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveAccountsAccount['AccountsAccount']['id'],$otherledgerEntry['AccountsLedger']['credit'],$otherledgerEntry['AccountsLedger']['debit'],$acccount['AccountsAccount']['closing_balance'],$saveAccountsAccount['AccountsAccount']['closing_balance'],$otherledgerEntry['AccountsLedger']['id'],0,$otherledgerEntry['AccountsLedger']['accounts_clientinvoice_id'],'Delete Ledger','Delete invoice Ledger from ledger interface'));
					/**Log Code**/
					
				}
				
				$paymentDetail = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_ledger_id'=>$ledger_id)));
				if(empty($paymentDetail))
					$paymentDetail = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_ledger_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));
				if(!empty($paymentDetail)) {
					$updateClientInvoice['AccountsClientinvoice']['id'] = $invoice['AccountsClientinvoice']['id'];
					$updateClientInvoice['AccountsClientinvoice']['amount_recieved'] = $invoice['AccountsClientinvoice']['amount_recieved'] - $paymentDetail['AccountsClientpaymentdetail']['paid_amount'];
					$updateClientInvoice['AccountsClientinvoice']['paid'] = 'N';
					if($this->AccountsClientinvoice->save($updateClientInvoice)) {
						$this->AccountsClientpaymentdetail->delete($paymentDetail['AccountsClientpaymentdetail']['id']);
					}
				}					
			} else {
				foreach($otherledgerEntries as $otherledgerEntry) {
					$acccount = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$otherledgerEntry['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
					if($otherledgerEntry['AccountsLedger']['credit'] > 0) {
						$saveAccountsAccount['AccountsAccount']['id'] = $acccount['AccountsAccount']['id'];
						$saveAccountsAccount['AccountsAccount']['closing_balance'] = $acccount['AccountsAccount']['closing_balance'] - $otherledgerEntry['AccountsLedger']['credit'];
					} else {
						$saveAccountsAccount['AccountsAccount']['id'] = $acccount['AccountsAccount']['id'];
						$saveAccountsAccount['AccountsAccount']['closing_balance'] =  $acccount['AccountsAccount']['closing_balance'] + $otherledgerEntry['AccountsLedger']['debit'];
					}
					if($this->AccountsAccount->save($saveAccountsAccount)) {
						$this->AccountsLedger->delete($otherledgerEntry['AccountsLedger']['id']);
						$this->AccountsClientinvoice->delete($invoice['AccountsClientinvoice']['id']);
					}
					
					
					/**Log Code**/
						$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveAccountsAccount['AccountsAccount']['id'],$otherledgerEntry['AccountsLedger']['credit'],$otherledgerEntry['AccountsLedger']['debit'],$acccount['AccountsAccount']['closing_balance'],$saveAccountsAccount['AccountsAccount']['closing_balance'],$otherledgerEntry['AccountsLedger']['id'],0,$otherledgerEntry['AccountsLedger']['accounts_clientinvoice_id'],'Delete Ledger','Delete invoice Ledger from ledger interface'));
					/**Log Code**/
					
					
				}
			}
			$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been deleted successfully!</div>'));
			$this->redirect(array('action'=>'ledger_home/0/0/0/'.$id));
		} else {
			$otherLedgerEntries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));
			debug($otherLedgerEntries);
			foreach($otherLedgerEntries as $otherLedgerEntry) {
				$accountClosingBalance = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$otherLedgerEntry['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
				$saveClosingBalance['AccountsAccount']['id'] = $accountClosingBalance['AccountsAccount']['id']; 
				if($otherLedgerEntry['AccountsLedger']['credit'] > 0) {
					$saveClosingBalance['AccountsAccount']['closing_balance'] = $accountClosingBalance['AccountsAccount']['closing_balance'] - $otherLedgerEntry['AccountsLedger']['credit'];
				} else {
					$saveClosingBalance['AccountsAccount']['closing_balance'] = $accountClosingBalance['AccountsAccount']['closing_balance'] + $otherLedgerEntry['AccountsLedger']['debit'];
				}
				if($this->AccountsAccount->save($saveClosingBalance)){
					$this->AccountsLedger->delete($otherLedgerEntry['AccountsLedger']['id']);
				}
				
				/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveClosingBalance['AccountsAccount']['id'],$otherLedgerEntry['AccountsLedger']['credit'],$otherLedgerEntry['AccountsLedger']['debit'],$accountClosingBalance['AccountsAccount']['closing_balance'],$saveClosingBalance['AccountsAccount']['closing_balance'],$otherLedgerEntry['AccountsLedger']['id'],0,0,'Delete Ledger','Delete Ledger from ledger interface'));
				/**Log Code**/
			}
			$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been deleted successfully!</div>'));
			$this->redirect(array('action'=>'ledger_home/0/0/0/'.$id));
		}
		//$this->redirect(array('action'=>'ledger_home/0/0/0/'.$id));
	}
	
	function edit_ledger($id=null,$ledger_id=null,$page=null,$limit=null,$count=null) {
		//Configure::write('debug',2);
		$this->loadModel('AccountsBill');
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('Currency');
		if(!$page) $page= 0;
		if(!$limit) $limit= 0;
		if(!$count) $count = 0;
		if(!empty($this->data['Ledger'])) {
			foreach($this->data['Ledger1'] as $ledgerId => $details) {
				if($details['CheckedId'] == 1) {
					$details['credit_edit'] = str_replace(',', '',$details['credit_edit']);
					$details['debit_edit'] =  str_replace(',', '',$details['debit_edit']);
					if(($details['credit_edit'] > 0) && ($details['debit_edit'] > 0)) {
						$this->Session->setFlash(__('<div class="flashMessageError">Transaction Failed! Couldn\'t process Credit and Debit at the same time.'.$details['credit_edit'].'  '.$details['debit_edit'].'</div>'));
						$this->redirect(array('controller'=>'accounts_ledgers','action'=>'ledger_home',$page,$limit,$count,$id));
					} elseif($details['credit_edit'] == 0 && $details['debit_edit'] == 0) {
						$this->Session->setFlash(__('<div class="flashMessageError">Transaction Failed! Enter the valid amount!</div>'));
						$this->redirect(array('controller'=>'accounts_ledgers','action'=>'ledger_home',$page,$limit,$count,$id));
					} else {
						$ledgerRecord = $this->AccountsLedger->findById($ledgerId);
						if($ledgerRecord['AccountsLedger']['credit'] > 0 ) {
							$amountt = $ledgerRecord['AccountsLedger']['credit'];
						} else {
							$amountt = $ledgerRecord['AccountsLedger']['debit'];
						}
						//Entries associated with the bill.
						if(!empty($ledgerRecord['AccountsLedger']['accounts_bill_id'])) {
							
							if($ledgerRecord['AccountsLedger']['is_neutral'] == 'N') {
								$bill = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'])));
								$otherledgerEntries = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'],'AccountsLedger.id !='=>$ledgerRecord['AccountsLedger']['id'],'AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.debit'=>$amountt,'AccountsLedger.is_neutral'=>'N')));
								if(empty($otherledgerEntries))
									$otherledgerEntries = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'],'AccountsLedger.id !='=>$ledgerRecord['AccountsLedger']['id'],'AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.credit'=>$amountt,'AccountsLedger.is_neutral'=>'N')));
								$updateBillLedgerEntry1 = null;		$amount1 = null;		$account1 = null;		$updateClosingBalance1 = null;
								$updateBillLedgerEntry2 = null;		$amount2 = null;		$account2 = null;		$updateClosingBalance2 = null;
								$editedAmount = null;
								
								$account1 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$otherledgerEntries['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
								$account2 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$ledgerRecord['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
								
								if($details['credit_edit'] > 0) {
									$editedAmount = $details['credit_edit'];
								} else {
									$editedAmount = $details['debit_edit'];
								}
								
								if($ledgerRecord['AccountsLedger']['debit'] > 0) {
									$amount2 = $editedAmount - $ledgerRecord['AccountsLedger']['debit'];
									if($bill['AccountsBill']['amount'] < ($bill['AccountsBill']['billamount'] + $amount2)) {
										$this->Session->setFlash(__('<div class="flashMessageError">Bill amount is '.$bill['AccountsBill']['amount'].' cannot pay more than bill amount</div>'));
										continue;
									}
									
									if($amount2 > $account2['AccountsAccount']['closing_balance']) {
										$this->Session->setFlash(__('<div class="flashMessageError">Cannot edit ledger, there is no sufficient balance!</div>'));
										continue;
									}
									$updateBillLedgerEntry2['AccountsLedger']['debit'] = $editedAmount;
									$updateClosingBalance2['AccountsAccount']['closing_balance'] = $account2['AccountsAccount']['closing_balance'] - $amount2;
								} else {
									if($bill['AccountsBill']['amount'] < ($bill['AccountsBill']['billamount'] + $amount2)) {
										$this->Session->setFlash(__('<div class="flashMessageError">Bill amount is '.$bill['AccountsBill']['amount'].' cannot pay more than bill amount</div>'));
										continue;
									}
									$updateBillLedgerEntry2['AccountsLedger']['credit'] = $editedAmount;
									$amount2 = $editedAmount - $ledgerRecord['AccountsLedger']['credit'];
									$updateClosingBalance2['AccountsAccount']['closing_balance'] = $amount2 + $account2['AccountsAccount']['closing_balance'];
								}

								if($otherledgerEntries['AccountsLedger']['debit'] > 0) {
									$amount1 = $editedAmount - $otherledgerEntries['AccountsLedger']['debit'];
									if($amount1 > $account1['AccountsAccount']['closing_balance']) {
										$this->Session->setFlash(__('<div class="flashMessageError">Cannot edit ledger, '.$account1['AccountsAccount']['account_name'].' there no enough balance!</div>'));
										continue;
									}
									$updateBillLedgerEntry1['AccountsLedger']['debit'] = $editedAmount;
									$updateClosingBalance1['AccountsAccount']['closing_balance'] = $account1['AccountsAccount']['closing_balance'] - $amount1;
								} else {
									if($bill['AccountsBill']['amount'] < ($bill['AccountsBill']['billamount'] + $amount1)) {
										$this->Session->setFlash(__('<div class="flashMessageError">Bill amount is '.$bill['AccountsBill']['amount'].' cannot pay more than bill amount</div>'));
										continue;
									}
									$updateBillLedgerEntry1['AccountsLedger']['credit'] = $editedAmount;
									$amount1 = $editedAmount - $otherledgerEntries['AccountsLedger']['credit'];
									$updateClosingBalance1['AccountsAccount']['closing_balance'] = $amount1 + $account1['AccountsAccount']['closing_balance'];
								}
								
								
								
								
								
								
								$updateClosingBalance1['AccountsAccount']['id'] = $account1['AccountsAccount']['id'];
								
								$updateClosingBalance2['AccountsAccount']['id'] = $account2['AccountsAccount']['id'];
								
								$updateBillLedgerEntry1['AccountsLedger']['id'] = $otherledgerEntries['AccountsLedger']['id'];
								$updateBillLedgerEntry1['AccountsLedger']['date'] = date("Y-m-d", strtotime($details['ledger_date']));
								$updateBillLedgerEntry1['AccountsLedger']['cheque_no'] = $details['details'];
								
								$updateBillLedgerEntry2['AccountsLedger']['id'] = $ledgerRecord['AccountsLedger']['id'];
								$updateBillLedgerEntry2['AccountsLedger']['date'] = date("Y-m-d", strtotime($details['ledger_date']));
								$updateBillLedgerEntry2['AccountsLedger']['cheque_no'] = $details['details'];
								
								$this->AccountsAccount->save($updateClosingBalance1);
								$this->AccountsAccount->save($updateClosingBalance2);
								
								/**Log Code**/
								if(!empty($updateBillLedgerEntry1['AccountsLedger']['credit'])) {
									$ab1 = $updateBillLedgerEntry1['AccountsLedger']['credit'];
								} else {
									$ab1 = 0;
								}
								if(!empty($updateBillLedgerEntry1['AccountsLedger']['debit'])) {
									$ab2 = $updateBillLedgerEntry1['AccountsLedger']['debit'];
								} else {
									$ab2 = 0;
								}
								if(!empty($updateBillLedgerEntry2['AccountsLedger']['credit'])) {
									$ab3 = $updateBillLedgerEntry2['AccountsLedger']['credit'];
								} else {
									$ab3 = 0;
								}
								if(!empty($updateBillLedgerEntry2['AccountsLedger']['debit'])) {
									$ab4 = $updateBillLedgerEntry2['AccountsLedger']['debit'];
								} else {
									$ab4 = 0;
								}
								$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$updateClosingBalance1['AccountsAccount']['id'],$ab1,$ab2,$account1['AccountsAccount']['closing_balance'],$updateClosingBalance1['AccountsAccount']['closing_balance'],$updateBillLedgerEntry1['AccountsLedger']['id'],$bill['AccountsBill']['id'],0,'Edit Ledger transaction','Edited bill associated Ledger transfer'));
                                 
								/**Log Code**/
								
								/**Log Code**/
								$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$updateClosingBalance2['AccountsAccount']['id'],$ab3,$ab4,$account2['AccountsAccount']['closing_balance'],$updateClosingBalance2['AccountsAccount']['closing_balance'],$updateBillLedgerEntry2['AccountsLedger']['id'],$bill['AccountsBill']['id'],0,'Edit Ledger transaction','Edited bill associated Ledger transfer'));
								/**Log Code**/
								
								$this->AccountsLedger->save($updateBillLedgerEntry1);
								$this->AccountsLedger->save($updateBillLedgerEntry2);
								
								$accountsPayableAccountDetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
								$accountsPayableLedgerDetails  = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_bill_id'=>$ledgerRecord['AccountsLedger']['accounts_bill_id'],'AccountsLedger.date'=>$ledgerRecord['AccountsLedger']['date'],'AccountsLedger.debit'=>$amountt,'AccountsLedger.is_neutral'=>'Y')));
								$amountPayable = $editedAmount - $accountsPayableLedgerDetails['AccountsLedger']['debit'];
								
								$updatePayableLedgerEntry['AccountsLedger']['id'] = $accountsPayableLedgerDetails['AccountsLedger']['id'];
								$updatePayableLedgerEntry['AccountsLedger']['debit'] = $editedAmount;
								$updatePayableLedgerEntry['AccountsLedger']['date'] = date("Y-m-d", strtotime($details['ledger_date']));
								$updatePayableLedgerEntry['AccountsLedger']['cheque_no'] = $details['details'];
								
								if($accountsPayableLedgerDetails['AccountsLedger']['debit'] > 0) {
									$updateAccountsPayableClosingBalance['AccountsAccount']['closing_balance'] = $accountsPayableAccountDetails['AccountsAccount']['closing_balance'] - $amountPayable;
								} else {
									$updateAccountsPayableClosingBalance['AccountsAccount']['closing_balance'] = $amountPayable + $accountsPayableAccountDetails['AccountsAccount']['closing_balance'];
								}
								$updateAccountsPayableClosingBalance['AccountsAccount']['id'] = $accountsPayableAccountDetails['AccountsAccount']['id'];
								$this->AccountsLedger->save($updatePayableLedgerEntry);
								$this->AccountsAccount->save($updateAccountsPayableClosingBalance);
								
								/**Log Code**/
								$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$updateAccountsPayableClosingBalance['AccountsAccount']['id'],0,$updatePayableLedgerEntry['AccountsLedger']['debit'],$accountsPayableAccountDetails['AccountsAccount']['closing_balance'],$updateAccountsPayableClosingBalance['AccountsAccount']['closing_balance'],$updatePayableLedgerEntry['AccountsLedger']['id'],$bill['AccountsBill']['id'],0,'Edit Ledger transaction','Edited bill associated Ledger transfer - Payable'));
								/**Log Code**/
								
								$billUpdate = null;
								$billUpdate['AccountsBill']['id'] = $bill['AccountsBill']['id'];
								$billUpdate['AccountsBill']['billamount'] = $bill['AccountsBill']['billamount'] + $amount1;
								if(($bill['AccountsBill']['billamount'] + $amount1) >= $bill['AccountsBill']['amount']) {
									$billUpdate['AccountsBill']['paid_status'] = 'Y';
								} else {
									$billUpdate['AccountsBill']['paid_status'] = 'N';
								}
								$this->AccountsBill->save($billUpdate);
								$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been edited successfully!</div>'));
							}
						//Invoice related Entries
						} elseif(!empty($ledgerRecord['AccountsLedger']['accounts_clientinvoice_id'])) {
							
							$invoice = $this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$ledgerRecord['AccountsLedger']['accounts_clientinvoice_id']),'fields'=>array('AccountsClientinvoice.id','AccountsClientinvoice.paid','AccountsClientinvoice.invoice_amount','AccountsClientinvoice.currency_id','AccountsClientinvoice.amount_recieved')));
							$paymentDetails = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$invoice['AccountsClientinvoice']['id'],'AccountsClientpaymentdetail.accounts_ledger_id'=>$ledgerRecord['AccountsLedger']['id'])));
							if(empty($paymentDetails)) 
								$paymentDetails = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$invoice['AccountsClientinvoice']['id'],'AccountsClientpaymentdetail.accounts_ledger_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));

							$otherledgerEntries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_clientinvoice_id'=>$ledgerRecord['AccountsLedger']['accounts_clientinvoice_id'],'AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));
							if(!empty($paymentDetails)) {
								foreach($otherledgerEntries as $otherledgerEntry) {
									$updateLedgerEntries = null; $saveAccountsAccount = null;$invoiceAmountPay = null;
									$amount = null;			$editedAmount = null; 
									if($details['credit_edit'] > 0) {
										$editedAmount = $details['credit_edit'];
									} else {
										$editedAmount = $details['debit_edit'];
									}
									$account = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$otherledgerEntry['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
									$saveAccountsAccount['AccountsAccount']['id'] = $account['AccountsAccount']['id'];
									if($otherledgerEntry['AccountsLedger']['credit'] > 0) {
										$amount = $editedAmount - $otherledgerEntry['AccountsLedger']['credit'];
										$saveAccountsAccount['AccountsAccount']['closing_balance'] = $amount + $account['AccountsAccount']['closing_balance'];
										$updateLedgerEntries['AccountsLedger']['credit'] = $editedAmount;
									} else {
										$amount = $editedAmount - $otherledgerEntry['AccountsLedger']['debit'];
										$saveAccountsAccount['AccountsAccount']['closing_balance'] = $account['AccountsAccount']['closing_balance'] - $amount;
										$updateLedgerEntries['AccountsLedger']['debit'] = $editedAmount;
									}
									$updateLedgerEntries['AccountsLedger']['id'] = $otherledgerEntry['AccountsLedger']['id'];
									$updateLedgerEntries['AccountsLedger']['date'] = date("Y-m-d", strtotime($details['ledger_date']));
									$updateLedgerEntries['AccountsLedger']['cheque_no'] = $details['details'];
									if($this->AccountsAccount->save($saveAccountsAccount)) {
										if($this->AccountsLedger->save($updateLedgerEntries)) {
											$billingcurrency = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$invoice['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.id','Currency.name')));
											$from = 'INR';
											$to = $billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) {
												$result = fgets($handle, 4096);
												fclose($handle);
											}
											$allData = explode(',',$result);  //Get all the contents to an array 
											$invoiceAmountPay=$editedAmount*$allData['1'];
											
											$amount = $invoiceAmountPay - $paymentDetails['AccountsClientpaymentdetail']['paid_amount'];
											$updateInvoiceDetail['AccountsClientinvoice']['id'] = $invoice['AccountsClientinvoice']['id'];
											$updateInvoiceDetail['AccountsClientinvoice']['amount_recieved'] = $invoice['AccountsClientinvoice']['amount_recieved'] + $amount;
											if(($invoice['AccountsClientinvoice']['amount_recieved'] + $amount) >= $invoice['AccountsClientinvoice']['invoice_amount']) {
												$updateInvoiceDetail['AccountsClientinvoice']['paid'] = 'Y';
												$updateInvoiceDetail['AccountsClientinvoice']['status'] = 'closed';
											}
											$updatePaymentDetail['AccountsClientpaymentdetail']['id'] = $paymentDetails['AccountsClientpaymentdetail']['id'];
											$updatePaymentDetail['AccountsClientpaymentdetail']['paid_amount'] = $invoiceAmountPay;
											
											if($this->AccountsClientpaymentdetail->save($updatePaymentDetail)) {
												$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been edited successfully!</div>'));
											}
											$this->AccountsClientinvoice->save($updateInvoiceDetail);
											$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been edited successfully!</div>'));
										}
									}
									
									/**Log Code**/
									$bc1 = 0; $bc2 = 0;
									if(!empty($updateLedgerEntries['AccountsLedger']['credit'])) {
										$bc1 = $updateLedgerEntries['AccountsLedger']['credit'];
									}
									if(!empty($updateLedgerEntries['AccountsLedger']['debit'])) {
										$bc2 = $updateLedgerEntries['AccountsLedger']['debit'];
									}
									$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveAccountsAccount['AccountsAccount']['id'],$bc1,$bc2,$account['AccountsAccount']['closing_balance'],$saveAccountsAccount['AccountsAccount']['closing_balance'],$updateLedgerEntries['AccountsLedger']['id'],0,$ledgerRecord['AccountsLedger']['accounts_clientinvoice_id'],'Edit Ledger transaction','Edited invoice associated Ledger transfer'));
									/**Log Code**/
									
												
									
								}
							} else {
								foreach($otherledgerEntries as $otherledgerEntry) {
									$updateLedgerEntries = null; $saveAccountsAccount = null;
									if($details['credit_edit'] > 0) {
										$editedAmount = $details['credit_edit'];
									} else {
										$editedAmount = $details['debit_edit'];
									}
									$account = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$otherledgerEntry['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
									$saveAccountsAccount['AccountsAccount']['id'] = $account['AccountsAccount']['id'];
									if($otherledgerEntry['AccountsLedger']['credit'] > 0) {
										$amount = $editedAmount - $otherledgerEntry['AccountsLedger']['credit'];
										$saveAccountsAccount['AccountsAccount']['closing_balance'] = $amount + $account['AccountsAccount']['closing_balance'];
										$updateLedgerEntries['AccountsLedger']['credit'] = $editedAmount;
									} else {
										$amount = $editedAmount - $otherledgerEntry['AccountsLedger']['debit'];
										$saveAccountsAccount['AccountsAccount']['closing_balance'] = $account['AccountsAccount']['closing_balance'] - $amount;
										$updateLedgerEntries['AccountsLedger']['debit'] = $editedAmount;
									}
									$updateLedgerEntries['AccountsLedger']['id'] = $otherledgerEntry['AccountsLedger']['id'];
									$updateLedgerEntries['AccountsLedger']['date'] = date("Y-m-d", strtotime($details['ledger_date']));
									$updateLedgerEntries['AccountsLedger']['cheque_no'] = $details['details'];
									if($this->AccountsAccount->save($saveAccountsAccount)) {
										if($this->AccountsLedger->save($updateLedgerEntries)) {
											$billingcurrency = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$invoice['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.id','Currency.name')));
											$from = 'INR';
											$to = $billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) {
												$result = fgets($handle, 4096);
												fclose($handle);
											}
											$allData = explode(',',$result);  //Get all the contents to an array 
											$invoiceAmountPay=$editedAmount*$allData['1'];
											
											$amount = $invoiceAmountPay - $invoice['AccountsClientinvoice']['invoice_amount'];
											$updateInvoiceDetail['AccountsClientinvoice']['id'] = $invoice['AccountsClientinvoice']['id'];
											$updateInvoiceDetail['AccountsClientinvoice']['invoice_amount'] = $invoice['AccountsClientinvoice']['invoice_amount'] + $amount;
											if(($invoice['AccountsClientinvoice']['invoice_amount'] + $amount) >= $invoice['AccountsClientinvoice']['invoice_amount']) {
												$updateInvoiceDetail['AccountsClientinvoice']['paid'] = 'Y';
												$updateInvoiceDetail['AccountsClientinvoice']['status'] = 'closed';
											}
											$this->AccountsClientinvoice->save($updateInvoiceDetail);
											$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been edited successfully!</div>'));
										}
									}

									/**Log Code**/
									$cd1 = 0;$cd2 = 0;
									if(!empty($updateLedgerEntries['AccountsLedger']['credit'])) {
										$cd1 = $updateLedgerEntries['AccountsLedger']['credit'];
									}
									if(!empty($updateLedgerEntries['AccountsLedger']['debit'])) {
										$cd2 = $updateLedgerEntries['AccountsLedger']['debit'];
									}
									$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveAccountsAccount['AccountsAccount']['id'],$cd1,$cd2,$account['AccountsAccount']['closing_balance'],$saveAccountsAccount['AccountsAccount']['closing_balance'],$updateLedgerEntries['AccountsLedger']['id'],0,$ledgerRecord['AccountsLedger']['accounts_clientinvoice_id'],'Edit Ledger transaction','Edited invoice associated Ledger transfer'));
									/**Log Code**/
	
								}
							}
						//Entries happened in ledger interface Edit code goes here...!
						} else {
							$otherledgerEntries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.transaction_id'=>$ledgerRecord['AccountsLedger']['transaction_id'])));
							foreach($otherledgerEntries as $otherledgerEntry) {
								$updateLedgerEntries = null;		$account = null;			
								$saveAccountsAccount = null;		$editedAmount = null;		
								$account = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$otherledgerEntry['AccountsLedger']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
								$saveAccountsAccount['AccountsAccount']['id'] = $account['AccountsAccount']['id'];
								if($details['credit_edit'] > 0) {
									$editedAmount = $details['credit_edit'];
								} else {
									$editedAmount = $details['debit_edit'];
								}
								if($otherledgerEntry['AccountsLedger']['credit'] > 0) {
									$amount = $editedAmount - $otherledgerEntry['AccountsLedger']['credit'];
									$saveAccountsAccount['AccountsAccount']['closing_balance'] = $amount + $account['AccountsAccount']['closing_balance'];
									$updateLedgerEntries['AccountsLedger']['credit'] = $editedAmount;
								} else {
									if($amount > $account['AccountsAccount']['closing_balance']) {
										$this->Session->setFlash(__('<div class="flashMessageError">Cannot edit ledger, there no enough balance!</div>'));
										continue;
									}
									$amount = $editedAmount - $otherledgerEntry['AccountsLedger']['debit'];
									$saveAccountsAccount['AccountsAccount']['closing_balance'] = $account['AccountsAccount']['closing_balance'] - $amount;
									$updateLedgerEntries['AccountsLedger']['debit'] = $editedAmount;
								}
								$updateLedgerEntries['AccountsLedger']['id'] = $otherledgerEntry['AccountsLedger']['id'];
								$updateLedgerEntries['AccountsLedger']['date'] = date("Y-m-d", strtotime($details['ledger_date']));
								$updateLedgerEntries['AccountsLedger']['cheque_no'] = $details['details'];
								if($this->AccountsAccount->save($saveAccountsAccount)) {
									if($this->AccountsLedger->save($updateLedgerEntries)) {
										$this->Session->setFlash(__('<div class="flashMessageSuccess">Ledgers has been edited successfully!</div>'));
									}
								}
								
								/**Log Code**/
								$de1=0;$de2=0;
								if(!empty($updateLedgerEntries['AccountsLedger']['credit'])) {
									$de1 = $updateLedgerEntries['AccountsLedger']['credit'];
								}
								if(!empty($updateLedgerEntries['AccountsLedger']['debit'])) {
									$de2 = $updateLedgerEntries['AccountsLedger']['debit'];
								}
								$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$saveAccountsAccount['AccountsAccount']['id'],$de1,$de2,$account['AccountsAccount']['closing_balance'],$saveAccountsAccount['AccountsAccount']['closing_balance'],$updateLedgerEntries['AccountsLedger']['id'],0,0,'Edit Ledger transaction','Edited Ledger transfer'));
								/**Log Code**/
							}
						}
					}
				}
			}
			$this->redirect(array('controller'=>'accounts_ledgers','action'=>'ledger_home',$page,$limit,$count,$id));
		}
	}
	
	
	
}
