<?php
App::uses('AppController', 'Controller');
/**
 * Currencies Controller
 *
 * @property Currency $Currency
 */
class CurrenciesController extends AppController {
	
	public function beforeFilter(){
	//	Configure::write('debug',2);
		$this->loadModel('Aco');
		$this->loadModel('ArosAco');
		parent::beforeFilter();
	
		$module_name = 'Currency Settings';
       
				
		$aco = $this->Aco->find('first',array('conditions'=>array('Aco.alias'=>$module_name)));
		$aros_acosDetails = $this->ArosAco->find('first',array('conditions'=>array('ArosAco.aro_id'=>$this->Session->read('Auth1.User.Aro_id'),'ArosAco.aco_id'=>$aco['Aco']['id'])));
		$this->Session->write('Auth1.User.Permission',$aros_acosDetails);
		
		if($aros_acosDetails['ArosAco']['_create'] == 1){
	    	$proceed=1;
	    }
	    if($aros_acosDetails['ArosAco']['_read'] == 1){
	    	$proceed=1;
	    }
	    if($aros_acosDetails['ArosAco']['_update'] == 1){
	    	$proceed=1;
	    }
	    if($aros_acosDetails['ArosAco']['_delete'] == 1){
	    	$proceed=1;
	    }	    
	    
	    if(!$proceed){
	    	$this->redirect(array('controller'=>'users','action' => 'noaccess'));
	    }
	}

/**
 * index method
 *
 * @return void
 */
	public function index($flash = null, $conditionFlag = null) 
	{
		//Configure :: write('debug', 2);
		$this->Currency->recursive = 0;
		$this->loadModel('CurrencyConversionrate');
		
		$this->set('currencies', $this->paginate());
		$def_yes2 = $this->Currency->find('all',array('conditions'=>array('Currency.default_currency' => 'Y')));
		$symbol = $def_yes2[0]['Currency']['symbol'];
		$final = $this->paginate();
		debug($final);
		foreach($final as $key => $value)
		{
			$conversion  = $this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1' => $value['Currency']['id'])));
			debug($conversion);
			if($conversion)
			$final_conversion[$value['Currency']['id']] = $conversion['CurrencyConversionrate']['conversion_rate'];/*'1 '.$value['Currency']['name'].' = '.$conversion['CurrencyConversionrate']['conversion_rate'].$def_yes2[0]['Currency']['symbol'];*/
			/*$final_conversion[$value['Currency']['id']]['name'] = $value['Currency']['name'];
			$final_conversion[$value['Currency']['id']]['symbol'] = $value['Currency']['symbol'];*/
			
		}
		
		debug($final_conversion);
		if($def_yes2)$def_yes = 1;
		
		$default_curr = $def_yes2[0]['Currency']['name'];
		$def_bill_yes2 = $this->Currency->find('all',array('conditions'=>array('Currency.default_billing_currency' => 'Y')));
		if($def_bill_yes2)$def_bill_yes = 1;
		$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
		$this->set(compact('flash','def_yes','def_bill_yes','default_curr','final_conversion','symbol','conditionFlag','currency'));
		
		
		
		
		
		
		
		
	}
	
	
	
	/*public function conversion($to = null, $id = null, $type2 = null)
	{
		Configure :: write('debug', 2);
		$this->loadModel('CurrencyConversionrate');
		$from_details = $this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		$type = $this->data['Conversion']['type'];
		$to_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$to_id)));
	}*/
	
	
	
	public function alertbill()
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		$bill_currencies = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['Currency']['billing'])));
		debug($bill_currencies);
		foreach($bill_currencies as $k1 => $v1)
		{
			if($v1['billing_currency'] == 'Y')
			{
				debug();	
				$validate = 1;
				
				
			}
			
		}
		$name = $bill_currencies['Currency']['name'];
		$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
		$this->set(compact('currency','validate','name'));
		
	}
	
	
	
	
	public function unset_billcurrency($id = null)
	{
		$save->data = null;
		$this->Currency->create();
		$save->data['Currency']['id'] = $id;
		$save->data['Currency']['billing_currency'] = 'N';
		$this->Currency->save($save->data);
		$this->Session->setFlash(__('<div class = "flashMessageSuccess">The Billing Currency has been unset</div>'));
		$this->redirect(array('action' => 'index',1));
	}
	
	public function conversion1($to = null,$id = null, $type2 = null) 
	{
	//	Configure :: write('debug', 2);
		debug($type2);
		debug($this->data);
		$this->loadModel('CurrencyConversionrate');
		$defaultCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		
		$type = $this->data['Conversion']['type'];
		$fixed_details = $this->CurrencyConversionrate->find('first',array('conditions'=>array('AND'=>array('CurrencyConversionrate.currency_id1'=>$defaultCurrency2['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$id))));
		debug($fixed_details);
		if(!$fixed_details) $no_data = 1;	
		//Spot Converion Code starts
		if($this->data['Conversion']['type'] == "Spot")
		{
			$symbol_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$id)));
			$symbol = $symbol_details['Currency']['symbol'];
			$from = $defaultCurrency2['Currency']['name'];
			debug($from);
			debug($to);
			$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
			$handle = @fopen($url, 'r');
 			debug($handle);
			if ($handle) 
			{
    			$result = fgets($handle, 4096);
    			fclose($handle);
			}
			debug($result);
			$allData = explode(',',$result); /* Get all the contents to an array */
			debug($allData);
			$value = $allData[1];
 			debug($value);
			
		}
		//Spot Converion Code ends
		
		//Fixed Converion Code starts
		
		if($this->data['Conversion']['type'] == "Fixed")
		{
			$symbol_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$id)));
			$symbol = $symbol_details['Currency']['symbol'];
			$fixed_details = $this->CurrencyConversionrate->find('first',array('conditions'=>array('AND'=>array('CurrencyConversionrate.currency_id1'=>$defaultCurrency2['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$id))));
			debug($fixed_details);
			$rate = $fixed_details['CurrencyConversionrate']['conversion_rate'];
			
			
		}
		
		
		//Entering data for conversion and storing
		if($this->data['CurrencyConversionrate']['rate'])
		{
			debug($no_data);
			if(!$no_data) // For resaving the data
			{
				
				$save->data = null;
				$this->CurrencyConversionrate->create();
				$save->data['CurrencyConversionrate']['id']= $fixed_details['CurrencyConversionrate']['id'];
				$save->data['CurrencyConversionrate']['currency_id1']=$fixed_details['CurrencyConversionrate']['currency_id1'];
				$save->data['CurrencyConversionrate']['currency_id2'] = $id;
				$save->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save->data['CurrencyConversionrate']['conversion_rate'] = $this->data['CurrencyConversionrate']['rate'];
				$save->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save->data);
				
				debug($save->data);
				
			}
			
			if($no_data)// For saving the data for first time
			{
				$save2->data = null;
				$this->CurrencyConversionrate->create();
				$save2->data['CurrencyConversionrate']['currency_id1']=$defaultCurrency2['Currency']['id'];
				$save2->data['CurrencyConversionrate']['currency_id2'] = $id;
				$save2->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save2->data['CurrencyConversionrate']['conversion_rate'] = $this->data['CurrencyConversionrate']['rate'];
				$save2->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save2->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save2->data);
				
			}
			$type = $type2;
			
		}
		
		$this->set(compact('type','value','rate','id','type2','alert','symbol'));
		
	}
	
	public function conversion2($id = null, $type2= null) 
	{
		//Configure :: write('debug', 2);
		debug($this->data);
		$this->loadModel('CurrencyConversionrate');
		
		$defaultCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$symbol = $defaultCurrency2['Currency']['symbol'];
	
		$fixed_details = $this->CurrencyConversionrate->find('first',array('conditions'=>array('AND'=>array('CurrencyConversionrate.currency_id1'=>$id,'CurrencyConversionrate.currency_id2'=>$defaultCurrency2['Currency']['id']))));
		debug($fixed_details);
		if(!$fixed_details) $no_data = 1;	
		//Entering data for conversion and storing
		$rate = $this->data['Conversion']['rate'];
		if($this->data['Conversion']['rate'])
		{
			debug($no_data);
			if(!$no_data) // For resaving the data
			{
				$defaultbillCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		
				$save->data = null;
				$this->CurrencyConversionrate->create();
				$save->data['CurrencyConversionrate']['id']= $fixed_details['CurrencyConversionrate']['id'];
				$save->data['CurrencyConversionrate']['currency_id1']=$id;
				$save->data['CurrencyConversionrate']['currency_id2'] = $defaultbillCurrency2['Currency']['id'];
				$save->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save->data['CurrencyConversionrate']['conversion_rate'] = $this->data['Conversion']['rate'];
				$save->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save->data);
				
				debug($save->data);
				
			}
			
			if($no_data)// For saving the data for first time
			{
				$defaultbillCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
				debug($defaultbillCurrency2);
				$save2->data = null;
				$this->CurrencyConversionrate->create();
				$save2->data['CurrencyConversionrate']['currency_id1']=$id;
				$save2->data['CurrencyConversionrate']['currency_id2'] = $defaultbillCurrency2['Currency']['id'];
				$save2->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save2->data['CurrencyConversionrate']['conversion_rate'] = $this->data['Conversion']['rate'];
				$save2->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save2->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save2->data);
				
			}
			$type = $type2;
			
			
		}
		$this->set(compact('type','value','rate','id','type2','alert','symbol'));
	}
	
	
	public function conversion($from = null,$id = null, $type2= null) 
	{
		//Configure :: write('debug', 2);
		debug($this->data);
		$this->loadModel('CurrencyConversionrate');
		$defaultCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$symbol = $defaultCurrency2['Currency']['symbol'];
		$type = $this->data['Conversion']['type'];
		$fixed_details = $this->CurrencyConversionrate->find('first',array('conditions'=>array('AND'=>array('CurrencyConversionrate.currency_id1'=>$id,'CurrencyConversionrate.currency_id2'=>$defaultCurrency2['Currency']['id']))));
		debug($fixed_details);
		if(!$fixed_details) $no_data = 1;	
		
		//Spot Converion Code starts
		if($this->data['Conversion']['type'] == "Spot")
		{
			$to = $defaultCurrency2['Currency']['name'];
			debug($from);
			debug($to);
			
			$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
			$handle = @fopen($url, 'r');
 			debug($handle);
			if ($handle) 
			{
    			$result = fgets($handle, 4096);
    			fclose($handle);
			}
			debug($result);
			$allData = explode(',',$result);  //Get all the contents to an array 
			debug($allData);
			$value =  '1 '.$from.' = '.$defaultCurrency2['Currency']['symbol'].$allData[1];
 			debug($value);
			
		}
		//Spot Converion Code ends
		
		//Fixed Converion Code starts
		
		if($this->data['Conversion']['type'] == "Fixed")
		{
			$fixed_details = $this->CurrencyConversionrate->find('first',array('conditions'=>array('AND'=>array('CurrencyConversionrate.currency_id1'=>$id,'CurrencyConversionrate.currency_id2'=>$defaultCurrency2['Currency']['id']))));
			debug($fixed_details);
			
			$rate = $fixed_details['CurrencyConversionrate']['conversion_rate'];
			
			
		}
		
		//Entering data for conversion and storing
		if($this->data['Conversion']['rate'])
		{
			debug($no_data);
			if(!$no_data) // For resaving the data
			{
				$defaultbillCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		
				$save->data = null;
				$this->CurrencyConversionrate->create();
				$save->data['CurrencyConversionrate']['id']= $fixed_details['CurrencyConversionrate']['id'];
				$save->data['CurrencyConversionrate']['currency_id1']=$id;
				$save->data['CurrencyConversionrate']['currency_id2'] = $defaultbillCurrency2['Currency']['id'];
				$save->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save->data['CurrencyConversionrate']['conversion_rate'] = $this->data['Conversion']['rate'];
				$save->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save->data);
				
				debug($save->data);
				
			}
			
			if($no_data)// For saving the data for first time
			{
				$defaultbillCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
				debug($defaultbillCurrency2);
				$save2->data = null;
				$this->CurrencyConversionrate->create();
				$save2->data['CurrencyConversionrate']['currency_id1']=$id;
				$save2->data['CurrencyConversionrate']['currency_id2'] = $defaultbillCurrency2['Currency']['id'];
				$save2->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save2->data['CurrencyConversionrate']['conversion_rate'] = $this->data['Conversion']['rate'];
				$save2->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save2->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save2->data);
				
			}
			$type = $type2;
			
		}
		
		$this->set(compact('type','value','rate','id','type2','alert','symbol'));
	}
	
	
	
	
	
	
	
	
	
	

	/*public function conversion($from = null,$id = null, $type2 = null) 
	{
		Configure :: write('debug', 2);
		debug($this->data);
		
		
		
		
		
	//	Configure :: write('debug', 2);
		debug($type2);
		debug($this->data);
		$this->loadModel('CurrencyConversionrate');
		$defaultCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$symbol = $defaultCurrency2['Currency']['symbol'];
	//	$this->data['Conversion']['type'] = $type2;
		//$type = $this->data['Conversion']['type'];
		$fixed_details = $this->CurrencyConversionrate->find('first',array('conditions'=>array('AND'=>array('CurrencyConversionrate.currency_id1'=>$id,'CurrencyConversionrate.currency_id2'=>$defaultCurrency2['Currency']['id']))));
		debug($fixed_details);
		if(!$fixed_details) $no_data = 1;	
		//Spot Converion Code starts
		if($this->data['Conversion']['type'] == "Spot")
		{
			$to = $defaultCurrency2['Currency']['name'];
			debug($from);
			debug($to);
			
			$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
			$handle = @fopen($url, 'r');
 			debug($handle);
			if ($handle) 
			{
    			$result = fgets($handle, 4096);
    			fclose($handle);
			}
			debug($result);
			$allData = explode(',',$result);  //Get all the contents to an array 
			debug($allData);
			$value =  '1 '.$from.' = '.$defaultCurrency2['Currency']['symbol'].$allData[1];
 			debug($value);
			
		}
		//Spot Converion Code ends
		
		//Fixed Converion Code starts
		
		if($this->data['Conversion']['type'] == "Fixed")
		{
			$fixed_details = $this->CurrencyConversionrate->find('first',array('conditions'=>array('AND'=>array('CurrencyConversionrate.currency_id1'=>$id,'CurrencyConversionrate.currency_id2'=>$defaultCurrency2['Currency']['id']))));
			debug($fixed_details);
			
			$rate = $fixed_details['CurrencyConversionrate']['conversion_rate'];
			
			
		}
		
		
		//Entering data for conversion and storing
		if($this->data['Conversion']['rate'])
		{
			debug($no_data);
			if(!$no_data) // For resaving the data
			{
				$defaultbillCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		
				$save->data = null;
				$this->CurrencyConversionrate->create();
				$save->data['CurrencyConversionrate']['id']= $fixed_details['CurrencyConversionrate']['id'];
				$save->data['CurrencyConversionrate']['currency_id1']=$id;
				$save->data['CurrencyConversionrate']['currency_id2'] = $defaultbillCurrency2['Currency']['id'];
				$save->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save->data['CurrencyConversionrate']['conversion_rate'] = $this->data['Conversion']['rate'];
				$save->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save->data);
				
				debug($save->data);
				
			}
			
			if($no_data)// For saving the data for first time
			{
				$defaultbillCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
				debug($defaultbillCurrency2);
				$save2->data = null;
				$this->CurrencyConversionrate->create();
				$save2->data['CurrencyConversionrate']['currency_id1']=$id;
				$save2->data['CurrencyConversionrate']['currency_id2'] = $defaultbillCurrency2['Currency']['id'];
				$save2->data['CurrencyConversionrate']['conversion_type'] = $type2;
				$save2->data['CurrencyConversionrate']['conversion_rate'] = $this->data['Conversion']['rate'];
				$save2->data['CurrencyConversionrate']['updated_on'] = date('Y-m-d');
				$save2->data['CurrencyConversionrate']['current'] = 'Y';
				$alert = 1;
				$this->CurrencyConversionrate->save($save2->data);
				
			}
			$type = $type2;
			
		}
		
		$this->set(compact('type','value','rate','id','type2','alert','symbol'));
		
	}*/


	public function rate_check($id = null,$type = null)
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		if(!is_numeric($this->data['Conversion']['rate']))
		$validate = 1;
		$defaultCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$symbol = $defaultCurrency2['Currency']['symbol'];
		$this->set(compact('id','type','validate','symbol'));
	}
	
	public function rate_check2($id = null,$type = null)
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		if(!is_numeric($this->data['Conversion']['rate']))
		$validate = 1;
		$defaultCurrency2 = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$symbol = $defaultCurrency2['Currency']['symbol'];
		$this->set(compact('id','type','validate','symbol'));
	}
	
/**
 * view method
 *
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		$this->Currency->id = $id;
		if (!$this->Currency->exists()) {
			throw new NotFoundException(__('Invalid currency'));
		}
		$this->set('currency', $this->Currency->read(null, $id));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() 
	{
		
		
	//Configure :: write('debug', 2);
		debug($this->data);
		
		if($this->data)
		{
			if($this->data['Currency']['name'])
			{
				if($this->request->is('post'))
				{
					$save->data= null;
					$this->Currency->create();
					$save->data['Currency']['name'] = $this->data['Currency']['name'];
					$save->data['Currency']['symbol'] = $this->data['Currency']['symbol'];
					$save->data['Currency']['billing_currency'] = 'N';
					$save->data['Currency']['default_currency'] = 'N';
					$save->data['Currency']['default_billing_currency'] = 'N';
					debug($save->data);
					$this->Currency->save($save->data);
					$this->Session->setFlash(__('<div class = "flashMessageSuccess">The Currency has been saved</div>'));
					$this->redirect(array('action' => 'index',1));
				}
				
			}
			
			else
			{
				if(!$this->data['Currency']['name'])
				{	
					$this->Session->setFlash(__('<div class="flashMessageError">Please select the name of currency</div>'));
					$this->redirect(array('action' => 'index',0,1));
				}
			}
			
		}
		
	}
	
	public function name_curr()
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		
		$name = $this->data['Currency']['name'];
		if($name == 'USD')
		$symbol = '$';
		
		if($name == 'INR')
		$symbol = '₹';
		
		if($name == 'EUR')
		$symbol = '€';
		
		$this->set(compact('symbol'));
	}
	
	public function set_currency()
	{
		//Configure :: write('debug', 2);
		debug($this->data);
		if($this->data)
		{
			if($this->data['Currency']['billing'])
			{
				if($this->request->is('post'))
				{
					//save
					//For bill
					$bill->data = null;
					$this->Currency->create();
					$bill->data['Currency']['id'] = $this->data['Currency']['billing'];
					$bill->data['Currency']['billing_currency'] = 'Y';
					$this->Currency->save($bill->data);
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Currency set</div>'));
					$this->redirect(array('action' => 'index',1));
				}
			}
			
			else
			{
				//list + error
				if(!$this->data['Currency']['billing'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any one currency for billing currency</div>'));
					$this->redirect(array('action' => 'index',0,3));
				}
				$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
			
			
			}
		}
		
		else
		{
			//list
			$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
			
		}
		$this->set(compact('currency'));
	}
	
	
	
	public function set_currencyfirst()
	{
		debug($this->data);
		if($this->data)
		{
			if(($this->data['Currency']['default'] && $this->data['Currency']['billing'] ) && ($this->data['Currency']['default_billing'])) 
			{
				if($this->request->is('post'))
				{
					//save
					//For default
					$def->data = null;
					$this->Currency->create();
					$def->data['Currency']['id'] = $this->data['Currency']['default'];
					$def->data['Currency']['default_currency'] = 'Y';
					$this->Currency->save($def->data);
					
					//For bill
					$bill->data = null;
					$this->Currency->create();
					$bill->data['Currency']['id'] = $this->data['Currency']['billing'];
					$bill->data['Currency']['billing_currency'] = 'Y';
					$this->Currency->save($bill->data);
					
					//For default bill
					$def_bill->data = null;
					$this->Currency->create();
					$def_bill->data['Currency']['id'] = $this->data['Currency']['default_billing'];
					$def_bill->data['Currency']['default_billing_currency'] = 'Y';
					$this->Currency->save($def_bill->data);
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Currency set</div>'));
					$this->redirect(array('action' => 'index',1));
					
				}
			}
			
			else
			{
				//list + error
				if(!$this->data['Currency']['default'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any one currency for default currency</div>'));
					$this->redirect(array('action' => 'index',0,2));
				}
				
				if(!$this->data['Currency']['billing'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any one currency for billing currency</div>'));
					$this->redirect(array('action' => 'index',0,2));
				}
				if(!$this->data['Currency']['default_billing'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any one currency for default billing</div>'));
					$this->redirect(array('action' => 'index',0,2));
				}
				
				$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
			
			}
		}
		
		else
		{
			$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
			
		}
		
		$this->set(compact('currency'));
		
	}
	
	
	public function alert()
	{
		$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
		$this->set(compact('currency'));	
	}
	
	public function alertdef()
	{
		$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
		$this->set(compact('currency'));	
	}
	
	public function def_div()
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		$curr_details = $this->Currency->find('all');
		debug($curr_details);
		
		if($this->data['Currency']['default']) $def = 1;
		if($this->data['Currency']['billing']) $bill =1;
		$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'order' => 'Currency.name ASC'));
		foreach($curr_details as $key => $value)
		{
			if($this->data['Currency']['default'])// for checkin default
			{
				if($value['Currency']['default_currency'] == 'Y') 
				{
					if($value['Currency']['id'] != $this->data['Currency']['default'])
					{
						debug("TEST");
						$validate_def = 1;
					}
					
					
				}
			
			}
			
			if($this->data['Currency']['billing'])// for checkin billing
			{
				if($value['Currency']['billing_currency'] == 'Y') 
				{
					if($value['Currency']['id'] != $this->data['Currency']['billing'])
					{
						debug("TEST");
						$validate_bill = 1;
					}
					
					
				}
			
			}
			if($value['Currency']['default_currency'] == 'Y' && $value['Currency']['billing_currency'])// for checkin both
			{
				debug("test");
				//$validate_both = 1;
			}
			
			
		}
		
		$this->set(compact('validate_def','validate_bill','validate_both','currency','def','bill'));
	}
	
	
	
	
	
	
	
/**
 * edit method
 *
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		$this->Currency->id = $id;
		if (!$this->Currency->exists()) {
			throw new NotFoundException(__('Invalid currency'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Currency->save($this->request->data)) {
				$this->Session->setFlash(__('The currency has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The currency could not be saved. Please, try again.'));
			}
		} else {
			$this->request->data = $this->Currency->read(null, $id);
		}
	}

/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->Currency->id = $id;
		if (!$this->Currency->exists()) {
			throw new NotFoundException(__('Invalid currency'));
		}
		if ($this->Currency->delete()) {
			$this->Session->setFlash(__('Currency deleted'));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Currency was not deleted'));
		$this->redirect(array('action' => 'index'));
	}
}
