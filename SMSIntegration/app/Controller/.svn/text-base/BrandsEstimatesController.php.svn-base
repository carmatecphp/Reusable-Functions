<?php
App::uses('AppController', 'Controller');
CakePlugin::load('Uploader');
App::import('Vendor', 'Uploader.Uploader');
App::uses('CakeEmail', 'Network/Email');


/**
 * BrandsEstimates Controller
 *
 * @property BrandsEstimate $BrandsEstimate
 */
class BrandsEstimatesController extends AppController {

	/*var $helpers = array (
		'Html',
		'Javascript',
		'Ajax'
	);
	var $components = array (
		'Session',
		'RequestHandler'
	);*/
	
	/*function beforeFilter() {
		$this->params['donotredirect'] = 1;
		parent :: beforeFilter();

	}*/
	
	function beforeFilter() {
		parent :: beforeFilter();
		$this->loadModel('Aco');
		$this->loadModel('ArosAco');
		$url = $this->params['action'];
		$controller = $this->params['controller'];
			$module_name = 'Estimates';
			$aco = $this->Aco->find('first',array('conditions'=>array('Aco.alias'=>$module_name)));
			$aros_acosDetails = $this->ArosAco->find('first',array('conditions'=>array('ArosAco.aro_id'=>$this->Session->read('Auth1.User.Aro_id'),'ArosAco.aco_id'=>$aco['Aco']['id'])));
			$this->Session->write('Auth1.User.Permission',$aros_acosDetails);
			if($aros_acosDetails['ArosAco']['_create'] == 1){
	    		$proceed=1;
		    }
		    if($aros_acosDetails['ArosAco']['_read'] == 1){
	    		$proceed=1;
		    }
		    if($aros_acosDetails['ArosAco']['_update'] == 1){
	    		$proceed=1;
	    	}
		    if($aros_acosDetails['ArosAco']['_delete'] == 1){
		    	$proceed=1;
	    	}	    
	    
	    if(!$proceed){
	    	$this->redirect(array('controller'=>'users','action' => 'noaccess'));
	    }

	}
	
	/**
	 * index method
	 *
	 * @return void
	 */
	public function index($flash = null,$search_field = NULL,$search_data = NULL) 
	{
	//	Configure::write('debug',2);
		
		//debug($this->data);
		//debug($this->params);
		if (!$final = Cache :: read('final')) 
		{
			Cache :: write('final', $final, 86400);
			$this->BrandsEstimate->recursive = 0;

			if ($this->data['Estimates']['from']) 
			{
				$from = date('Y-m-d', strtotime($this->data['Estimates']['from']));
				$to = date('Y-m-d', strtotime($this->data['Estimates']['to']));
				$this->paginate = array ('conditions' => array ('AND' => array ('BrandsEstimate.active'=>'Y','BrandsEstimate.estimate_date between ? and ? ' => array ($from,$to))));

				$final = $this->paginate();
					debug($final);
			}
			
			
			if ($this->data['Estimates']['searchby'] == "All") 
				{
					
					
					$this->paginate = array (
						'conditions' => array (
							'BrandsEstimate.active' => 'Y'
						),
						'order' => array (
							'BrandsEstimate.estimate_name' => 'ASC'
						)
					);
					$final = $this->paginate();
					
			//		$inactive = 1;
					$flag_ckeckactive = "N";
	
				}
				
				if($this->data['Estimates']['searchby'] == "Draft")
				{
					$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'Y','BrandsEstimate.status'=>"Draft"),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'));
					$final = $this->paginate();
					
					$flag_ckeckactive = "N";
				}
				
				if($this->data['Estimates']['searchby'] == "Sent")
				{
					$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'Y','BrandsEstimate.status'=>"Sent"),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'));
					$final = $this->paginate();
					
					$flag_ckeckactive = "N";
				}
				debug($search_field);
				debug($search_data);
				if (!empty($search_field)) {
					if ($search_field == 'name') {
						$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'Y','BrandsEstimate.estimate_name LIKE'=>$search_data.'%'),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'));
						debug($this->paginate);
						$final = $this->paginate();
						debug($final);
						$flag_ckeckactive = "N";
					}
					if ($search_field == 'client_name') {
						$this->loadModel('Client');
						$client_id = $this->Client->find('first',array('conditions'=>array('Client.client_companyname' => $search_data),'fields'=>array('Client.id')));
						$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'Y','BrandsEstimate.client_id'=>$client_id['Client']['id']),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'));
						$final = $this->paginate();
						$flag_ckeckactive = "N";
					}
					if ($search_field == 'brand') {
						$this->loadModel('Brand');
						$brand_id = $this->Brand->find('first',array('conditions'=>array('Brand.brandname'=>$search_data),'fields'=>array('Brand.id')));
						$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'Y','BrandsEstimate.brand_id'=>$brand_id['Brand']['id']),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'));
						$final = $this->paginate();
						$flag_ckeckactive = "N";
					}
				}
				
				else
				{
					$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'Y'),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'));
					$final = $this->paginate();
					debug($final);
			//		$inactive = 1;
					$flag_ckeckactive = "N";
					
				}
			
		}
		
		//FOR CURRENCY
		$this->loadModel('Currency');
		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		debug($billingcurrency);
		$this->set('brandsEstimates', $this->paginate());
		foreach ($final as $final1) 
		{
			
			
			$date[$final1['BrandsEstimate']['id']] = AppModel :: dateFormat($final1['BrandsEstimate']['estimate_date']);
			$currency_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$final1['BrandsEstimate']['currency_id'])));
			$symbol[$final1['BrandsEstimate']['id']] = $currency_details['Currency']['symbol'];
			
			
		}
		
		debug($symbol);
		$this->set(compact('symbol'));
		
		
		$this->set(compact('flash','date'));

	}

	public function index_inactive($flash = null) 
	{
		//Configure::write('debug',2);
		debug($this->params);
		if (!$final = Cache :: read('final')) 
		{
			Cache :: write('final', $final, 86400);
			$this->BrandsEstimate->recursive = 0;

			if ($this->data['Estimates']['from']) 
			{
				$from = date('Y-m-d', strtotime($this->data['Estimates']['from']));
				$to = date('Y-m-d', strtotime($this->data['Estimates']['to']));
				$this->paginate = array ('conditions' => array ('AND' => array ('BrandsEstimate.active'=>'N','BrandsEstimate.estimate_date between ? and ? ' => array ($from,$to))));

				$final = $this->paginate();
			}
			
			
			if ($this->data['Filter']['searchby'] == "All") 
				{
					$this->paginate = array (
						'conditions' => array (
							'BrandsEstimate.active' => 'N'
						),
						'order' => array (
							'BrandsEstimate.estimate_name' => 'ASC'
						)
					);
					$final = $this->paginate();
					debug($final);
			//		$inactive = 1;
					$flag_ckeckactive = "N";
	
				}
				
				if($this->data['Filter']['searchby'] == "Draft")
				{
					$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'N','BrandsEstimate.status'=>"Draft"),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'
						)
					);
					$final = $this->paginate();
					debug($final);
					$flag_ckeckactive = "N";
				}
				
				if($this->data['Filter']['searchby'] == "Sent")
				{
					$this->paginate = array ('conditions' => array ('BrandsEstimate.active' => 'N','BrandsEstimate.status'=>"Sent"),'order' => array ('BrandsEstimate.estimate_name' => 'ASC'
						)
					);
					$final = $this->paginate();
					debug($final);
					$flag_ckeckactive = "N";
				}
				
				else
				{
					$this->paginate = array (
						'conditions' => array (
							'BrandsEstimate.active' => 'N'
						),
						'order' => array (
							'BrandsEstimate.estimate_name' => 'ASC'
						)
					);
					$final = $this->paginate();
					debug($final);
			//		$inactive = 1;
					$flag_ckeckactive = "N";
				}
			
		}
		//FOR CURRENCY
		$this->loadModel('Currency');
		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		debug($billingcurrency);
		$this->set('brandsEstimates', $this->paginate());
		foreach ($final as $final1) 
		{
			
			
			$date[$final1['BrandsEstimate']['id']] = AppModel :: dateFormat($final1['BrandsEstimate']['estimate_date']);
			$currency_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$final1['BrandsEstimate']['currency_id'])));
			$symbol[$final1['BrandsEstimate']['id']] = $currency_details['Currency']['symbol'];
			
			
			
			/*$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$final1['BrandsEstimate']['currency_id'])));
			debug($clientbilling);	
			if($clientbilling['Currency']['id'] != $billingcurrency['Currency']['id'])
			{
				$symbol[$final1['BrandsEstimate']['id']] = $clientbilling['Currency']['symbol'];
			}
			
			else
			{
				$symbol[$final1['BrandsEstimate']['id']] = 1;
			}*/
		}
		
		debug($symbol);
		$this->set(compact('symbol'));
			$this->set(compact('date'));
		$this->set('brandsEstimates', $this->paginate());
		
	}

	
	/**
	 * view method
	 *
	 * @param string $id
	 * @return void
	 */
	public function view($id = null,$flash = null,$section = null) 
	{
		//Configure::write('debug',2);	
		$this->BrandsEstimate->id = $id;
		$this->set(compact('id','flash','section'));

		$this->loadModel('Client');
		$this->loadModel('Company');
		$this->loadModel('Brand');
		$this->loadModel('BrandsEstimatedetail');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('BillingUnit');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('ClientsCommenthistory');
		$this->loadModel('Staff');
		$this->loadModel('ClientsEmailhistory');
	
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('ClientEmailtype');
		
		$estimate_details = $this->BrandsEstimate->find('first', array (
			'conditions' => array (
				'BrandsEstimate.id' => $id
			)
		));
		
		
		
		debug($estimate_details);
		$this->loadModel('Currency');
		
		$currency_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$estimate_details['BrandsEstimate']['currency_id'])));
		$symbol = $currency_details['Currency']['symbol'];
		
		/*$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		debug($billingcurrency);
		$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$estimate_details['BrandsEstimate']['currency_id'])));
		debug($clientbilling);
			if($clientbilling['Currency']['id'] != $billingcurrency['Currency']['id'])
			{
				debug();
				$symbol = $clientbilling['Currency']['symbol'];
			}
			
			else
			{
				debug();
				$symbol = 1;
			}
			debug($symbol);*/
		$this->set(compact('symbol'));
		
		
		
		
		
		
		
		
		
		
		
		
		$client_id = $estimate_details['BrandsEstimate']['client_id'];
	
		$brands = $this->Brand->find('first',array('conditions'=>array('Brand.id'=>$estimate_details['BrandsEstimate']['brand_id'])));
		$icon_imagepath_url = $brands['Brand']['icon_imagepath_url'];
		$icon_imagepath = $brands['Brand']['icon_imagepath'];
		$this->set(compact('icon_imagepath_url','icon_imagepath'));
		$date = AppModel :: dateFormat($estimate_details['BrandsEstimate']['estimate_date']);

		/*$sub_view = $estimate_details['BrandsEstimate']['totalcost'];
		$tax_view = $estimate_details['BrandsEstimate']['totaltax'];
		*/
		$client = $this->Client->find('first', array (
			'conditions' => array (
				'Client.id' => $estimate_details['BrandsEstimate']['client_id']
			)
		));
		$clientname = $client['Client']['client_companyname'];

		$comp = $this->Company->find('first', array (
			'conditions' => array (
				'Company.id' => $estimate_details['BrandsEstimate']['company_id']
			)
		));
		debug($comp);
		$companyname = $comp['Company']['companyname'];

		$brand = $this->Brand->find('first', array ('conditions' => array ('Brand.id' => $estimate_details['BrandsEstimate']['brand_id'])));
		$brandname = $brand['Brand']['brandname'];
		$details_of_estimate = $this->BrandsEstimatedetail->find('all', array (
			'conditions' => array (
				'BrandsEstimatedetail.brands_estimate_id' => $id
			)
		));
		debug($details_of_estimate);
		foreach ($details_of_estimate as $key => $value) 
		{
			$client_details = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate_details['BrandsEstimate']['client_id'])));
			debug($client_details);
			$final_client[$client_details['Client']['id']]['client_companyname'] = $client_details['Client']['client_companyname'];
			$final_client[$client_details['Client']['id']]['address'] = $client_details['Client']['address'];
			$final_client[$client_details['Client']['id']]['state']= $client_details['Client']['state'];
			$final_client[$client_details['Client']['id']]['country'] = $client_details['Client']['country'];
			$final_client[$client_details['Client']['id']]['zip'] = $client_details['Client']['zip'];
			$final_client[$client_details['Client']['id']]['phone'] = $client_details['Client']['phone'];
			if($value['BrandsEstimatedetail']['account_tax_id'])
			{
				$tax_details_view = $this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$value['BrandsEstimatedetail']['account_tax_id'])));
				debug($tax_details_view);	
			}
			elseif($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
			{	
				$taxgrp_view = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
				debug($taxgrp_view);
			}
			if ($value['BrandsEstimatedetail']['brands_service_id']) 
			{
				$service_tick = 1;
				$service_details = $this->BrandsService->find('first', array ('conditions' => array ('BrandsService.id' => $value['BrandsEstimatedetail']['brands_service_id'])));
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['item_name'] = $service_details['BrandsService']['service_name'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['description'] = $value['BrandsEstimatedetail']['description'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['tax'] = $taxgrp_view['AccountsTaxgroup']['groupname'];
					$final_taxes_view[$taxgrp_view['AccountsTaxgroup']['groupname']] = $value['BrandsEstimatedetail']['tax'];
			
				}
				
				elseif($value['BrandsEstimatedetail']['account_tax_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
					$final_taxes_view[$tax_details_view['AccountsTax']['name']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['id'] = $value['BrandsEstimatedetail']['brands_service_id'] . "-s";

				
			}
			
			debug($final_taxes_view);
			if ($value['BrandsEstimatedetail']['brands_package_id']) 
			{
				$package_tick = 1;
				$package_details = $this->BrandsPackage->find('first', array ('conditions' => array ('BrandsPackage.id' => $value['BrandsEstimatedetail']['brands_package_id'])));
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['item_name'] = $package_details['BrandsPackage']['package_name'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['description'] = $value['BrandsEstimatedetail']['description'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['id'] = $value['BrandsEstimatedetail']['brands_package_id'] . "-p";
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['tax'] = $taxgrp_view['AccountsTaxgroup']['groupname'];
					$final_taxes_view[$taxgrp_view['AccountsTaxgroup']['groupname']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				
				elseif($value['BrandsEstimatedetail']['account_tax_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
					$final_taxes_view[$tax_details_view['AccountsTax']['name']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				
			}
			if ($value['BrandsEstimatedetail']['billing_unit_id']) 
			{
				$unit_tick = 1;
				$unit_details = $this->BillingUnit->find('first', array ('conditions' => array ('BillingUnit.id' => $value['BrandsEstimatedetail']['billing_unit_id'])));
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['item_name'] = $unit_details['BillingUnit']['name'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['description'] = $value['BrandsEstimatedetail']['description'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['tax'] = $tax_details_view['AccountsTax']['name'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['id'] = $value['BrandsEstimatedetail']['billing_unit_id'] . "-u";
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['tax'] = $taxgrp_view['AccountsTaxgroup']['groupname'];
					$final_taxes_view[$taxgrp_view['AccountsTaxgroup']['groupname']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				
				elseif($value['BrandsEstimatedetail']['account_tax_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
					$final_taxes_view[$tax_details_view['AccountsTax']['name']] += $value['BrandsEstimatedetail']['tax'];
			
				}			
			}
			
			
			$sub_total_view += $value['BrandsEstimatedetail']['totalcost'];
			$net_view +=  ($value['BrandsEstimatedetail']['totalcost'] + $value['BrandsEstimatedetail']['tax']);
			
			if($section == "comments")
			{
				$comment_details = $this->ClientsCommenthistory->find('all',array('conditions'=>array('ClientsCommenthistory.brands_estimate_id'=>$id)));
				debug($comment_details);
				foreach($comment_details as $c1 => $c2)
				{
					$final_comments[$c2['ClientsCommenthistory']['id']]['date'] = AppModel :: dateFormat($c2['ClientsCommenthistory']['date']);
					$final_comments[$c2['ClientsCommenthistory']['id']]['comment']   = $c2['ClientsCommenthistory']['comment'] ;
					$staff_detail = $this->Staff->find('first',array('conditions'=>array('Staff.id'=>$c2['ClientsCommenthistory']['staff_id'])));
					$final_comments[$c2['ClientsCommenthistory']['id']]['staff'] = $staff_detail['Staff']['first_name'].' '.$staff_detail['Staff']['last_name'];
				}
			
			}
			if($section == "emails")
			{
			$email_details = $this->ClientsEmailhistory->find('all',array('conditions'=>array('ClientsEmailhistory.client_id'=>$estimate_details['BrandsEstimate']['client_id']) ,'order'=>'ClientsEmailhistory.date DESC'));
			debug($email_details);
			$clientss = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate_details['BrandsEstimate']['client_id'])));
			debug($email_details);
		
			foreach($email_details as $c1 => $c2)
			{
			
				
				$final_emails[$c2['ClientsEmailhistory']['id']]['to']   = $clientss['Client']['email1'] ;
				$final_emails[$c2['ClientsEmailhistory']['id']]['subject']  = $c2['ClientsEmailhistory']['subject'];
				$final_emails[$c2['ClientsEmailhistory']['id']]['date'] = AppModel :: dateFormat($c2['ClientsEmailhistory']['date']);
				
				$staff_detail = $this->Staff->find('first',array('conditions'=>array('Staff.id'=>$c2['ClientsEmailhistory']['staff_id'])));
				$final_emails[$c2['ClientsEmailhistory']['id']]['staff'] = $staff_detail['Staff']['first_name'].' '.$staff_detail['Staff']['last_name'];
				
				$email_type = $this->ClientEmailtype->find('first',array('conditions'=>array('ClientEmailtype.id'=>$c2['ClientsEmailhistory']['client_emailtype_id'])));
				debug($email_type);
				$final_emails[$c2['ClientsEmailhistory']['id']]['email_type'] = $email_type['ClientEmailtype']['email_type'];
				$final_emails[$c2['ClientsEmailhistory']['id']]['status'] = $c2['ClientsEmailhistory']['status'];
			}
			debug($final_emails);
			}
			
			
			
			
			if($value['BrandsEstimatedetail']['account_tax_id']) // Individual
				{
					$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $value['BrandsEstimatedetail']['account_tax_id'])));
					debug($tax_details);
					$tax_percent = $tax_details['AccountsTax']['percent'];
					$price = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);
					debug($tax_percent);
					$taxx1[$tax_details['AccountsTax']['name']] += ($price * $tax_percent)/100;
					debug($taxx1);
					foreach($taxx1 as $qe => $qw)
					{
						if($qw!=0)
						{
							$taxx12[$qe] = $qw;
						}
					}
					$multiple = 1;
					$type = "Individual";
					
				}
				
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id']) // Grp
				{
					$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
					debug($tax_grp_details);
					if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
					$compounded = "Y";
					else
					$compounded = "N";
					if($compounded == "Y")
					{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
								debug($amt);
								$tax_flag = 0;
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									if($tax_flag == 0)
									{
										debug($amt);
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price1[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price1);
										foreach($tax_price1 as $h1 => $h2){
											$amt += $h2 ;
										}
									}
													
													
									else
									{
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price2[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price2);
									}
									++$tax_flag;
												
								}
								debug($tax_price1);
								
								debug($tax_price2);
								debug($finaltax_price);
								foreach($finaltax_price as $ft1 => $ft2)
								{
									if($ft2!=0)
									{
										
										$finaltax_price1[$ft1] += $ft2;
									}
								}
							//	$taxx2[$tax_details['AccountsTax']['name']] += $tax_price1 + $tax_price2;	
							
							$type = "CompY";
					}	
							
					if($compounded == "N")
					{
						$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						debug($tax_mappings_details);
						$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
						debug($amt);
						foreach($tax_mappings_details as $tax1 => $tax2)
						{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									$finaltax_price2[$tax_values['AccountsTax']['name']] += (($amt * $tax_values['AccountsTax']['percent'])/100);
								//	debug($taxx3);
						}
								
								$type = "CompN";				
					}
										
							$multiple = 0;
					
			}
			
			

			
			
		}
		debug($final_comments);
		debug($final_values);
		debug($final_taxes_view);
		debug($net_view);
		
		
		debug($taxx12);
		debug($finaltax_price1);
		debug($finaltax_price2);
		
		foreach($taxx12 as $k1 => $v1)
					{
						$finalTTT[$k1] = $finalTTT[$k1]+$v1;
					}
					
					foreach($finaltax_price1 as $k2 => $v2)
					{
						$finalTTT[$k2] = $finalTTT[$k2]+$v2;
					}
					
					foreach($finaltax_price2 as $k3 => $v3)
					{
						$finalTTT[$k3] = $finalTTT[$k3]+$v3;
					}
					
					debug($finalTTT);
		
		
		
		if($finaltax_price1 && $finaltax_price2 && !$taxx12) // For both Y & N only
			{
				$tax_final = null;
				//Y
				foreach($finaltax_price1 as $one=> $two)
				{
					if($finaltax_price2[$one])
					{
						$tax_final[$one] = $two + $finaltax_price2[$one];
					}
				}
				
				
				foreach($finaltax_price1 as $three=> $four)
				{
					if(!$tax_final[$three])
					{
						$tax_final[$three] = $four;
					}
					
				}
				
				
				// N
				foreach($finaltax_price2 as $three2=> $four2)
				{
					if(!$tax_final[$three2])
					{
						$tax_final[$three2] = $four2;
					}
					
				}
				
				
				debug($tax_final);
				
				$type = "BothYN";
				
			}
			
			
					
		debug($type);
		
		
		if (!$this->BrandsEstimate->exists()) {
			throw new NotFoundException(__('Invalid brands estimate'));
		}
		$this->set('brandsEstimate', $this->BrandsEstimate->read(null, $id));
		$this->set(compact('clientname', 'companyname', 'brandname', 'final_values', 'date','final_client'));
		$this->set(compact('sub_total_view','final_taxes_view','net_view','final_comments','client_id','final_emails'));
		$this->set(compact('type','taxx12','finaltax_price1','finaltax_price2','tax_final','tax_finalN','tax_finalG','finalTTT'));
		$this->set(compact('companies', 'brands', 'clients', 'clientname', 'companyname', 'id', 'estimate_date', 'brandname', 'service_tick', 'package_tick', 'unit_tick', 'final_values', 'item', 'sub_total', 'service_tax', 'net', 'notes', 'terms','brand_list'));
	
		
	}
	
	
	
	public function overlay($description = null)
	{
	//	Configure::write('debug',2);	
		debug($description);
		$this->set(compact('description'));
	}
	
	public function overlayitem_name($description = null)
	{
	//	Configure::write('debug',2);	
		debug($description);
		$this->set(compact('description'));
	}
	
	
	
	public function section_email($client_id = null,$section = null,$id =null) 
	{
	//	Configure::write('debug',2);	
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('Client');
		$this->loadModel('Staff');
		$this->loadModel('ClientEmailtype');
		$email_details = $this->ClientsEmailhistory->find('all',array('conditions'=>array('ClientsEmailhistory.client_id'=>$client_id) ,'order'=>'ClientsEmailhistory.date DESC'));
		debug($email_details);
		$clientss = $this->Client->find('first',array('conditions'=>array('Client.id'=>$client_id)));
		debug($email_details);
		
		foreach($email_details as $c1 => $c2)
		{
			
			
			$final_emails[$c2['ClientsEmailhistory']['id']]['to']   = $clientss['Client']['email1'] ;
			$final_emails[$c2['ClientsEmailhistory']['id']]['subject']  = $c2['ClientsEmailhistory']['subject'];
			$final_emails[$c2['ClientsEmailhistory']['id']]['date'] = AppModel :: dateFormat($c2['ClientsEmailhistory']['date']);
			
			$staff_detail = $this->Staff->find('first',array('conditions'=>array('Staff.id'=>$c2['ClientsEmailhistory']['staff_id'])));
			$final_emails[$c2['ClientsEmailhistory']['id']]['staff'] = $staff_detail['Staff']['first_name'].' '.$staff_detail['Staff']['last_name'];
			
			$email_type = $this->ClientEmailtype->find('first',array('conditions'=>array('ClientEmailtype.id'=>$c2['ClientsEmailhistory']['client_emailtype_id'])));
			debug($email_type);
			$final_emails[$c2['ClientsEmailhistory']['id']]['email_type'] = $email_type['ClientEmailtype']['email_type'];
			$final_emails[$c2['ClientsEmailhistory']['id']]['status'] = $c2['ClientsEmailhistory']['status'];
		}
		debug($final_emails);
			$this->set(compact('final_emails','section','client_id','id'));
	}


	public function section_comment($client_id = null,$section = null,$id =null) 
	{
		$this->loadModel('ClientsCommenthistory');
		$this->loadModel('Staff');
		$comment_details = $this->ClientsCommenthistory->find('all',array('conditions'=>array('ClientsCommenthistory.brands_estimate_id'=>$id)));
		debug($comment_details);
		foreach($comment_details as $c1 => $c2)
		{
			$final_comments[$c2['ClientsCommenthistory']['id']]['date'] = AppModel :: dateFormat($c2['ClientsCommenthistory']['date']);
			$final_comments[$c2['ClientsCommenthistory']['id']]['comment']   = $c2['ClientsCommenthistory']['comment'] ;
			$staff_detail = $this->Staff->find('first',array('conditions'=>array('Staff.id'=>$c2['ClientsCommenthistory']['staff_id'])));
			$final_comments[$c2['ClientsCommenthistory']['id']]['staff'] = $staff_detail['Staff']['first_name'].' '.$staff_detail['Staff']['last_name'];
		}
			$this->set(compact('final_comments','section','client_id','id'));
	}

	
	/**
	 * add method
	 *
	 * @return void
	 */
	public function add() 
	{
		/*Configure::write('debug',2);	
		debug($this->data);*/
		$this->loadModel('BrandsEstimatedetail');
		$this->loadModel('Client');
		$this->loadModel('Currency');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		if($this->data)
		{
			if($this->data[0]['BrandsEstimate'])
			{
				$done1 = 1;
			}
			
			else
			{
				$done1 = 0;
			}
			$test1 = 0;
			foreach($this->data[$test1]['BrandsEstimate']['quantity'] as $testq1 => $testq2)
			{
				debug();
				if($testq2)
				{
					debug('yes');
					$done2 = 1;
				}
					
				elseif( (!is_numeric($testq2) || $testq2 <= 0) )
				{
					$done2 = 0;
					debug('No');
				}
				$test1++;
			}
			$test2 = 0;
			foreach($this->data[$test2]['BrandsEstimate']['rate'] as $testr1 => $testr2)
			{
				if($testr2)
				{
					debug('yes');
					$done3 = 1;
				}
					
				elseif( (!is_numeric($testr2) || $testr2 <= 0) )
				{
					$done3 = 0;
					debug('No');
				}
				$test2++;
			}
			
			debug($done1);
			debug($done2);
			debug($done3);
		
			
			
			if(  (   ($this->data['BrandsEstimate']['client_id'] && $this->data['BrandsEstimate']['estimate_name']  ) && ($this->data['BrandsEstimate']['company_id'] && $done1  ))   &&   ( ($done2 && $done3) && $this->data['BrandsEstimate']['brand_id'])    )
			{
				if($this->request->is('post'))
				{
					
					$this->BrandsEstimate->create();
					$save->data = null;
					
					$save->data['BrandsEstimate']['company_id'] = $this->data['BrandsEstimate']['company_id'];
					$save->data['BrandsEstimate']['brand_id'] = $this->data['BrandsEstimate']['brand_id'];
					$save->data['BrandsEstimate']['currency_id']= $this->data['BrandsEstimate']['currency_id'];
					$save->data['BrandsEstimate']['client_id'] = $this->data['BrandsEstimate']['client_id'];
					$save->data['BrandsEstimate']['estimate_name'] = $this->data['BrandsEstimate']['estimate_name'];
					$save->data['BrandsEstimate']['estimate_date'] = date('Y-m-d', strtotime($this->data['BrandsEstimate']['date']));
					$save->data['BrandsEstimate']['description'] = $this->data['BrandsEstimate']['description'];
					$save->data['BrandsEstimate']['active'] = 'Y';
					$save->data['BrandsEstimate']['status'] = 'Draft';
					$save->data['BrandsEstimate']['customer_notes'] = $this->data['BrandsEstimate']['customer_notes'];
					$save->data['BrandsEstimate']['terms'] = $this->data['BrandsEstimate']['terms'];
					
					$some = null;
					$x = 0;
					foreach ($this->data as $key => $value) 
					{
						$quantity = 0;
						foreach ($this->data[$x]['BrandsEstimate']['quantity'] as $q1 => $q2) 
						{
							$quantity = $q2; 
						}
						$rate = 0;
						foreach ($this->data[$x]['BrandsEstimate']['rate'] as $r1 => $r2) 
						{
							$rate = $r2;
							
						}
						$discount = 0;
						foreach ($this->data[$x]['BrandsEstimate']['discount'] as $d1 => $d2) 
						{
							$discount = $d2;
						}
						$tax = 0;
						foreach ($this->data[$x+1]['BrandsEstimate']['tax'] as  $t1 => $t2)
						{
							debug($t2);
							$tax = 	$t2;
							debug($tax);			
						}		
							debug($tax);			
										
						debug($quantity);
						$sub_total += (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						
						$price = (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						$discount_price += (($quantity *$rate) -$price );
						debug($price);
						$tax_exp = explode('-',$tax);
						debug($tax);
						$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax)));
						debug($tax_details);
						$tax_percent = $tax_details['AccountsTax']['percent'];
						if(!$tax_exp[1]) // For individual taxes
						{
							debug($price);
							debug($tax_percent);
							$taxx1 += ($price * $tax_percent)/100;
							debug($taxx1);
						}
						
						
						elseif($tax_exp[1])// For group taxes
						{
							$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp[1])));
							debug($tax_grp_details);
							if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
							$compounded = "Y";
							else
							$compounded = "N";
							if($compounded == "Y")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								$tax_flag = 0;
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									if($tax_flag == 0)
									{
										debug($amt);
										$tax_price1 = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price1);
										$amt += $tax_price1 ;
									}
													
													
									else
									{
										$tax_price2 = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price2);
									}
									++$tax_flag;
												
								}
								debug($tax_price1);
								
								debug($tax_price2);
								$taxx2 += $tax_price1 + 		$tax_price2;	
							}	
							
							if($compounded == "N")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									$taxx3 += (($amt * $tax_values['AccountsTax']['percent'])/100);
									debug($taxx3);
								}
												
							}
										
							
						}
						
						$x++;
					}
					debug($taxx2);
					debug($taxx3);
					$taxx = $taxx1 + $taxx2 + $taxx3;
					debug($taxx);
					
					$save->data['BrandsEstimate']['totalcost'] = $sub_total;
					$save->data['BrandsEstimate']['discount'] = $discount_price;
					$save->data['BrandsEstimate']['totaltax'] = $taxx;
					
					$save->data['BrandsEstimate']['net'] = $sub_total + $taxx;
					
					debug($save->data);
					$this->BrandsEstimate->save($save->data);
					$save_flag = 1;
					
					
					// For estimate details
					$y = 0;
					foreach ($this->data as $key2 => $value2) 
					{
						debug($this->data[$y]['BrandsEstimate']['description']);
						
						foreach($this->data[$y]['BrandsEstimate']['description'] as $dd1 => $dd2)
						{
							if(!$dd2)
							$flagdesc = "no_desc";
							if($dd2)
							$flagdesc = "yes_desc";
						}
						
						
						
						
						
						if($flagdesc == "no_desc")
						{
						foreach ($this->data[$y]['BrandsEstimate']['description'] as $desc1 => $desc2) 
						{
							$desc = explode('-',$desc1);
							debug($desc);
							debug($this->data[$y]['BrandsEstimate']['quantity']);
							foreach ($this->data[$y]['BrandsEstimate']['quantity'] as $q11 => $q22) 
							{
								foreach ($this->data[$y]['BrandsEstimate']['rate'] as $r11 => $r22) 
								{
									foreach ($this->data[$y]['BrandsEstimate']['discount'] as $d11 => $d22) 
									{
										foreach ($this->data[$y+1]['BrandsEstimate']['tax'] as $t11 => $t22) 
										{
										/*foreach ($this->data[$y]['BrandsEstimate']['tax'] as $t11 => $t22) 
										{*/
											
											
											$tax_details2 = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $t22)));
											$tax_percent2 = $tax_details2['AccountsTax']['percent'];
											$tax_exp2 = explode('-',$t22);
											
											$sub2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
											
											
											if($tax_exp2[1])  // For group taxes
											{
												$price2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
													$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp2[1])));
													debug($tax_grp_details);
													if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
													$compounded = "Y";
													else
													$compounded = "N";
													
													
													if($compounded == "Y")
													{
														$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
														debug($tax_mappings_details);
														
														$amt = ($q22 * $r22)-(($d22 * $q22 * $r22) / 100);
														debug($amt);
														$tax_flag = 0;
														foreach($tax_mappings_details as $tax1 => $tax2)
														{
															$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
															debug($tax_values);
															if($tax_flag == 0)
															{
																debug($amt);
																$tax_price1 = (($amt * $tax_values['AccountsTax']['percent'])/100);
																debug($tax_price1);
																$amt += $tax_price1 ;
															}
															
															
															else
															{
																$tax_price2 = (($amt * $tax_values['AccountsTax']['percent'])/100);
																debug($tax_price2);
															}
															++$tax_flag;
														}
														debug($tax_price1);
														debug($tax_price2);
														$taxx = $tax_price1 + $tax_price2;
												
									
													}
								
								
													if($compounded == "N")
													{
														$taxx = null;
														$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
														debug($tax_mappings_details);
														$amt = ($q22 * $r22)-(($d22 * $q22 * $r22) / 100);
														debug($amt);
															foreach($tax_mappings_details as $tax1 => $tax2)
															{
																$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
																debug($tax_values);
																debug($amt);
																
																$taxx += (($amt * $tax_values['AccountsTax']['percent'])/100);
																debug($taxx);
															}
														
													}
												
											
											}
											
										
											if(!$tax_exp2[1]) // For individual taxes
											{
												$price2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
												$taxx = ($price2 * $tax_percent2)/100;
												
												
											}
											
											
											$insertId = $this->BrandsEstimate->getLastInsertId();
											$this->BrandsEstimatedetail->create();
											$estimate_details->data = null;
											$estimate_details->data['BrandsEstimatedetail']['brands_estimate_id'] = $insertId;
											
											if ($desc[1] == "s") 
											{
												$estimate_details->data['BrandsEstimatedetail']['unit_type'] = "service";
												$estimate_details->data['BrandsEstimatedetail']['brands_package_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['billing_unit_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['brands_service_id'] = $desc[0];
												$estimate_details->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											elseif ($desc[1] == "p") 
											{
												$estimate_details->data['BrandsEstimatedetail']['unit_type'] = "package";
												$estimate_details->data['BrandsEstimatedetail']['brands_package_id'] = $desc[0];
												$estimate_details->data['BrandsEstimatedetail']['billing_unit_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['brands_service_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											elseif ($desc[1] == "u") 
											{
												$estimate_details->data['BrandsEstimatedetail']['unit_type'] = "unit";
												$estimate_details->data['BrandsEstimatedetail']['billing_unit_id'] = $desc[0];
												$estimate_details->data['BrandsEstimatedetail']['brands_package_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['brands_service_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											
											
											if(!$tax_exp2[1]) // For saving tax_id
											{
												$estimate_details->data['BrandsEstimatedetail']['account_tax_id'] = $t22;
												$estimate_details->data['BrandsEstimatedetail']['accounts_taxgroup_id'] = '0';
											}
											
											elseif($tax_exp2[1])// For saving group_tax_id
											{
												$estimate_details->data['BrandsEstimatedetail']['accounts_taxgroup_id'] =$tax_exp2[1] ;
												$estimate_details->data['BrandsEstimatedetail']['account_tax_id'] = '0';
											}
											$estimate_details->data['BrandsEstimatedetail']['quantity'] = $q22;
											$estimate_details->data['BrandsEstimatedetail']['active'] = 'Y';
											$estimate_details->data['BrandsEstimatedetail']['discount'] = $d22;
											$estimate_details->data['BrandsEstimatedetail']['totalcost'] = $sub2;
											$estimate_details->data['BrandsEstimatedetail']['tax'] = $taxx;
											$estimate_details->data['BrandsEstimatedetail']['netcost'] = $taxx+$sub2;

										}
									}
								}
							}
						}
						
					}
						
						
						
						
						
						
						
						
						
						if($flagdesc == "yes_desc")
						{
						foreach ($this->data[$y]['BrandsEstimate']['description'] as $desc1 => $desc2) 
						{
							$desc = explode('-',$desc1);
							foreach ($this->data[$y+1]['BrandsEstimate']['quantity'] as $q11 => $q22) 
							{
								foreach ($this->data[$y+1]['BrandsEstimate']['rate'] as $r11 => $r22) 
								{
									foreach ($this->data[$y+1]['BrandsEstimate']['discount'] as $d11 => $d22) 
									{
										foreach ($this->data[$y+2]['BrandsEstimate']['tax'] as $t11 => $t22) 
										{
										/*foreach ($this->data[$y]['BrandsEstimate']['tax'] as $t11 => $t22) 
										{*/
											
											
											$tax_details2 = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $t22)));
											$tax_percent2 = $tax_details2['AccountsTax']['percent'];
											$tax_exp2 = explode('-',$t22);
											
											$sub2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
											
											
											if($tax_exp2[1])  // For group taxes
											{
												$price2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
													$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp2[1])));
													if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
													$compounded = "Y";
													else
													$compounded = "N";
													
													
													if($compounded == "Y")
													{
														$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
														
														$amt = ($q22 * $r22)-(($d22 * $q22 * $r22) / 100);
														$tax_flag = 0;
														foreach($tax_mappings_details as $tax1 => $tax2)
														{
															$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
															if($tax_flag == 0)
															{
																$tax_price1 = (($amt * $tax_values['AccountsTax']['percent'])/100);
																$amt += $tax_price1 ;
															}
															
															
															else
															{
																$tax_price2 = (($amt * $tax_values['AccountsTax']['percent'])/100);
															}
															++$tax_flag;
														}
														$taxx = $tax_price1 + $tax_price2;
												
									
													}
								
								
													if($compounded == "N")
													{
														$taxx = null;
														$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
														$amt = ($q22 * $r22)-(($d22 * $q22 * $r22) / 100);
															foreach($tax_mappings_details as $tax1 => $tax2)
															{
																$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
																
																$taxx += (($amt * $tax_values['AccountsTax']['percent'])/100);
															}
														
													}
												
											
											}
											
										
											if(!$tax_exp2[1]) // For individual taxes
											{
												$price2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
												$taxx = ($price2 * $tax_percent2)/100;
												
												
											}
											
											
											$insertId = $this->BrandsEstimate->getLastInsertId();
											$this->BrandsEstimatedetail->create();
											$estimate_details->data = null;
											$estimate_details->data['BrandsEstimatedetail']['brands_estimate_id'] = $insertId;
											
											if ($desc[1] == "s") 
											{
												$estimate_details->data['BrandsEstimatedetail']['unit_type'] = "service";
												$estimate_details->data['BrandsEstimatedetail']['brands_package_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['billing_unit_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['brands_service_id'] = $desc[0];
												$estimate_details->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											elseif ($desc[1] == "p") 
											{
												$estimate_details->data['BrandsEstimatedetail']['unit_type'] = "package";
												$estimate_details->data['BrandsEstimatedetail']['brands_package_id'] = $desc[0];
												$estimate_details->data['BrandsEstimatedetail']['billing_unit_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['brands_service_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											elseif ($desc[1] == "u") 
											{
												$estimate_details->data['BrandsEstimatedetail']['unit_type'] = "unit";
												$estimate_details->data['BrandsEstimatedetail']['billing_unit_id'] = $desc[0];
												$estimate_details->data['BrandsEstimatedetail']['brands_package_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['brands_service_id'] = '0';
												$estimate_details->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											
											
											if(!$tax_exp2[1]) // For saving tax_id
											{
												$estimate_details->data['BrandsEstimatedetail']['account_tax_id'] = $t22;
												$estimate_details->data['BrandsEstimatedetail']['accounts_taxgroup_id'] = '0';
											}
											
											elseif($tax_exp2[1])// For saving group_tax_id
											{
												$estimate_details->data['BrandsEstimatedetail']['accounts_taxgroup_id'] =$tax_exp2[1] ;
												$estimate_details->data['BrandsEstimatedetail']['account_tax_id'] = '0';
											}
											$estimate_details->data['BrandsEstimatedetail']['quantity'] = $q22;
											$estimate_details->data['BrandsEstimatedetail']['active'] = 'Y';
											$estimate_details->data['BrandsEstimatedetail']['discount'] = $d22;
											$estimate_details->data['BrandsEstimatedetail']['totalcost'] = $sub2;
											$estimate_details->data['BrandsEstimatedetail']['tax'] = $taxx;
											$estimate_details->data['BrandsEstimatedetail']['netcost'] = $taxx+$sub2;

										}
									}
								}
							}
						}
						
					}
						$y++;
						$this->BrandsEstimatedetail->save($estimate_details->data);
						$save_flag = 1;
						
					}
					$this->Session->setFlash(__('Estimate has been saved'));
					$this->redirect(array ('action' => 'index',1));
					
				} // POST IF CLOSING
			}
			
			
			else //list + error flash
			{
				if(!$this->data['BrandsEstimate']['client_id'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any client</div>'));
				}
				elseif(!$this->data['BrandsEstimate']['estimate_name'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter the estimate name</div>'));
				}
				
				elseif(!$this->data['BrandsEstimate']['company_id'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any company</div>'));
				}
				
				elseif(!$this->data['BrandsEstimate']['brand_id'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any brand</div>'));
				}
				
				elseif(!$done1)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any item</div>'));
				}
				elseif(!$done2)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid quantity</div>'));
				}
				elseif(!$done3)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid rate</div>'));
				}
				
				$clients = $this->Client->find('list', array ('fields' => array ('Client.id','Client.client_companyname'),'order' => 'Client.client_companyname ASC'));
		
				$currency = $this->Currency->find('list',array('conditions'=>array('Currency.billing_currency'=>'Y'),'fields'=>array('Currency.id','Currency.name')));
				//$currency =  $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name') ,array('conditions'=>array('Currency.billing_currency'=>'Y')),'order' => 'Currency.name ASC'));
				$def_curr = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
				$def_curr_id = $def_curr['Currency']['id'];
				$this->set(compact('def_curr_id'));
				$this->loadModel('Company');
				$companies = $this->Company->find('list', array (
					'fields' => array (
						'Company.id',
						'Company.companyname'
					),
					'order' => 'Company.companyname ASC'
				));
				
				
			}
		}
		
		else
		{
			//listing
			$clients = $this->Client->find('list', array ('fields' => array ('Client.id','Client.client_companyname'),'order' => 'Client.client_companyname ASC'));
		
			$currency = $this->Currency->find('list',array('conditions'=>array('Currency.billing_currency'=>'Y'),'fields'=>array('Currency.id','Currency.name')));
			$def_curr = $this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
			$def_curr_id = $def_curr['Currency']['id'];
			$this->set(compact('def_curr_id'));
			$this->loadModel('Company');
			$companies = $this->Company->find('list', array (
				'fields' => array (
					'Company.id',
					'Company.companyname'
				),
				'order' => 'Company.companyname ASC'
			));
		}
		$this->set(compact('companies', 'brands', 'clients','currency','def_curr_id'));
	}
	
	
	// Brand call
	public function brands() {
		//Configure::write('debug',2);	
		debug($this->data);
		$this->loadModel('Brand');
		$brands = $this->Brand->find('list', array (
			'fields' => array (
				'Brand.id',
				'Brand.brandname'
			),
			'conditions' => array (
				'Brand.company_id' => $this->data['BrandsEstimate']['company_id']
			),
			'order' => 'Brand.brandname ASC'
		));
		$this->set(compact('brands'));
	}

	public function addmore($flag = null) {
		//	Configure::write('debug',2);	
		debug($this->data);
		$this->set(compact('flag'));
	}
	
	
	public function addmore_edit($flag = null,$curr_id=null) {
		//	Configure::write('debug',2);	
		debug($this->data);
		$this->set(compact('flag','curr_id'));
	}
	
	public function unit_type($flag = null) {
		//Configure::write('debug',2);	
		debug($this->data);
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsServiceunit');
		$this->loadModel('BrandsPackagedetail');

		for ($i = 1; $i <= 3; $i++) {
			if ($this->data['BrandsEstimate']['unit_type' . $i] == "Unit") {
				$item = null;
				$type = null;
				$item = $this->BillingUnit->find('list', array (
					'fields' => array (
						'BillingUnit.id',
						'BillingUnit.name'
					),
					'order' => array (
						'BillingUnit.name ASC'
					)
				));
				debug($item);
				$type = "unit";
			}

			if ($this->data['BrandsEstimate']['unit_type' . $i] == "Service") {
				$item = null;
				$type = null;
				$item = $this->BrandsService->find('list', array (
					'fields' => array (
						'BrandsService.id',
						'BrandsService.service_name'
					),
					'order' => array (
						'BrandsService.service_name ASC'
					)
				));
				debug($item);
				$type = "service";
			}

			if ($this->data['BrandsEstimate']['unit_type' . $i] == "Package") {
				$item = null;
				$type = null;
				$item = $this->BrandsPackage->find('list', array (
					'fields' => array (
						'BrandsPackage.id',
						'BrandsPackage.package_name'
					),
					'order' => array (
						'BrandsPackage.package_name ASC'
					)
				));
				debug($item);
				$type = "package";
			}

		}

		

		$this->set(compact('item', 'type', 'flag'));
	}

	public function rate($type = null,$flag=null) 
	{
		/*Configure :: write('debug', 2);
		debug($flag);
		debug($this->data);*/
		
		for ($tax = 1; $tax <= 20; $tax++) {
			$final_tax[$tax] += ($tax * 5);
		}

		$this->loadModel('BrandsPackage');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('CurrencyConversionrate');
		$this->loadModel('Currency');
						
		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		debug($billingcurrency);
		$symbol=$billingcurrency['Currency']['symbol'];
		$taxes = $this->AccountsTax->find('list', array ('fields' => array ('AccountsTax.id','AccountsTax.name','AccountsTax.percent'),'order' => 'AccountsTax.name ASC'));
	//	debug($taxes);
		$item_id = $this->data['BrandsEstimate']['type'][$flag];

		if ($type == "service") 
		{
			
			
			$pass_id = null;
			$serv_id = $this->BrandsService->find('first', array ('conditions' => array ('BrandsService.id' => $item_id)));
			//debug($serv_id);
			$rate = $serv_id['BrandsService']['totalcost'];
			debug($rate);
			$unit_type = "Service";
			//			$resource_id = $id."-s";
			$pass_id = $serv_id['BrandsService']['id'] . "-s";
			//Currency Conversion
			if($billingcurrency['Currency']['id']!=$this->data['BrandsEstimate']['currency_id'])
			{
				
				$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['BrandsEstimate']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
				
				$to=$fromcur['Currency']['name'];
				$from=$billingcurrency['Currency']['name'];
				$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
				$handle = @fopen($url, 'r');
 				
				if ($handle) 
					{
    					$result = fgets($handle, 4096);
    					fclose($handle);
					}
				
				$allData = explode(',',$result);  //Get all the contents to an array 
				$rate=$rate*$allData['1'];
				$symbol=$fromcur['Currency']['symbol'];
				$this->set(compact('symbol'));
			}
							
			//End
			
			
			
			
		}
		if ($type == "package") 
		{
			$pass_id = null;
			$serv_id = $this->BrandsPackage->find('first', array ('conditions' => array ('BrandsPackage.id' => $item_id)));
			//debug($serv_id);
			$rate = $serv_id['BrandsPackage']['totalcost'];
			//		$resource_id = $id."-p";
			$unit_type = "Package";
			$pass_id = $serv_id['BrandsPackage']['id'] . "-p";
			if($billingcurrency['Currency']['id']!=$this->data['BrandsEstimate']['currency_id'])
			{
				$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['BrandsEstimate']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
				
				$to=$fromcur['Currency']['name'];
				$from=$billingcurrency['Currency']['name'];
				$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
				$handle = @fopen($url, 'r');
 				
				if ($handle) 
					{
    					$result = fgets($handle, 4096);
    					fclose($handle);
					}
				
				$allData = explode(',',$result);  //Get all the contents to an array 
				$rate=$rate*$allData['1'];
				$symbol=$fromcur['Currency']['symbol'];
				$this->set(compact('symbol'));
			}
							
							//End
		}

		if ($type == "unit") 
		{
			$pass_id = null;
			$serv_id = $this->BillingUnit->find('first', array ('conditions' => array ('BillingUnit.id' => $item_id)));
			//debug($serv_id);
			$rate = $serv_id['BillingUnit']['amount'];
			//		$resource_id = $id."-u";
			$unit_type = "Unit";
			$pass_id = $serv_id['BillingUnit']['id'] . "-u";
			if($billingcurrency['Currency']['id']!=$this->data['BrandsEstimate']['currency_id'])
			{
				$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['BrandsEstimate']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
				
				$to=$fromcur['Currency']['name'];
				$from=$billingcurrency['Currency']['name'];
				$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
				$handle = @fopen($url, 'r');
 				
				if ($handle) 
					{
    					$result = fgets($handle, 4096);
    					fclose($handle);
					}
				
				$allData = explode(',',$result);  //Get all the contents to an array 
				$rate=$rate*$allData['1'];
				$symbol=$fromcur['Currency']['symbol'];
				$this->set(compact('symbol'));
			}
							
							//End
		}

		$resource_id = $item_id;

		//debug($pass_id);
		$this->set(compact('rate', 'resource_id', 'final_tax', 'unit_type', 'taxes', 'pass_id','flag'));
	}
	
	public function estimate_name_check()
	{
	//	Configure::write('debug',2);	
		debug($this->data);
		$est_namecheck2 = $this->data['BrandsEstimate']['estimate_name'];
		$est_namecheck = strlen($est_namecheck2);
		if($est_namecheck > 150)
		{
			$validate_string =1;
		}
		$this->set(compact('validate_string','est_namecheck2'));
	}


	public function unit_name_check()
	{
	//	Configure::write('debug',2);	
		debug($this->data);
		$est_namecheck2 = $this->data['Popupunit']['unit_name'];
		$est_namecheck = strlen($est_namecheck2);
		if($est_namecheck > 50)
		{
			$validate_string =1;
		}
		$this->set(compact('validate_string','est_namecheck2'));
	}
	
	
	public function service_name_check()
	{
		
	
		
		$this->loadModel('BrandsService');
		$est_namecheck2 = $this->data['PopupService']['service_name'];
		debug($this->data);
		$details = null;
		$details = $this->BrandsService->find('all',array('conditions'=>array('AND'=>array('BrandsService.active'=>'Y','BrandsService.service_name LIKE'=>$est_namecheck2))));
		debug($details);
		if(strlen($est_namecheck2) > 30)
		{
			$validate = 1;
		}
		
		if($details)
		{
			$validate = 2;
		}
		
		
		
		$this->set(compact('validatecount','validate'));
	}
	
	
	public function package_name_check()
	{
	//	Configure::write('debug',2);	
		debug($this->data);
		$this->loadModel('BrandsPackage');
		
		$details = null;
		
		$est_namecheck2 = $this->data['PopupPackage']['package_name'];
		$details = $this->BrandsPackage->find('all',array('conditions'=>array('AND'=>array('BrandsPackage.active'=>'Y','BrandsPackage.package_name LIKE'=>$est_namecheck2))));
		
		$est_namecheck = strlen($est_namecheck2);
		if($est_namecheck > 30)
		{
			$validate =1;
		}
		if($details)
		{
			$validate = 2;
		}
		$this->set(compact('validate','est_namecheck2'));
	}
	
	
	
	
	public function string_validate($pass_id = null) 
	{
	//	Configure::write('debug',2);	
		$dd = 0;
		$exp = explode($pass_id);
		$resource_id = $exp[0];
		foreach ($this->data as $key => $value) 
		{
			$description_check2 = 0;
			foreach ($this->data[$dd]['BrandsEstimate']['description'] as $desc1 => $desc2) 
			{
				
				debug($desc1);
				if($desc1 == $pass_id)
				$description_check2 = $desc2;
			}
			
			debug($description_check2);
			if($description_check2 != "0")
			{
				debug($description_check2);	
				$description_check = $description_check2;
			}
			
			debug($description_check);
			
			$dd++;
			
		}
		
		debug($description_check);
		if($description_check)
		{
			$str_length = strlen($description_check);
			debug($str_length);
			if($str_length >20)
			{
				$validate_string =1;
				//$this->Session->setFlash(__('<div class="flashMessageError">Description should be less than 50 characters</div>'));
				/*$validate_string->alert("Yo that ain't in the database man!");
				return $validate_string;*/
			}
			
			
			
		}
		
		$this->set(compact('validate_string','description_check','pass_id','resource_id'));
	}
	public function amount($pass_id = null , $symbol = null,$flag=null) 
	{
		/*configure::write('debug',2);
		debug($symbol);*/
		
		
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		

		$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
		
		
		foreach ($tax_groups_details as $t1 => $t2) 
		{
			$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
			foreach($tax_mappings as $m1 => $m2)
			{
				$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
				foreach($taxname as $name1 => $name2)
				{
					$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
					$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
					
					$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
					
				}
			}
		}
		ksort($final_taxes);
		debug($final_taxes); 
		//debug($final_taxes2); 
		$var = 0;		
		
		$dd = 0;
		foreach ($this->data as $key => $value) 
		{
			$description_check2 = 0;
			foreach ($this->data[$dd]['BrandsEstimate']['description'] as $desc1 => $desc2) 
			{
				
				debug($desc1);
				if($desc1 == $pass_id)
				$description_check2 = $desc2;
			}
			
			debug($description_check2);
			if($description_check2 != "0")
			{
				debug($description_check2);	
				$description_check = $description_check2;
			}
			
			debug($description_check);
			
			$dd++;
			
		}
		
		debug($description_check);
		if($description_check)
		{
			$str_length = strlen($description_check);
			debug($str_length);
			if($str_length >50)
			{
				$validate_string =1;
				//$this->Session->setFlash(__('<div class="flashMessageError">Description should be less than 50 characters</div>'));
					
			}
			
		}
		$this->set(compact('validate_string'));
		
		
		
		
		
		
		foreach($final_taxes as $f1 => $f2)
		{
			if(is_array($f2))
			{
				$name_exp = explode('-',$f1);
				$list[$f1] = $name_exp[0];
				foreach($f2 as $v1 => $v2)
				{
					debug($v2);
					foreach($v2 as $id1 => $name1)
					{
						//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
						$list[$f1.$id1]='|--'.$name1;
					}
				}
			}
			
			else
				$list[$f1] = $f2;
			
			
		}
		debug($list);
		
		
		
		$this->set(compact('list'));
		
		if(!$tax_groups_details)
		{
		//	$only_taxes = $this->AccountsTax->find('list', array ('fields' => array ('AccountsTax.id','AccountsTax.name')));
			$only_taxes2 = $this->AccountsTax->find('all');
			foreach($only_taxes2 as $o1 => $o2)
			{
				$only_taxes[$o2['AccountsTax']['id']] = $o2['AccountsTax']['name'].'-'.$o2['AccountsTax']['percent'].'%';
			}
		}
		
		debug($only_taxes);
		
		
		$x = 0;
		$test_amount = null;
		$res_exp=explode('.', $pass_id);
		$resource_id = $res_exp[0];
		$this->set(compact('resource_id'));
		foreach ($this->data as $key => $value) {
			foreach ($this->data[$x]['BrandsEstimate']['quantity'] as $q1 => $q2) {
				/*debug($q2);
				$quan = explode('.', $q2);
							debug($quan);
							
							if($q2 <= 0)
							{
								$validate_quan = 1;
							}
							
							elseif(!is_numeric($q2) && ($q2))
							{
								debug();	
								$validate_quan = 1;
							}
							
							elseif($quan[1])
							{
								$validate_quan = 1;
								debug();
							}
							
							elseif($quan[0] > 0 && !$quan[1])
							{
								debug();
								$validate_quan = 0;
							}*/
							
				
				foreach ($this->data[$x]['BrandsEstimate']['rate'] as $r1 => $r2) {
					foreach ($this->data[$x]['BrandsEstimate']['discount'] as $d1 => $d2) {
							debug($d2);
							
							if($r1 == $pass_id)
							{
								$quan = explode('.', $q2);
							debug($quan);
							
							if($q2 <= 0)
							{
								$validate_quan = 1;
							}
							
							elseif(!is_numeric($q2) && ($q2))
							{
								debug();	
								$validate_quan = 1;
							}
							
							elseif($quan[1])
							{
								$validate_quan = 1;
								debug();
							}
							
							elseif($quan[0] > 0 && !$quan[1])
							{
								debug();
								$validate_quan = 0;
							}
							}
							
						if($r1 == $pass_id)
						{	
							
							$exp = null;
							$exp = explode('.', $d2);
							debug($exp[1]);
							/*if($exp[1] > 0) $validate = 1;
							elseif(($exp[1] == 0)) $validate = 0;*/
							// For validating the discount , discount shud be 0 - 100
							
							if(!$d2)
							{
								debug();
								$validate = 0;
							}
							
							
							if (($d2 <= 100) && ($d2 >= 0)) 
							{
								debug($exp[1]);
								if (($exp[1] == 0))
								 {
									$validate = 0;
								}
								elseif ($exp[1] > 0 ) 
								{
									debug();
									$validate = 1;
								}

							}
							elseif ($d2 > 100 || $d2 < 0) 
							{
									debug();	
								$validate = 1;

							}
							
							if(!is_numeric($d2) && ($d2))
							{
								debug();	
								$validate = 1;
							}
							
					}
							debug($validate);
							if ($validate == 0)
								$amount = (($q2 * $r2) - (($d2 * $q2 * $r2) / 100));
							$test_amount[$r1] = $amount;
							$total_amount += (($q2 * $r2) - (($d2 * $q2 * $r2) / 100));
							
							/*$tax_exp = explode('-',$t2);
							debug($tax_exp[1]);
							if(!$tax_exp[1])
							{
								$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $t2)));
								$tax_percent = $tax_details['AccountsTax']['percent'];
								$tax_amount2 = ($tax_percent * $amount) / 100;
								$tax_amount[$t2][$t1] = $tax_amount2;
							}
							// For tax group calculations. . . .
							elseif($tax_exp[1])
							{
								
								$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp[1])));
								debug($tax_grp_details);
								if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
								$compounded = "Y";
								else
								$compounded = "N";
								
								
								if($compounded == "Y")
								{
									$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
									debug($tax_mappings_details);
									
									$amt = ($q2 * $r2)-(($d2 * $q2 * $r2) / 100);
									debug($amt);
									$tax_flag = 0;
									foreach($tax_mappings_details as $tax1 => $tax2)
									{
										$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
										debug($tax_values);
										if($tax_flag == 0)
										{
											debug($amt);
											$tax_price1 = (($amt * $tax_values['AccountsTax']['percent'])/100);
											debug($tax_price1);
											$amt += $tax_price1 ;
										}
										
										
										else
										{
											$tax_price2 = (($amt * $tax_values['AccountsTax']['percent'])/100);
											debug($tax_price2);
										}
										++$tax_flag;
									}
									debug($tax_price1);
									debug($tax_price2);
									$taxx += $tax_price1 + $tax_price2;
									
									
								}
								
								
								if($compounded == "N")
								{
									
									$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
									debug($tax_mappings_details);
									$amt = ($q2 * $r2)-(($d2 * $q2 * $r2) / 100);
									debug($amt);
									foreach($tax_mappings_details as $tax1 => $tax2)
									{
										$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
										debug($tax_values);
										 $taxx+= (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($taxx);
									}
									
								}
								
								
								
							}*/
						
					}
				}
			}
			$x++;

		}
		/*if($taxx)
		$this->redirect(array ('action' => 'taxable_amount',$pass_id));
		debug($taxx);*/
		
		foreach ($test_amount as $t1 => $t2) {

			if ($t1 == $pass_id) {
				debug($t2);
				$final_amount = $t2;
			}
		}
		/*if($amt) $tax_amount = $amt;
		debug($tax_amount);*/
		debug($amount);
		debug($total_amount);
		
		/*$this->set(compact('amount', 'validate', 'final_amount','taxx','validate_quan','symbol','only_taxes','flag'));*/
		$this->set(compact('amount','final_amount','taxx','symbol','only_taxes','flag'));
	}





	public function taxable_amount($amount = null, $symbol = null,$flag=null) 
	{
		/*Configure::write('debug',2);	
		debug($this->data);
		debug($flag);*/
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('Currency');
		
		
		$currency_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['BrandsEstimate']['currency_id'])));
		$symbol = $currency_details['Currency']['symbol'];
			
		
		
		/*$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		debug($billingcurrency);
		if($billingcurrency['Currency']['id'] == $this->data['BrandsEstimate']['currency_id'])
		{
			$default_currecy = 1;
		}*/
		$x = 0;
		
		$test_amount = null;
		$some = null;
					foreach ($this->data as $key => $value) 
					{
						debug($this->data[$x]['BrandsEstimate']['description']);
		
						foreach ($this->data[$x]['BrandsEstimate']['description'] as $desc1 => $desc2) 
						{
							if(!$desc2)
							$flagdesc = "no_desc";
							if($desc2)
							$flagdesc = "yes_desc";
						}		
						if($flagdesc == "no_desc")	
						{
							$quantity = 0;
							foreach ($this->data[$x]['BrandsEstimate']['quantity'] as $q1 => $q2) 
							{
								$quantity = $q2; 
							}
							$rate = 0;
							foreach ($this->data[$x]['BrandsEstimate']['rate'] as $r1 => $r2) 
							{
								$rate = $r2;
							}
							$discount = 0;
							foreach ($this->data[$x]['BrandsEstimate']['discount'] as $d1 => $d2) 
							{
								$discount = $d2;
							}
							$tax = 0;
							foreach ($this->data[$x+1]['BrandsEstimate']['tax'] as  $t1 => $t2)
							{
								debug($t1);
								debug($t2);
								$tax = 	$t2;
								debug($tax);			
							}		
							debug($tax);			
						}
						
						
						if($flagdesc == "yes_desc")	
						{
							
							$quantity = 0;
							foreach ($this->data[$x+1]['BrandsEstimate']['quantity'] as $q1 => $q2) 
							{
								$quantity = $q2; 
							}
							$rate = 0;
							foreach ($this->data[$x+1]['BrandsEstimate']['rate'] as $r1 => $r2) 
							{
								$rate = $r2;
								
							}
							$discount = 0;
							foreach ($this->data[$x+1]['BrandsEstimate']['discount'] as $d1 => $d2) 
							{
								$discount = $d2;
							}
							$tax = 0;
							foreach ($this->data[$x+2]['BrandsEstimate']['tax'] as  $t1 => $t2)
							{
								debug($t2);
								$tax = 	$t2;
								debug($tax);			
							}		
							debug($tax);			
						}
						
						
										
						debug($quantity);
						$sub_total += (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						$price = (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						$discount_price += (($quantity *$rate) -$price );
						debug($price);
						debug($tax);
						$tax_exp=null;
						if($tax!='0')
							{
								$tax_exp = explode('-',$tax);
								debug($tax_exp);
							}
						debug($tax_exp);
						debug($tax_exp[1]);
						$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax)));
						debug($tax_details);
						$tax_percent = $tax_details['AccountsTax']['percent'];
						if(!$tax_exp[1]) // For individual taxes
						{
							debug($price);
							debug($tax_percent);
							$taxx1[$tax_details['AccountsTax']['name']] += ($price * $tax_percent)/100;
							debug($taxx1);
							foreach($taxx1 as $qe => $qw)
							{
								if($qw!=0)
								{
									$taxx12[$qe] = $qw;
								}
							}
							$multiple = 1;
							$type = "Individual";
						}
						
						
						elseif($tax_exp[1])// For group taxes
						{
							$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp[1])));
							debug($tax_grp_details);
							if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
							$compounded = "Y";
							else
							$compounded = "N";
							if($compounded == "Y")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								$tax_flag = 0;
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									if($tax_flag == 0)
									{
										debug($amt);
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price1[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price1);
										foreach($tax_price1 as $h1 => $h2){
											$amt += $h2 ;
										}
									}
													
													
									else
									{
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price2[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price2);
									}
									++$tax_flag;
												
								}
								debug($tax_price1);
								
								debug($tax_price2);
								debug($finaltax_price);
								foreach($finaltax_price as $ft1 => $ft2)
								{
									if($ft2!=0)
									{
										
										$finaltax_price1[$ft1] += $ft2;
									}
								}
							//	$taxx2[$tax_details['AccountsTax']['name']] += $tax_price1 + $tax_price2;	
							
							$type = "CompY";
							}	
							
							if($compounded == "N")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									$finaltax_price2[$tax_values['AccountsTax']['name']] += (($amt * $tax_values['AccountsTax']['percent'])/100);
								//	debug($taxx3);
								}
								
								$type = "CompN";				
							}
										
							$multiple = 0;
							
						}
						
						$x++;
					}
					debug($taxx12);
					debug($finaltax_price1);
					debug($finaltax_price2);
					
					foreach($taxx12 as $k1 => $v1)
					{
						$finalTTT[$k1] = $finalTTT[$k1]+$v1;
					}
					
					foreach($finaltax_price1 as $k2 => $v2)
					{
						$finalTTT[$k2] = $finalTTT[$k2]+$v2;
					}
					
					foreach($finaltax_price2 as $k3 => $v3)
					{
						$finalTTT[$k3] = $finalTTT[$k3]+$v3;
					}
					
					debug($finalTTT);
				if(($taxx12) && ($finaltax_price1)) // GRP Y and ividividual
				{
					$tax_finalG = null;
					foreach($finaltax_price1 as $one=> $two)
					{
						if($taxx12[$one])
						{
							$tax_finalG[$one] = $two + $taxx12[$one];
							$flag_tax = 1;
						}
					}
				
					debug($tax_finalG);
					foreach($finaltax_price1 as $three=> $four)
					{
						if(!$tax_finalG[$three])
						{
							$tax_finalG[$three] = $four;
							
						}
						if($flag_tax != 1)
						{
							foreach($taxx12 as $one123=> $two123)
							{
							$tax_finalG[$one123] = $two123;
							}
							debug($tax_finalG);
						}
					}
					$type = "grpY_indi";
					
				}
				
			debug($tax_finalG);
			
			
			if(($taxx12) && ($finaltax_price2)) // GRP N and ividividual
				{
					$tax_finalN = null;
					foreach($finaltax_price2 as $one=> $two)
					{
						if($taxx12[$one])
						{
							$tax_finalN[$one] = $two + $taxx12[$one];
							$flag_tax = 1;
						}
					}
				
					debug($tax_finalN);
					foreach($finaltax_price2 as $three=> $four)
					{
						if(!$tax_finalN[$three])
						{
							$tax_finalN[$three] = $four;
							
						}
						if($flag_tax != 1)
						{
							foreach($taxx12 as $one123=> $two123)
							{
							$tax_finalN[$one123] = $two123;
							}
							debug($tax_finalN);
						}
					}
				$type = "grpN_indi";
					
				}
			if($finaltax_price1 && !$finaltax_price2) // if only compounded = "Y"
			{
				foreach($finaltax_price1 as $fp1 => $fp2)
				{
					$taxxx += $fp2;
					
				}
				debug($taxxx);
				$total_add = $sub_total +$taxxx;
				
			}
			
			
			if($finaltax_price2 && !$finaltax_price1) // if only compounded = "N"
			{
				foreach($finaltax_price2 as $fp12 => $fp22)
				{
					$taxxx2 += $fp22;
					
				}
				debug($taxxx2);
				$total_add = $sub_total +$taxxx2;
				
			}
			
			
			if($finaltax_price1 && $finaltax_price2 && !$taxx12) // For both Y & N only
			{
				$tax_final = null;
				//Y
				foreach($finaltax_price1 as $one=> $two)
				{
					if($finaltax_price2[$one])
					{
						$tax_final[$one] = $two + $finaltax_price2[$one];
					}
				}
				
				
				foreach($finaltax_price1 as $three=> $four)
				{
					if(!$tax_final[$three])
					{
						$tax_final[$three] = $four;
					}
					
				}
				
				
				// N
				foreach($finaltax_price2 as $three2=> $four2)
				{
					if(!$tax_final[$three2])
					{
						$tax_final[$three2] = $four2;
					}
					
				}
				
				
				debug($tax_final);
				//FOR TOTAL
				foreach($finaltax_price1 as $fp1 => $fp2)
				{
					$taxxx += $fp2;
					
				}
				
				foreach($finaltax_price2 as $fp12 => $fp22)
				{
					$taxxx2 += $fp22;
					
				}
				debug($taxxx2);
				$total_add = $sub_total +$taxxx2 + $taxxx;
				$type = "BothYN";
				
			}
			
			
					
		debug($type);
		
		if(!$finaltax_price1 && !$finaltax_price2) // Individual
		{
			$taxx = $taxx12;
			debug($taxx);
			foreach($taxx as $x1 => $x2)
			{
				if($x2 != 0)
				$total_add = $sub_total +$x2;
			}
			debug($total_add);
			
		}
		
		
		debug($sub_total);
		debug($finalTTT);
		foreach($finalTTT as $ft1 => $ft2)
		{
			$tot +=  $ft2;
		}
		$tot2 = $tot + $sub_total;
		debug($tot2);
		debug($taxx);
		$this->set(compact('taxx','multiple','total_add','finalTTT','symbol','default_currecy','symbol'));
		
		$this->set(compact('type','taxx12','finaltax_price1','finaltax_price2','tax_final','tax_finalN','tax_finalG','tot2'));
		
	}

	public function taxable_amount_edit($amount = null) 
	{
	//Configure::write('debug',2);	
		debug($this->data);
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$x = 0;
		$test_amount = null;
		$some = null;
					foreach ($this->data as $key => $value) 
					{
						$quantity = 0;
						foreach ($this->data[$x]['BrandsEstimate']['quantity'] as $q1 => $q2) 
						{
							$quantity = $q2; 
						}
						$rate = 0;
						foreach ($this->data[$x]['BrandsEstimate']['rate'] as $r1 => $r2) 
						{
							$rate = $r2;
							
						}
						$discount = 0;
						foreach ($this->data[$x]['BrandsEstimate']['discount'] as $d1 => $d2) 
						{
							$discount = $d2;
						}
						$tax = 0;
						foreach ($this->data[$x+1]['BrandsEstimate']['tax'] as  $t1 => $t2)
						{
							debug($t2);
							$tax = 	$t2;
							debug($tax);			
						}		
						debug($tax);			
										
						debug($quantity);
						$sub_total += (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						
						$price = (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						$discount_price += (($quantity *$rate) -$price );
						debug($price);
						if($tax)$tax_exp = explode('-',$tax);
						debug($tax_exp);
						debug($tax_exp[1]);
						$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax)));
						debug($tax_details);
						$tax_percent = $tax_details['AccountsTax']['percent'];
						if(!$tax_exp[1]) // For individual taxes
						{
							debug($price);
							debug($tax_percent);
							$taxx1[$tax_details['AccountsTax']['name']] += ($price * $tax_percent)/100;
							debug($taxx1);
							foreach($taxx1 as $qe => $qw)
							{
								if($qw!=0)
								{
									$taxx12[$qe] = $qw;
								}
							}
							$multiple = 1;
							$type = "Individual";
						}
						
						
						elseif($tax_exp[1])// For group taxes
						{
							$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp[1])));
							debug($tax_grp_details);
							if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
							$compounded = "Y";
							else
							$compounded = "N";
							if($compounded == "Y")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								$tax_flag = 0;
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									if($tax_flag == 0)
									{
										debug($amt);
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price1[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price1);
										foreach($tax_price1 as $h1 => $h2){
											$amt += $h2 ;
										}
									}
													
													
									else
									{
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price2[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price2);
									}
									++$tax_flag;
												
								}
								debug($tax_price1);
								
								debug($tax_price2);
								debug($finaltax_price);
								foreach($finaltax_price as $ft1 => $ft2)
								{
									if($ft2!=0)
									{
										
										$finaltax_price1[$ft1] += $ft2;
									}
								}
							//	$taxx2[$tax_details['AccountsTax']['name']] += $tax_price1 + $tax_price2;	
							
							$type = "CompY";
							}	
							
							if($compounded == "N")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									$finaltax_price2[$tax_values['AccountsTax']['name']] += (($amt * $tax_values['AccountsTax']['percent'])/100);
								//	debug($taxx3);
								}
								
								$type = "CompN";				
							}
										
							$multiple = 0;
							
						}
						
						$x++;
					}
					debug($taxx12);
					debug($finaltax_price1);
					debug($finaltax_price2);
					
					foreach($taxx12 as $k1 => $v1)
					{
						$finalTTT[$k1] = $finalTTT[$k1]+$v1;
					}
					
					foreach($finaltax_price1 as $k2 => $v2)
					{
						$finalTTT[$k2] = $finalTTT[$k2]+$v2;
					}
					
					foreach($finaltax_price2 as $k3 => $v3)
					{
						$finalTTT[$k3] = $finalTTT[$k3]+$v3;
					}
					
					debug($finalTTT);
					
					
				if(($taxx12) && ($finaltax_price1)) // GRP Y and ividividual
				{
					$tax_finalG = null;
					foreach($finaltax_price1 as $one=> $two)
					{
						if($taxx12[$one])
						{
							$tax_finalG[$one] = $two + $taxx12[$one];
							$flag_tax = 1;
						}
					}
				
					debug($tax_finalG);
					foreach($finaltax_price1 as $three=> $four)
					{
						if(!$tax_finalG[$three])
						{
							$tax_finalG[$three] = $four;
							
						}
						if($flag_tax != 1)
						{
							foreach($taxx12 as $one123=> $two123)
							{
							$tax_finalG[$one123] = $two123;
							}
							debug($tax_finalG);
						}
					}
					$type = "grpY_indi";
					
				}
				
			debug($tax_finalG);
			
			
			if(($taxx12) && ($finaltax_price2)) // GRP N and ividividual
				{
					$tax_finalN = null;
					foreach($finaltax_price2 as $one=> $two)
					{
						if($taxx12[$one])
						{
							$tax_finalN[$one] = $two + $taxx12[$one];
							$flag_tax = 1;
						}
					}
				
					debug($tax_finalN);
					foreach($finaltax_price2 as $three=> $four)
					{
						if(!$tax_finalN[$three])
						{
							$tax_finalN[$three] = $four;
							
						}
						if($flag_tax != 1)
						{
							foreach($taxx12 as $one123=> $two123)
							{
							$tax_finalN[$one123] = $two123;
							}
							debug($tax_finalN);
						}
					}
				$type = "grpN_indi";
					
				}
			if($finaltax_price1 && !$finaltax_price2) // if only compounded = "Y"
			{
				foreach($finaltax_price1 as $fp1 => $fp2)
				{
					$taxxx += $fp2;
					
				}
				debug($taxxx);
				$total_add = $sub_total +$taxxx;
				
			}
			
			debug($finaltax_price1);
			if($finaltax_price2 && !$finaltax_price1) // if only compounded = "N"
			{
				foreach($finaltax_price2 as $fp12 => $fp22)
				{
					$taxxx2 += $fp22;
					
				}
				debug($taxxx2);
				$total_add = $sub_total +$taxxx2;
				
			}
			
			
			if($finaltax_price1 && $finaltax_price2) // For both Y & N
			{
				$tax_final = null;
				//Y
				foreach($finaltax_price1 as $one=> $two)
				{
					if($finaltax_price2[$one])
					{
						$tax_final[$one] = $two + $finaltax_price2[$one];
					}
				}
				
				
				foreach($finaltax_price1 as $three=> $four)
				{
					if(!$tax_final[$three])
					{
						$tax_final[$three] = $four;
					}
					
				}
				
				
				// N
				foreach($finaltax_price2 as $three2=> $four2)
				{
					if(!$tax_final[$three2])
					{
						$tax_final[$three2] = $four2;
					}
					
				}
				
				
				debug($tax_final);
				//FOR TOTAL
				foreach($finaltax_price1 as $fp1 => $fp2)
				{
					$taxxx += $fp2;
					
				}
				
				foreach($finaltax_price2 as $fp12 => $fp22)
				{
					$taxxx2 += $fp22;
					
				}
				debug($taxxx2);
				$total_add = $sub_total +$taxxx2 + $taxxx;
				$type = "BothYN";
				
			}
			
			
					
		debug($type);
		
		if(!$finaltax_price1 && !$finaltax_price2) // Individual
		{
			$taxx = $taxx12;
			debug($taxx);
			foreach($taxx as $x1 => $x2)
			{
				if($x2 != 0)
				$total_add = $sub_total +$x2;
			}
			debug($total_add);
			
		}
		
		
		debug($sub_total);
		
		debug($total_add);
		debug($taxx);
		$this->set(compact('taxx','multiple','total_add','finalTTT'));
		
		$this->set(compact('type','taxx12','finaltax_price1','finaltax_price2','tax_final','tax_finalN','tax_finalG'));
		
	}

	
	public function net() {
		//Configure::write('debug',2);	
		debug($this->data);
		$x = 0;
		foreach ($this->data as $key => $value) {

			foreach ($this->data[$x]['BrandsEstimate']['quantity'] as $q1 => $q2) {
				foreach ($this->data[$x]['BrandsEstimate']['rate'] as $r1 => $r2) {
					foreach ($this->data[$x]['BrandsEstimate']['discount'] as $d1 => $d2) {
						foreach ($this->data[$x]['BrandsEstimate']['tax'] as $t1 => $t2) {
							$price = ($q2 * $r2) - $d2;
							debug($price);
							$tax = $t2 * 5;
							debug($tax);
							$tax_price2 = ($price * $tax) / 100;
							debug($tax_price2);
							$sub_total += ($price + $tax_price2);
							debug($sub_total);

						}
					}
				}
			}

			$x++;
		}
		$service_tax = $this->data['BrandsEstimate']['total_tax'];
		debug($sub_total);
		debug($service_tax);
		$serive_tax_price = ($sub_total * $service_tax) / 100;
		$net = $serive_tax_price + $sub_total;
		$this->set(compact('net'));
		//	debug($sub_total);

	}

	public function overlayunit() 
	
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsServiceunit');
		$this->loadModel('BillingUnit');
			$this->loadModel('BillingSlot');
		if($this->data['Type']=='Unit')
		{
			$this->loadModel('BillingSlot');
			$billingslots=$this->BillingSlot->find('list',array('fields'=>array('BillingSlot.id','BillingSlot.slot_name')));
			$unitflag=1;
		
		}
		elseif($this->data['Type']=='Service')
		{
			$serviceflag=1;
			$this->loadModel('BillingUnit');
			$bilingunit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
		}
		else
		{
			$packageflag=1;
			$flag=1;
			$this->loadModel('BrandsService');
			$this->loadModel('BrandsServiceunit');
			$this->loadModel('BillingUnit');
			$serv=$this->BrandsService->find('all',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			//debug($serv);
			$billingunits = $this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$brands_units = $this->BrandsServiceunit->find('all');
			$final=null;
			foreach($serv as $serv)
			{	
				
				$final[$serv['BrandsService']['id']]['service']=$serv['BrandsService']['service_name'];
				$this->BrandsServiceunit->recursive = 0;
				$brands_units = $this->BrandsServiceunit->find('all',array('conditions'=>array('BrandsServiceunit.brands_service_id'=>$serv['BrandsService']['id'])));
				$j=0;
				foreach($brands_units as $brands_unit){
					$final[$serv['BrandsService']['id']]['units'][$brands_unit['BillingUnit']['id']]=$brands_unit['BillingUnit']['name'];
				/*	if($brands_unit['BrandsServiceunit']['brands_service_id'] == $k){
						$unit[$k.'s'] = $v;
						foreach($billingunits as $k1 => $v1){
							if($brands_unit['BrandsServiceunit']['billing_unit_id'] == $k1){
								//$u = $this->BillingUnit->find('first',array('BillingUnit.id'=>$k1));
								$unit[$k1.'u']= '-'.$v1;
							}
						}
					}*/
					$j++;
				}
			
				/*//debug($brands_units);
				foreach($billingunits as $k1 => $v1){
					foreach($brands_units as $brands_unit){
						debug($brands_unit);
						if(($brands_unit['BrandsServiceunit']['billing_unit_id'] == $k1) && ($brands_unit['BrandsServiceunit']['brands_service_id'] == $k)){
						$unit[$k1] = $v;
						}
					}
				}*/
				//debug($k);
			//	debug($v);
				/*foreach($units as $value){
					$unit[$k]['units']=$value['BrandsServiceunit']['id'];
				}
				*/
				//$servunit[$k]['units']=$units['BrandsServiceunit']['']
				
			}
			
				debug($final);
				$i=1;
				foreach($final as $key => $value){
					$unit[$key."-s"] = $value['service'];
					foreach($value['units'] as $key1 => $val1){
						debug($key1."-u");
						debug($unit);
						foreach($unit as $key2=>$val2){
							if($key2 == $key1."-u"){
							debug("xyz");
							$unit[$key1."-u"."-".$i] = "|--".$val1;
							
							$i++;
						}else{
							$unit[$key1."-u"] = "|--".$val1;
							debug("1234");
						}
						}
						
						
					}
				}
				
				
				
					
			/*foreach($final as $key => $value){
				$unit[$value['service'].'---'.'s'.'---'.$key] = $value['service'];
				//$unit[$key] = $value['service'];
				
				foreach($value['units'] as $key1 => $val1){
					if(in_array($key1,$unit[$val1."---".'u'.'---'.$key1])){
						$unit[$val1."---".'u'.'---'.$key1."---"."key"] = $val1;
					}else{
						$unit[$val1."---".'u'.'---'.$key1] = '------'.$val1;
					}
					
//					/$unit[$key1][$key] = '--'.$val1;
				}
			}*/
				/*if($value['units']){
					foreach($value['units'] as $key1 => $val1){
						if(in_array($key1,$unit[$key1]))
						{
						$unit[$key1.'-u'] = '--'.$val1;
						}
						else
						{
							$unit[$key1] = '--'.$val1;
						}
					}
				}*/
			
			debug($unit)	;
				
				
		
			//debug($servunits);
			//$unit=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$disp=1;
			$both=1;
			//$unit=$final;
			//debug($unit);
			$this->set(compact('unit','disp','flag','both','popupunit'));
		}
		
		$this->set(compact('unitflag','serviceflag','packageflag','billingslots','bilingunit','billingservice'));

	}
	public function numberconversion($data=null)
	{
		//$data='10,000.50';
		$numz=explode('.',$data);
		$base=explode(',',$numz[0]);
		$i=0;
		while($base[$i])
		{
			$i++;
		}
		
		$kbc=2*$i-1;
		$num=0;
		for($j=0;$j<=$i-1;$j++)
			{
				$mul=1;
				if($kbc != 1)
					{
						for($pow=1;$pow<=$kbc;$pow++)
							{
								$mul=$mul*10;
							}
					}
				else
					{
						$mul=$mul*1;
					}
				$num=$num+$base[$j]*$mul;
				$kbc=$kbc-2;
				
				
			}
			$dec=$numz[1]/100;
			
			$num1=$num+$dec;
		
		return $num1;
	}
	public function calcpop($flag=null)
	{
		//configure::write('debug',2);
		debug($this->data);
		$totalamount=0;
		$totalamount=$this->data['Popupunit']['quantity_pop']*$this->numberconversion($this->data['Popupunit']['price_popup']);
		
		if($this->data['PopupPackage'])
		{
			if($this->data['PopupPackage']['quantity1'])
			{
				debug();
				
				$exp1 = explode('.',$this->data['PopupPackage']['quantity1']);
				if(  ($exp1[1]) || (!is_numeric($this->data['PopupPackage']['quantity1']) ||  $this->data['PopupPackage']['quantity1']<=0) )
				{
					$validate = 1;
				}
			}
			if($this->data['PopupPackage']['quantity2'])
			{
				$exp2 = explode('.',$this->data['PopupPackage']['quantity2']);
				if(  ($exp2[1]) || (!is_numeric($this->data['PopupPackage']['quantity2']) ||  $this->data['PopupPackage']['quantity2']<=0) )
				{
					$validate = 2;
				}
			}
			
			
			
			
			$totalamount=$totalamount+$this->data['PopupPackage']['quantity1']*$this->numberconversion($this->data['price_popup1']);
			$totalamount=$totalamount+$this->data['PopupPackage']['quantity2']*$this->numberconversion($this->data['price_popup2']);
		}
		if($this->data['PopupService'])
		{
			
			if($this->data['PopupService']['quantity1'])
			{
				
				$exp1 = explode('.',$this->data['PopupService']['quantity1']);
				if(  ($exp1[1]) || (!is_numeric($this->data['PopupService']['quantity1']) ||  $this->data['PopupService']['quantity1']<=0) )
				{
					$validate = 1;
				}
			}
			if($this->data['PopupService']['quantity2'])
			{
				$exp2 = explode('.',$this->data['PopupService']['quantity2']);
				if(  ($exp2[1]) || (!is_numeric($this->data['PopupService']['quantity2']) ||  $this->data['PopupService']['quantity2']<=0) )
				{
					$validate = 2;
				}
			}
			
			$totalamount=$totalamount+$this->data['PopupService']['quantity1']*$this->numberconversion($this->data['price_popup1'])+$this->data['PopupService']['quantity2']*$this->numberconversion($this->data['price_popup2']);
		}
		if($this->data['unit_name1'])
		{
			foreach($this->data['unit_name1'] as $k=>$v)
			{
				$totalamount=$totalamount+$this->data['quantity1'][$k]*$this->numberconversion($this->data['price_popup'][$k]);
			}
			
		}
		if($this->data['package_name1'])
		{
			
			debug($totalamount);
			foreach($this->data['package_name1'] as $kks=>$vvs)
			{
				$totalamount=$totalamount+$this->data['package_quantity1'][$kks]*$this->numberconversion($this->data['price_popup'][$kks]);
			}
		}
		$this->set(compact('totalamount','validate'));
	}
	
	
	public function price_popup1check()
	{
		
		if(!is_numeric($this->data['PopupService']['price_popup1']) || $this->data['PopupService']['price_popup1']<=0 )
		{
			$validatecount = 1;
		}
		
		if(!is_numeric($this->data['PopupPackage']['price_popup1']) || $this->data['PopupPackage']['price_popup1']<=0 )
		{
			$validatecount = 1;
		}
		
		
		$this->set(compact('validatecount'));
	
	
	}
	public function price_popup2check()
	{
		
		if(!is_numeric($this->data['PopupService']['price_popup2']) || $this->data['PopupService']['price_popup2']<=0 )
		{
			$validatecount = 1;
		}
		if(!is_numeric($this->data['PopupPackage']['price_popup2']) || $this->data['PopupPackage']['price_popup2']<=0 )
		{
			$validatecount = 1;
		}
		
		$this->set(compact('validatecount'));
	
	
	}
	
	
	public function unitadd($flag=null)
	{
		//configure::write('debug',2);
		debug($this->data);
		$this->loadModel('BillingUnit');
		if($this->data)
		{
			if( $this->data['Popupunit']['unit_name'] && $this->data['Popupunit']['price_popup'] )
			{
				if ($this->request->is('post')) 
				{
					//save
					$this->BillingUnit->create();
					$savearray1->data=null;
					$savearray1->data['BillingUnit']['name']=$this->data['Popupunit']['unit_name'];
					$savearray1->data['BillingUnit']['billing_slot_id']=$this->data['Popupunit']['billingslot'];
					$savearray1->data['BillingUnit']['amount']=$this->data['Popupunit']['price_popup'];
					$this->BillingUnit->save($savearray1->data);
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Success! The Unit has been saved</div>'));
					$this->redirect(array ('action' => 'add'));
					
			
					
				}
			}
			
			else
			{
				//error+list
				if(!$this->data['Popupunit']['unit_name'])
				{	
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter the unit name in the Add New Unit popup</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
					
				}
				
				elseif(!$this->data['Popupunit']['price_popup'])
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid rate and try again</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
				}
			}
		}
		
		/*else
		{
			//list
		}*/
	}
	
	
	public function serviceadd($flag=null)
	{
		//configure::write('debug',2);
		debug($this->data);
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsServiceunit');
		if($this->data)
		{
			if($this->data['PopupService']['unit_name1'] || $this->data['PopupService']['unit_name2'])
			{
				debug('yes');
				$done1 = 1;
			}
			
			if($this->data['PopupService']['quantity1'] || $this->data['PopupService']['quantity2'])
			{
				$done2 = 1;
				debug('yes');
				
			}
			if($this->data['price_popup1'] || $this->data['price_popup2'])
			{
				debug('yes');
				$done3 = 1;
			}
			
			if( ($this->data['PopupService']['service_name'] && $done1) && ($done2 && $done3) )
			{
				if ($this->request->is('post')) 
				{
					//save
					$this->BrandsService->create();
					$savearray1->data=null;
					$savearray1->data['BrandsService']['service_name']=$this->data['PopupService']['service_name'];
					$savearray1->data['BrandsService']['totalcost']=$this->data['totalamountpop'];
					
					
					if($this->BrandsService->save($savearray1->data))
					{
						$last=$this->BrandsService->getLastInsertID();
						if($this->data['PopupService']['unit_name1'])
						{
							$this->BrandsServiceunit->create();
							$saveunit->data=null;
							$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
							$saveunit->data['BrandsServiceunit']['billing_unit_id']=$this->data['PopupService']['unit_name1'];
							$saveunit->data['BrandsServiceunit']['quantity']=$this->data['PopupService']['quantity1'];
							$saveunit->data['BrandsServiceunit']['rate']=$this->data['price_popup1'];
							$saveunit->data['BrandsServiceunit']['total']=$this->data['PopupService']['quantity1']*$this->numberconversion($this->data['price_popup1']);
							debug($saveunit->data);
							$this->BrandsServiceunit->save($saveunit->data);
						}
						if($this->data['PopupService']['unit_name2'])
						{
							$this->BrandsServiceunit->create();
							$saveunit->data=null;
							$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
							$saveunit->data['BrandsServiceunit']['billing_unit_id']=$this->data['PopupService']['unit_name2'];
							$saveunit->data['BrandsServiceunit']['quantity']=$this->data['PopupService']['quantity2'];
							$saveunit->data['BrandsServiceunit']['rate']=$this->data['price_popup2'];
							$saveunit->data['BrandsServiceunit']['total']=$this->data['PopupService']['quantity2']*$this->numberconversion($this->data['price_popup2']);
							debug($saveunit->data);
							$this->BrandsServiceunit->save($saveunit->data);
						}
						if($this->data['unit_name1'])
						{
							foreach($this->data['unit_name1'] as $key=>$val)
							{
								$this->BrandsServiceunit->create();
								$saveunit->data=null;
								$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
								$saveunit->data['BrandsServiceunit']['billing_unit_id']=$val;
								$saveunit->data['BrandsServiceunit']['quantity']=$this->data['quantity1'][$key];
								$saveunit->data['BrandsServiceunit']['rate']=$this->numberconversion($this->data['price_popup'][$key]);
								$saveunit->data['BrandsServiceunit']['total']=$this->data['quantity1'][$key]*$this->numberconversion($this->data['price_popup'][$key]);
								debug($saveunit->data);
								$this->BrandsServiceunit->save($saveunit->data);
							}
							
						}
						
					}
					
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Success! The service has been saved</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
					
				}
			}
			
			else
			{
				//error
				if(!$this->data['PopupService']['service_name'])
				{	
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please enter the service name in the Add New Service popup</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
					
				}
				
				elseif(!$done1)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please select atleast one unit and try again</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
				}
				
				elseif(!$done2)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please enter a valid quantity and try again</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
				}
				
				elseif(!$done3)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please enter a valid rate and try again</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
				}
				
				
			}
			
			
		}
	
	}
	
	public function packageadd($flag=null)
	{
		//configure::write('debug',2);
		debug($this->data);
		$this->loadmodel('BrandsPackage');
		$this->loadModel('BrandsPackagedetail');
		
		if($this->data)
		{
			debug($this->data);
			if($this->data['PopupPackage']['unit_name1'] || $this->data['PopupPackage']['unit_name2'])
			{
				debug('yes');
				$done1 = 1;
			}
			
			if($this->data['PopupPackage']['quantity1'] || $this->data['PopupPackage']['quantity2'])
			{
				$done2 = 1;
				debug('yes');
				
			}
			if($this->data['price_popup1'] || $this->data['price_popup1'])
			{
				debug('yes');
				$done3 = 1;
			}
			
			if( ($this->data['PopupPackage']['package_name'] && $done1) && ($done2 && $done3) )
			{
				if ($this->request->is('post')) 
				{
					//save
					$this->BrandsPackage->create();
					$savearray1->data=null;
					$savearray1->data['BrandsPackage']['package_name']=$this->data['PopupPackage']['package_name'];
					$savearray1->data['BrandsPackage']['totalcost']=$this->data['totalamountpop'];
					
					if($this->BrandsPackage->save($savearray1->data))
					{
						if($this->data['PopupPackage']['unit_name1'])
						{
							$last=$this->BrandsPackage->getLastInsertID();
							$savearray1->data=null;
							$this->BrandsPackagedetail->create();
							$savearray1->data['BrandsPackagedetail']['brands_package_id']=$last;
							$exp=explode('-',$this->data['PopupPackage']['unit_name1']);
							if($exp[1]=='u')
								{
									$savearray1->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
									$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity1'];
									$savearray1->data['BrandsPackagedetail']['unit_type']='unit';
									$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup1'])*$this->data['PopupPackage']['quantity1'];
							
								}
							if($exp[1]=='s')
								{
									$savearray1->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
									$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity1'];
									$savearray1->data['BrandsPackagedetail']['unit_type']='service';
									$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup1'])*$this->data['PopupPackage']['quantity1'];
							
								}
							$this->BrandsPackagedetail->save($savearray1->data);
						}
						if($this->data['PopupPackage']['unit_name2'])
							{
								$savearray1->data=null;
								$this->BrandsPackagedetail->create();
								$last=$this->BrandsPackage->getLastInsertID();
								$savearray1->data['BrandsPackagedetail']['brands_package_id']=$last;
								$exp=explode('-',$this->data['PopupPackage']['unit_name2']);
								if($exp[1]=='u')
									{
										
										$savearray1->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
										$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity2'];
										$savearray1->data['BrandsPackagedetail']['unit_type']='unit';
										$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup2'])*$this->data['PopupPackage']['quantity2'];
							
									}
								if($exp[1]=='s')
									{
										$savearray1->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
										$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity2'];
										$savearray1->data['BrandsPackagedetail']['unit_type']='service';
										$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup2'])*$this->data['PopupPackage']['quantity2'];
							
									}
								$this->BrandsPackagedetail->save($savearray1->data);
							}
							if($this->data['package_name1'])
							{
								foreach($this->data['package_name1'] as $kp=>$vp)
								{
									$exp=explode('-',$vp);
									if($exp[1]=='u')
									{
										$savearr->data=null;
										$this->BrandsPackagedetail->create();
										$savearr->data['BrandsPackagedetail']['brands_package_id']=$last;
										$savearr->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
										$savearr->data['BrandsPackagedetail']['unit_type']='unit';
										$savearr->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup'][$kp])*$this->data['package_quantity1'][$kp];
										$savearr->data['BrandsPackagedetail']['quantity']=$this->data['package_quantity1'][$kp];
									
									}
									if($exp[1]=='s')
									{
										$savearr->data=null;
										$this->BrandsPackagedetail->create();
										$savearr->data['BrandsPackagedetail']['brands_package_id']=$last;
										$savearr->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
										$savearr->data['BrandsPackagedetail']['unit_type']='service';
										$savearr->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup'][$kp])*$this->data['package_quantity1'][$kp];
										$savearr->data['BrandsPackagedetail']['quantity']=$this->data['package_quantity1'][$kp];
									}
									
									$this->BrandsPackagedetail->save($savearr->data);
								}
						}
					}
					
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Success! The package has been saved</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
					
				}
			}
			
			else
			{
				//error
				if(!$this->data['PopupPackage']['package_name'])
				{	
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please enter the package name in the Add New Package popup</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
					
				}
				
				elseif(!$done1)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please select atleast one unit and try again</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
				}
				
				elseif(!$done2)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please enter a valid quantity and try again</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
				}
				
				elseif(!$done3)
				{
					$this->Session->setFlash(__('<div class="flashMessageError">Could not be saved. Please enter a valid rate and try again</div>'));
					
					$this->redirect(array('controller'=>'brands_estimates','action' => 'add'));
				}
				
			}
		}
	}
	
	
	
	
	
	
	
	
	public function unitratecheck()
	{
		if(!is_numeric($this->data['Popupunit']['price_popup']) || $this->data['Popupunit']['price_popup']<=0 )
		{
			$validatecount = 1;
		}
		
		$this->set(compact('validatecount'));
	}
	
	
	
	
	
	public function unitaddold($flag=null)
	{
	//	configure::write('debug',2);
		debug($this->data);
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsServiceunit');
		
		$this->loadmodel('BrandsPackage');
		$this->loadModel('BrandsPackagedetail');
		if($this->data['Popupunit']['unit_name'])
		{
			$this->BillingUnit->create();
			$savearray1->data=null;
			$savearray1->data['BillingUnit']['name']=$this->data['Popupunit']['unit_name'];
			$savearray1->data['BillingUnit']['billing_slot_id']=$this->data['Popupunit']['billingslot'];
			$savearray1->data['BillingUnit']['amount']=$this->data['Popupunit']['price_popup'];
			if($this->BillingUnit->save($savearray1->data))
			{
				$this->redirect(array ('action' => 'add'));
			//	$this->render('add');
			}
			
			
		}
		debug($this->data['PopupService']['service_name']);
		if($this->data['PopupService']['service_name'])
		{
			$this->BrandsService->create();
			$savearray1->data=null;
			$savearray1->data['BrandsService']['service_name']=$this->data['PopupService']['service_name'];
			$savearray1->data['BrandsService']['totalcost']=$this->data['totalamountpop'];
			
			
			if($this->BrandsService->save($savearray1->data))
			{
				$last=$this->BrandsService->getLastInsertID();
				if($this->data['PopupService']['unit_name1'])
				{
					$this->BrandsServiceunit->create();
					$saveunit->data=null;
					$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
					$saveunit->data['BrandsServiceunit']['billing_unit_id']=$this->data['PopupService']['unit_name1'];
					$saveunit->data['BrandsServiceunit']['quantity']=$this->data['PopupService']['quantity1'];
					$saveunit->data['BrandsServiceunit']['rate']=$this->data['price_popup1'];
					$saveunit->data['BrandsServiceunit']['total']=$this->data['PopupService']['quantity1']*$this->numberconversion($this->data['price_popup1']);
					debug($saveunit->data);
					$this->BrandsServiceunit->save($saveunit->data);
				}
				if($this->data['PopupService']['unit_name2'])
				{
					$this->BrandsServiceunit->create();
					$saveunit->data=null;
					$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
					$saveunit->data['BrandsServiceunit']['billing_unit_id']=$this->data['PopupService']['unit_name2'];
					$saveunit->data['BrandsServiceunit']['quantity']=$this->data['PopupService']['quantity2'];
					$saveunit->data['BrandsServiceunit']['rate']=$this->data['price_popup2'];
					$saveunit->data['BrandsServiceunit']['total']=$this->data['PopupService']['quantity2']*$this->numberconversion($this->data['price_popup2']);
					debug($saveunit->data);
					$this->BrandsServiceunit->save($saveunit->data);
				}
				if($this->data['unit_name1'])
				{
					foreach($this->data['unit_name1'] as $key=>$val)
					{
						$this->BrandsServiceunit->create();
						$saveunit->data=null;
						$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
						$saveunit->data['BrandsServiceunit']['billing_unit_id']=$val;
						$saveunit->data['BrandsServiceunit']['quantity']=$this->data['quantity1'][$key];
						$saveunit->data['BrandsServiceunit']['rate']=$this->numberconversion($this->data['price_popup'][$key]);
						$saveunit->data['BrandsServiceunit']['total']=$this->data['quantity1'][$key]*$this->numberconversion($this->data['price_popup'][$key]);
						debug($saveunit->data);
						$this->BrandsServiceunit->save($saveunit->data);
					}
					
				}
				$this->render('add');
			}
		}
		
		
		if($this->data['PopupPackage']['package_name'])
		{
			
			
			$this->BrandsPackage->create();
			$savearray1->data=null;
			$savearray1->data['BrandsPackage']['package_name']=$this->data['PopupPackage']['package_name'];
			$savearray1->data['BrandsPackage']['totalcost']=$this->data['totalamountpop'];
			
			if($this->BrandsPackage->save($savearray1->data))
			{
				if($this->data['PopupPackage']['unit_name1'])
				{
					$last=$this->BrandsPackage->getLastInsertID();
					$savearray1->data=null;
					$this->BrandsPackagedetail->create();
					$savearray1->data['BrandsPackagedetail']['brands_package_id']=$last;
					$exp=explode('-',$this->data['PopupPackage']['unit_name1']);
					if($exp[1]=='u')
						{
							$savearray1->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
							$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity1'];
							$savearray1->data['BrandsPackagedetail']['unit_type']='unit';
							$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup1'])*$this->data['PopupPackage']['quantity1'];
					
						}
					if($exp[1]=='s')
						{
							$savearray1->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
							$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity1'];
							$savearray1->data['BrandsPackagedetail']['unit_type']='service';
							$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup1'])*$this->data['PopupPackage']['quantity1'];
					
						}
					$this->BrandsPackagedetail->save($savearray1->data);
				}
				if($this->data['PopupPackage']['unit_name2'])
					{
						$savearray1->data=null;
						$this->BrandsPackagedetail->create();
						$last=$this->BrandsPackage->getLastInsertID();
						$savearray1->data['BrandsPackagedetail']['brands_package_id']=$last;
						$exp=explode('-',$this->data['PopupPackage']['unit_name2']);
						if($exp[1]=='u')
							{
								
								$savearray1->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
								$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity2'];
								$savearray1->data['BrandsPackagedetail']['unit_type']='unit';
								$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup2'])*$this->data['PopupPackage']['quantity2'];
					
							}
						if($exp[1]=='s')
							{
								$savearray1->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
								$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity2'];
								$savearray1->data['BrandsPackagedetail']['unit_type']='service';
								$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup2'])*$this->data['PopupPackage']['quantity2'];
					
							}
						$this->BrandsPackagedetail->save($savearray1->data);
					}
					if($this->data['package_name1'])
					{
						foreach($this->data['package_name1'] as $kp=>$vp)
						{
							$exp=explode('-',$vp);
							if($exp[1]=='u')
							{
								$savearr->data=null;
								$this->BrandsPackagedetail->create();
								$savearr->data['BrandsPackagedetail']['brands_package_id']=$last;
								$savearr->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
								$savearr->data['BrandsPackagedetail']['unit_type']='unit';
								$savearr->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup'][$kp])*$this->data['package_quantity1'][$kp];
								$savearr->data['BrandsPackagedetail']['quantity']=$this->data['package_quantity1'][$kp];
							
							}
							if($exp[1]=='s')
							{
								$savearr->data=null;
								$this->BrandsPackagedetail->create();
								$savearr->data['BrandsPackagedetail']['brands_package_id']=$last;
								$savearr->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
								$savearr->data['BrandsPackagedetail']['unit_type']='service';
								$savearr->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup'][$kp])*$this->data['package_quantity1'][$kp];
								$savearr->data['BrandsPackagedetail']['quantity']=$this->data['package_quantity1'][$kp];
							}
							
							$this->BrandsPackagedetail->save($savearr->data);
						}
					}
			$this->render('add');
			}
	}
				
	
		
		
	}
	public function cost($decideflag=null,$flag = null,$editid=null)
	{
		//configure::write('debug',2);
		debug($this->data);
		
		
		$x=null;$y=null;$z=null;
		
	
		
		
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		
		
		if($this->data['unit_name'])
		{
			if($this->data['type'])
			{
				foreach($this->data['type'] as $k=>$v)
					{
						if($v=='unit')
						{
							
							$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['unit_name'][$k]),'fields'=>array('BillingUnit.amount')));
							$price=$unitdetail['BillingUnit']['amount'];
							$z=1;
						}
						if($v=='service')
						{
							$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['unit_name'][$k]),'fields'=>array('BrandsService.totalcost')));
							$price=$servicedetail['BrandsService']['totalcost'];
							$z=1;
						}
						if($v=='package')
						{
							$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['unit_name'][$k]),'fields'=>array('BrandsPackage.totalcost')));
							$price=$packagedetail['BrandsPackage']['totalcost'];
							$z=1;
						}
					}
			 }
		
		}	
		 
		if($editid)
			{
			 		debug($editid);
			 		if($this->data['AccountsClientinvoice']['type'] && $this->data['AccountsClientinvoice']['unit_name'] && !$this->data['unit_name'][$editid])
						{
							debug($editid);
					 		
								debug($this->data['AccountsClientinvoice']['type'][$editid]);
								if($this->data['AccountsClientinvoice']['type'][$editid]=='unit')
								{
									
									$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['AccountsClientinvoice']['unit_name'][$editid]),'fields'=>array('BillingUnit.amount')));
									$price=$unitdetail['BillingUnit']['amount'];
									debug($price);
									$yz=1;
									$this->set(compact('editid'));
								}
								if($this->data['AccountsClientinvoice']['type'][$editid]=='service')
								{
									$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['AccountsClientinvoice']['unit_name'][$editid]),'fields'=>array('BrandsService.totalcost')));
									$price=$servicedetail['BrandsService']['totalcost'];
									$yz=1;
									$this->set(compact('editid'));
										debug($price);
								}
								if($this->data['AccountsClientinvoice']['type'][$editid]=='package')
								{
									$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['AccountsClientinvoice']['unit_name'][$editid]),'fields'=>array('BrandsPackage.totalcost')));
									$price=$packagedetail['BrandsPackage']['totalcost'];
									$yz=1;
									$this->set(compact('editid'));
										debug($price);
								}
							
			 	
						}
			 		else
			 		{
			 			debug($this->data['unit_name'][$editid]);
			 			if($this->data['AccountsClientinvoice']['type'] && $this->data['unit_name'][$editid] )
			 				{
			 					debug($editid);
			 					foreach($this->data['unit_name'] as $k=>$v)
										{
											debug($this->data['AccountsClientinvoice']['type'][$k]);
											if($this->data['AccountsClientinvoice']['type'][$k]=='unit')
													{
												
														$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v),'fields'=>array('BillingUnit.amount')));
														$price=$unitdetail['BillingUnit']['amount'];
														debug($price);
														$yz=1;
														$this->set(compact('editid'));
													}
											if($this->data['AccountsClientinvoice']['type'][$k]=='service')
													{
														$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v),'fields'=>array('BrandsService.totalcost')));
														$price=$servicedetail['BrandsService']['totalcost'];
														$yz=1;
														$this->set(compact('editid'));
														debug($price);
													}
											if($this->data['AccountsClientinvoice']['type'][$k]=='package')
													{
														$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v),'fields'=>array('BrandsPackage.totalcost')));
														$price=$packagedetail['BrandsPackage']['totalcost'];
														$yz=1;
														$this->set(compact('editid'));
														debug($price);
													}
										}
			 				}
	
			 			
			 		}
			 		
			 		
			 		
			 	}
			 	
			 	
			
			debug($editid);
			
	
		
		
		if($this->data['AccountsClientinvoice']['type1']=='package')
		{
			$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['updateunit_name1']),'fields'=>array('BrandsPackage.totalcost')));
			debug($packagedetail);
			$price1=$packagedetail['BrandsPackage']['totalcost'];
			debug($price1);
			$x=1;
			/*$this->set(compact('x'));*/
		}
		if($this->data['AccountsClientinvoice']['type2']=='package')
		{
			$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['updateunit_name2']),'fields'=>array('BrandsPackage.totalcost')));
			debug($packagedetail);
			$price2=$packagedetail['BrandsPackage']['totalcost'];
			debug($price2);
			$y=1;
			
			/*$this->set(compact('y'));*/
		}
		if($this->data['AccountsClientinvoice']['type1']=='service')
		{
			$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['updateunit_name1']),'fields'=>array('BrandsService.totalcost')));
			$price1=$servicedetail['BrandsService']['totalcost'];
			$x=1;
		/*	$this->set(compact('x'));*/
		}
		if($this->data['AccountsClientinvoice']['type2']=='service')
		{
			$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['updateunit_name2']),'fields'=>array('BrandsService.totalcost')));
			$price2=$servicedetail['BrandsService']['totalcost'];
			$y=1;
			
			/*$this->set(compact('y'));*/
		}
		if($this->data['AccountsClientinvoice']['type1']=='unit')
		{
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['updateunit_name1']),'fields'=>array('BillingUnit.amount')));
			$price1=$unitdetail['BillingUnit']['amount'];
			$x=1;
			/*$this->set(compact('x'));*/
		}
		if($this->data['AccountsClientinvoice']['type2']=='unit')
		{
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['updateunit_name2']),'fields'=>array('BillingUnit.amount')));
			$price2=$unitdetail['BillingUnit']['amount'];
			$y=1;
			
			/*$this->set(compact('y'));*/
		}
		if($this->data['PopupService']['unit_name1'])
		{
			++$flag;
			$this->loadModel('BillingUnit');
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupService']['unit_name1']),'fields'=>array('BillingUnit.amount')));
			$price=$unitdetail['BillingUnit']['amount'];
			$popupservice=1;
		}
		if($this->data['PopupService']['unit_name2'])
		{
			++$flag;
			$this->loadModel('BillingUnit');
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupService']['unit_name2']),'fields'=>array('BillingUnit.amount')));
			$price=$unitdetail['BillingUnit']['amount'];
			$popupservice1=1;
		}
		if($this->data['unit_name1'])
		{
			
			$this->loadModel('BillingUnit');
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['unit_name1'][$flag]),'fields'=>array('BillingUnit.amount')));
			$price=$unitdetail['BillingUnit']['amount'];
			$popupserviceadd=1;
			
		}
		if($this->data['package_name1'])
		{
			
			$this->loadModel('BillingUnit');
			$this->loadModel('BrandsService');
			foreach($this->data['package_name1'] as $kk=>$vv)
			{
				
			
			$exp=explode('-',$vv);
			if($exp[1]=='u')
			{
				$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$exp[0]),'fields'=>array('BillingUnit.amount')));
				$price=$unitdetail['BillingUnit']['amount'];
				debug($price);
			}
			if($exp[1]=='s')
			{
				$servicedetails=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$exp[0]),'fields'=>array('BrandsService.totalcost')));
				$price=$servicedetails['BrandsService']['totalcost'];
				debug($price);
			}
			
			$popuppackageadd=1;
			$this->set(compact('popuppackageadd'));
			}
		}
		if($this->data['PopupPackage']['unit_name1'])
		{
			++$flag;
			$this->loadModel('BillingUnit');
			$this->loadModel('BrandsService');
			$exp=explode('-',$this->data['PopupPackage']['unit_name1']);
			if($exp[1]=='u')
			{
				$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$exp[0]),'fields'=>array('BillingUnit.amount')));
				$price=$unitdetail['BillingUnit']['amount'];
			}
			if($exp[1]=='s')
			{
				$servicedetails=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$exp[0]),'fields'=>array('BrandsService.totalcost')));
				$price=$servicedetails['BrandsService']['totalcost'];
			}
			
			$popuppackage=1;
		}
		if($this->data['PopupPackage']['unit_name2'])
		{
			++$flag;
			$this->loadModel('BillingUnit');
			$this->loadModel('BrandsService');
			$exp=explode('-',$this->data['PopupPackage']['unit_name2']);
			if($exp[1]=='u')
			{
				$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$exp[0]),'fields'=>array('BillingUnit.amount')));
				$price=$unitdetail['BillingUnit']['amount'];
			}
			if($exp[1]=='s')
			{
				$servicedetails=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$exp[0]),'fields'=>array('BrandsService.totalcost')));
				$price=$servicedetails['BrandsService']['totalcost'];
			}
			
			$popuppackage1=1;
		}
	
		if($decideflag==1)
		{
			$y=0;
			$yz=0;
			$z=0;
			$x=1;
			$this->set(compact('x','y','z'));
		}
		if($decideflag==2)
		{
			$y=1;
			$z=0;
			$yz=0;
			$x=0;
			$this->set(compact('x','y','z'));
		}
		if($decideflag==3)
		{
			$y=0;
			$z=1;
			$yz=0;
			$x=0;
			$this->set(compact('x','y','z'));
		}
		if($decideflag==4)
		{
			$y=0;
			$z=0;
			$yz=1;
			$x=0;
			$this->set(compact('x','y','z','yz'));
		}
		
		debug($price);
		debug($x);
		debug($y);
		debug($popupservice);
		$this->set(compact('price1','price2','price','popupservice','popupservice1','flag','popupserviceadd','popuppackage1','popuppackage'));
		
	}
	
	public function addmorepop($flag=null)
	{
		//configure::write('debug',2);
		debug($this->data);
		$flag++;
		$serviceflag=1;
		$this->loadModel('BillingUnit');
		$bilingunit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
		$this->set(compact('flag','bilingunit','serviceflag'));
	}
	
	
	public function addmorepoppack($flag=null)
	{
		//configure::write('debug',2);
		debug($this->data);
		$flag++;
		
		$packageflag=1;
			
			$this->loadModel('BrandsService');
			$this->loadModel('BrandsServiceunit');
			$this->loadModel('BillingUnit');
			$serv=$this->BrandsService->find('all',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			//debug($serv);
			$billingunits = $this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$brands_units = $this->BrandsServiceunit->find('all');
			$final=null;
			foreach($serv as $serv)
			{	
				
				$final[$serv['BrandsService']['id']]['service']=$serv['BrandsService']['service_name'];
				$this->BrandsServiceunit->recursive = 0;
				$brands_units = $this->BrandsServiceunit->find('all',array('conditions'=>array('BrandsServiceunit.brands_service_id'=>$serv['BrandsService']['id'])));
				$j=0;
				foreach($brands_units as $brands_unit){
					$final[$serv['BrandsService']['id']]['units'][$brands_unit['BillingUnit']['id']]=$brands_unit['BillingUnit']['name'];
				/*	if($brands_unit['BrandsServiceunit']['brands_service_id'] == $k){
						$unit[$k.'s'] = $v;
						foreach($billingunits as $k1 => $v1){
							if($brands_unit['BrandsServiceunit']['billing_unit_id'] == $k1){
								//$u = $this->BillingUnit->find('first',array('BillingUnit.id'=>$k1));
								$unit[$k1.'u']= '-'.$v1;
							}
						}
					}*/
					$j++;
				}
			
				/*//debug($brands_units);
				foreach($billingunits as $k1 => $v1){
					foreach($brands_units as $brands_unit){
						debug($brands_unit);
						if(($brands_unit['BrandsServiceunit']['billing_unit_id'] == $k1) && ($brands_unit['BrandsServiceunit']['brands_service_id'] == $k)){
						$unit[$k1] = $v;
						}
					}
				}*/
				//debug($k);
			//	debug($v);
				/*foreach($units as $value){
					$unit[$k]['units']=$value['BrandsServiceunit']['id'];
				}
				*/
				//$servunit[$k]['units']=$units['BrandsServiceunit']['']
				
			}
			
				debug($final);
				$i=1;
				foreach($final as $key => $value){
					$unit[$key."-s"] = $value['service'];
					foreach($value['units'] as $key1 => $val1){
						debug($key1."-u");
						debug($unit);
						foreach($unit as $key2=>$val2){
							if($key2 == $key1."-u"){
							debug("xyz");
							$unit[$key1."-u"."-".$i] = "|--".$val1;
							
							$i++;
						}else{
							$unit[$key1."-u"] = "|--".$val1;
							debug("1234");
						}
						}
						
						
					}
				}
				
				
				
					
			/*foreach($final as $key => $value){
				$unit[$value['service'].'---'.'s'.'---'.$key] = $value['service'];
				//$unit[$key] = $value['service'];
				
				foreach($value['units'] as $key1 => $val1){
					if(in_array($key1,$unit[$val1."---".'u'.'---'.$key1])){
						$unit[$val1."---".'u'.'---'.$key1."---"."key"] = $val1;
					}else{
						$unit[$val1."---".'u'.'---'.$key1] = '------'.$val1;
					}
					
//					/$unit[$key1][$key] = '--'.$val1;
				}
			}*/
				/*if($value['units']){
					foreach($value['units'] as $key1 => $val1){
						if(in_array($key1,$unit[$key1]))
						{
						$unit[$key1.'-u'] = '--'.$val1;
						}
						else
						{
							$unit[$key1] = '--'.$val1;
						}
					}
				}*/
			
			debug($unit)	;
				
				
		
			//debug($servunits);
			//$unit=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$disp=1;
			$both=1;
			//$unit=$final;
			//debug($unit);
			$this->set(compact('unit','disp','flag','both','popupunit','packageflag'));
		
		
	}
	
	
	
	public function overlayservice() {
		Configure :: write('debug', 2);
		debug($this->data);

	}
	public function overlaypackage() {
		Configure :: write('debug', 2);
		debug($this->data);

	}

	public function brands_client() {
		$this->loadModel('Brand');
		$brands = $this->Brand->find('list', array (
			'fields' => array (
				'Brand.id',
				'Brand.brandname'
			),
			'conditions' => array (
				'Brand.company_id' => $this->data['Client']['company_id']
			)
		));
		$this->set(compact('brands'));
	}
	/**
	 * edit method
	 *
	 * @param string $id
	 * @return void
	 */
	 
	 
	 
	 
	 public function edit($id = null) 
	{
		/*Configure::write('debug',2);	
		debug($this->data);*/
		$this->BrandsEstimate->id = $id;
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsPackagedetail');
		$this->loadModel('BrandsEstimatedetail');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$estimate_details = $this->BrandsEstimate->find('first', array (
						'conditions' => array (
							'BrandsEstimate.id' => $id
						)
					));
					
					
		$this->loadModel('Currency');
		$curr_id = $estimate_details['BrandsEstimate']['currency_id'];
		$currency_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$estimate_details['BrandsEstimate']['currency_id'])));
		$symbol = $currency_details['Currency']['symbol'];
		
		
		$this->set(compact('symbol'));
					
		if($this->data)
		{
			debug($this->data['BrandsEstimate']['client_id']);
			debug($this->data['BrandsEstimate']['estimate_name']);
			if($this->data['BrandsEstimate']['client_id'] && $this->data['BrandsEstimate']['estimate_name'])
			{
				debug();
				if($this->request->is('post'))
				{
					debug();
					$this->BrandsEstimate->create();
					$save->data = null;
					
					$save->data['BrandsEstimate']['company_id'] = $this->data['BrandsEstimate']['company_id'];
					$save->data['BrandsEstimate']['brand_id'] = $this->data['BrandsEstimate']['brand_id'];
					$save->data['BrandsEstimate']['currency_id']= $estimate_details['BrandsEstimate']['currency_id'];
					$save->data['BrandsEstimate']['client_id'] = $this->data['BrandsEstimate']['client_id'];
					$save->data['BrandsEstimate']['estimate_name'] = $this->data['BrandsEstimate']['estimate_name'];
					$save->data['BrandsEstimate']['estimate_date'] = date('Y-m-d', strtotime($this->data['BrandsEstimate']['date']));
					$save->data['BrandsEstimate']['description'] = $this->data['BrandsEstimate']['description'];
					$save->data['BrandsEstimate']['active'] = 'Y';
					$save->data['BrandsEstimate']['status'] = 'Draft';
					$save->data['BrandsEstimate']['customer_notes'] = $this->data['BrandsEstimate']['customer_notes'];
					$save->data['BrandsEstimate']['terms'] = $this->data['BrandsEstimate']['terms'];
					
					$some = null;
					$x = 0;
					foreach ($this->data as $key => $value) 
					{
						$quantity = 0;
						foreach ($this->data[$x]['BrandsEstimate']['quantity'] as $q1 => $q2) 
						{
							$quantity = $q2; 
						}
						$rate = 0;
						foreach ($this->data[$x]['BrandsEstimate']['rate'] as $r1 => $r2) 
						{
							$rate = $r2;
							
						}
						$discount = 0;
						foreach ($this->data[$x]['BrandsEstimate']['discount'] as $d1 => $d2) 
						{
							$discount = $d2;
						}
						$tax = 0;
						foreach ($this->data[$x+1]['BrandsEstimate']['tax'] as  $t1 => $t2)
						{
							debug($t2);
							$tax = 	$t2;
							debug($tax);			
						}		
							debug($tax);			
										
						debug($quantity);
						$sub_total += (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						
						$price = (($quantity * $rate) - (($discount *$quantity * $rate) / 100));
						$discount_price += (($quantity *$rate) -$price );
						debug($price);
						$tax_exp = explode('-',$tax);
						debug($tax);
						$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax)));
						debug($tax_details);
						$tax_percent = $tax_details['AccountsTax']['percent'];
						if(!$tax_exp[1]) // For individual taxes
						{
							debug($price);
							debug($tax_percent);
							$taxx1 += ($price * $tax_percent)/100;
							debug($taxx1);
						}
						
						
						elseif($tax_exp[1])// For group taxes
						{
							$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp[1])));
							debug($tax_grp_details);
							if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
							$compounded = "Y";
							else
							$compounded = "N";
							if($compounded == "Y")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								$tax_flag = 0;
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									if($tax_flag == 0)
									{
										debug($amt);
										$tax_price1 = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price1);
										$amt += $tax_price1 ;
									}
													
													
									else
									{
										$tax_price2 = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price2);
									}
									++$tax_flag;
												
								}
								debug($tax_price1);
								
								debug($tax_price2);
								$taxx2 += $tax_price1 + 		$tax_price2;	
							}	
							
							if($compounded == "N")
							{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = $price;
								debug($amt);
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									$taxx3 += (($amt * $tax_values['AccountsTax']['percent'])/100);
									debug($taxx3);
								}
												
							}
										
							
						}
						
						$x++;
					}
					debug($taxx2);
					debug($taxx3);
					$taxx = $taxx1 + $taxx2 + $taxx3;
					debug($taxx);
					$save->data['BrandsEstimate']['id'] = $id;
					$save->data['BrandsEstimate']['active'] = $this->data['BrandsEstimate']['active'];
					$save->data['BrandsEstimate']['totalcost'] = $sub_total;
					$save->data['BrandsEstimate']['discount'] = $discount_price;
					$save->data['BrandsEstimate']['totaltax'] = $taxx;
					
					$save->data['BrandsEstimate']['net'] = $sub_total + $taxx;
					
					debug($save->data);
					$this->BrandsEstimate->save($save->data);
					$save_flag = 1;
					
					
					// For estimate details
					$y = 0;
					$details_of_estimate = $this->BrandsEstimatedetail->find('all', array (
						'conditions' => array (
							'BrandsEstimatedetail.brands_estimate_id' => $id
						)
					));
					debug($details_of_estimate);
					foreach($details_of_estimate as $ed => $ed2)
					{
						if($this->BrandsEstimatedetail->deleteAll(array('BrandsEstimatedetail.brands_estimate_id'=>$id)));
					}
					foreach ($this->data as $key2 => $value2) 
					{
						debug($this->data[$y]['BrandsEstimate']['description']);
						
						foreach($this->data[$y]['BrandsEstimate']['description'] as $dd1 => $dd2)
						{
							if(!$dd2)
							$flagdesc = "no_desc";
							if($dd2)
							$flagdesc = "yes_desc";
						}
						
						
						
						foreach ($this->data[$y]['BrandsEstimate']['description'] as $desc1 => $desc2) 
						{
							$desc = explode('-',$desc1);
							debug($desc);
							debug($this->data[$y]['BrandsEstimate']['quantity']);
							foreach ($this->data[$y]['BrandsEstimate']['quantity'] as $q11 => $q22) 
							{
								foreach ($this->data[$y]['BrandsEstimate']['rate'] as $r11 => $r22) 
								{
									foreach ($this->data[$y]['BrandsEstimate']['discount'] as $d11 => $d22) 
									{
										foreach ($this->data[$y+1]['BrandsEstimate']['tax'] as $t11 => $t22) 
										{
										/*foreach ($this->data[$y]['BrandsEstimate']['tax'] as $t11 => $t22) 
										{*/
											
											
											$tax_details2 = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $t22)));
											$tax_percent2 = $tax_details2['AccountsTax']['percent'];
											$tax_exp2 = explode('-',$t22);
											
											$sub2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
											
											
											if($tax_exp2[1])  // For group taxes
											{
												$price2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
													$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$tax_exp2[1])));
													debug($tax_grp_details);
													if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
													$compounded = "Y";
													else
													$compounded = "N";
													
													
													if($compounded == "Y")
													{
														$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
														debug($tax_mappings_details);
														
														$amt = ($q22 * $r22)-(($d22 * $q22 * $r22) / 100);
														debug($amt);
														$tax_flag = 0;
														foreach($tax_mappings_details as $tax1 => $tax2)
														{
															$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
															debug($tax_values);
															if($tax_flag == 0)
															{
																debug($amt);
																$tax_price1 = (($amt * $tax_values['AccountsTax']['percent'])/100);
																debug($tax_price1);
																$amt += $tax_price1 ;
															}
															
															
															else
															{
																$tax_price2 = (($amt * $tax_values['AccountsTax']['percent'])/100);
																debug($tax_price2);
															}
															++$tax_flag;
														}
														debug($tax_price1);
														debug($tax_price2);
														$taxx = $tax_price1 + $tax_price2;
												
									
													}
								
								
													if($compounded == "N")
													{
														$taxx = null;
														$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
														debug($tax_mappings_details);
														$amt = ($q22 * $r22)-(($d22 * $q22 * $r22) / 100);
														debug($amt);
															foreach($tax_mappings_details as $tax1 => $tax2)
															{
																$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
																debug($tax_values);
																debug($amt);
																
																$taxx += (($amt * $tax_values['AccountsTax']['percent'])/100);
																debug($taxx);
															}
														
													}
												
											
											}
											
										
											if(!$tax_exp2[1]) // For individual taxes
											{
												$price2 = (($q22 * $r22) - (($d22 * $q22 * $r22) / 100));
												$taxx = ($price2 * $tax_percent2)/100;
												
												
											}
											
											
											debug($taxx);
											$insertId = $this->BrandsEstimate->getLastInsertId();
											$this->BrandsEstimatedetail->create();
											$estimate_details_save->data = null;
											$estimate_details_save->data['BrandsEstimatedetail']['brands_estimate_id'] = $insertId;
											
											if ($desc[1] == "s") 
											{
												debug($desc2);
												$estimate_details_save->data['BrandsEstimatedetail']['unit_type'] = "service";
												$estimate_details_save->data['BrandsEstimatedetail']['brands_package_id'] = '0';
												$estimate_details_save->data['BrandsEstimatedetail']['billing_unit_id'] = '0';
												$estimate_details_save->data['BrandsEstimatedetail']['brands_service_id'] = $desc[0];
												$estimate_details_save->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											elseif ($desc[1] == "p") 
											{
												debug($desc2);
												$estimate_details_save->data['BrandsEstimatedetail']['unit_type'] = "package";
												$estimate_details_save->data['BrandsEstimatedetail']['brands_package_id'] = $desc[0];
												$estimate_details_save->data['BrandsEstimatedetail']['billing_unit_id'] = '0';
												$estimate_details_save->data['BrandsEstimatedetail']['brands_service_id'] = '0';
												$estimate_details_save->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											elseif ($desc[1] == "u") 
											{
												debug($desc2);
												$estimate_details_save->data['BrandsEstimatedetail']['unit_type'] = "unit";
												$estimate_details_save->data['BrandsEstimatedetail']['billing_unit_id'] = $desc[0];
												$estimate_details_save->data['BrandsEstimatedetail']['brands_package_id'] = '0';
												$estimate_details_save->data['BrandsEstimatedetail']['brands_service_id'] = '0';
												$estimate_details_save->data['BrandsEstimatedetail']['description'] = $desc2;
											}
											
											
											if(!$tax_exp2[1]) // For saving tax_id
											{
												debug($t22);
												$estimate_details_save->data['BrandsEstimatedetail']['account_tax_id'] = $t22;
												$estimate_details_save->data['BrandsEstimatedetail']['accounts_taxgroup_id'] = '0';
											}
											
											elseif($tax_exp2[1])// For saving group_tax_id
											{
												debug($tax_exp2[1]);
												$estimate_details_save->data['BrandsEstimatedetail']['accounts_taxgroup_id'] =$tax_exp2[1] ;
												$estimate_details_save->data['BrandsEstimatedetail']['account_tax_id'] = '0';
											}
											
											$estimate_details_save->data['BrandsEstimatedetail']['brands_estimate_id']= $id;
											$estimate_details_save->data['BrandsEstimatedetail']['quantity'] = $q22;
											$estimate_details_save->data['BrandsEstimatedetail']['active'] = 'Y';
											$estimate_details_save->data['BrandsEstimatedetail']['discount'] = $d22;
											$estimate_details_save->data['BrandsEstimatedetail']['totalcost'] = $sub2;
											$estimate_details_save->data['BrandsEstimatedetail']['tax'] = $taxx;
											$estimate_details_save->data['BrandsEstimatedetail']['netcost'] = $taxx+$sub2;

										}
									}
								}
							}
						}
						
					
						
						
						
						
						
						$y++;
						$this->BrandsEstimatedetail->save($estimate_details_save->data);
						$save_flag = 1;
						
					}
					$this->Session->setFlash(__('Estimate has been saved'));
					$this->redirect(array ('action' => 'index',1));
					
					
					
				}
			}
			
			else
			{
				
				//List +error flash
				
				if(!$this->data['BrandsEstimate']['client_id'])
				$this->Session->setFlash(__('<div class="flashMessageError">Please select any client</div>'));
				if(!$this->data['BrandsEstimate']['estimate_name'])
				$this->Session->setFlash(__('<div class="flashMessageError">Please enter the estimate name</div>'));
		
				
				//list
					$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				foreach ($tax_groups_details as $t1 => $t2) 
					{
						$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						foreach($tax_mappings as $m1 => $m2)
						{
							$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
							foreach($taxname as $name1 => $name2)
							{
								$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								
								$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
								
								$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								
								
							}
						}
					}
					ksort($final_taxes);
					debug($final_taxes); 
					//debug($final_taxes2); 
					$var = 0;		
					
					foreach($final_taxes as $f1 => $f2)
					{
						if(is_array($f2))
						{
							$name_exp = explode('-',$f1);
							$list[$f1] = $name_exp[0];
							foreach($f2 as $v1 => $v2)
							{
								debug($v2);
								foreach($v2 as $id1 => $name1)
								{
									//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
									$list[$f1.$id1]='|--'.$name1;
								}
							}
						}
						
						else
							$list[$f1] = $f2;
						
						
					}
					debug($list);
					
					if(!$tax_groups_details)
					{
					//	$only_taxes = $this->AccountsTax->find('list', array ('fields' => array ('AccountsTax.id','AccountsTax.name')));
						$only_taxes2 = $this->AccountsTax->find('all');
						foreach($only_taxes2 as $o1 => $o2)
						{
							$only_taxes[$o2['AccountsTax']['id']] = $o2['AccountsTax']['name'].'-'.$o2['AccountsTax']['percent'].'%';
						}
					}
					
					debug($only_taxes);
		
					
					$this->set(compact('list','only_taxes'));
					
					
					
					
					$clients = $this->Client->find('list', array (
						'fields' => array (
							'Client.id',
							'Client.client_companyname'
						),
						'order' => 'Client.client_companyname ASC'
					));
					$this->loadModel('Company');
					$companies = $this->Company->find('list', array (
						'fields' => array (
							'Company.id',
							'Company.companyname'
						),
						'order' => 'Company.companyname ASC'
					));
			
			
					$brand_list = $this->Brand->find('list', array (
						'fields' => array (
							'Brand.id',
							'Brand.brandname'
						),
						'order' => 'Brand.brandname ASC'
					));
					
					
					$active = $estimate_details['BrandsEstimate']['active'];
					$est_name = $estimate_details['BrandsEstimate']['estimate_name'];
					$comp_est = $estimate_details['BrandsEstimate']['company_id'];
					$sub_total = $estimate_details['BrandsEstimate']['totalcost'];
					$service_tax = $estimate_details['BrandsEstimate']['totaltax'];
					$net = $estimate_details['BrandsEstimate']['net'];
					$notes = $estimate_details['BrandsEstimate']['customer_notes'];
					$terms = $estimate_details['BrandsEstimate']['terms'];
					$estimate_date = $estimate_details['BrandsEstimate']['estimate_date'];
					$def_client =  $estimate_details['BrandsEstimate']['client_id'];
					$def_notes = $estimate_details['BrandsEstimate']['customer_notes'];
					$def_terms = $estimate_details['BrandsEstimate']['terms'];
					$this->set(compact('def_notes','def_terms'));
					$this->set(compact('def_client'));
					$client = $this->Client->find('first', array (
						'conditions' => array (
							'Client.id' => $estimate_details['BrandsEstimate']['client_id']
						)
					));
					$clientname = $client['Client']['client_companyname'];
			
					$comp = $this->Company->find('first', array (
						'conditions' => array (
							'Company.id' => $estimate_details['BrandsEstimate']['company_id']
						)
					));
					//	debug($comp);
					$companyname = $comp['Company']['companyname'];
			
					$brand = $this->Brand->find('first', array (
						'conditions' => array (
							'Brand.id' => $estimate_details['BrandsEstimate']['brand_id']
						)
					));
					$brandname = $brand['Brand']['id'];
					//		debug($brandname);
			
					// Details from BrandsEstimatedetail
			
					$details_of_estimate = $this->BrandsEstimatedetail->find('all', array (
						'conditions' => array (
							'BrandsEstimatedetail.brands_estimate_id' => $id
						)
					));
					debug($details_of_estimate);
					foreach ($details_of_estimate as $key => $value) 
					{
						$grp_name = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
							
						
						if ($value['BrandsEstimatedetail']['brands_service_id']) 
						{
							$service_items = $this->BrandsService->find('list', array ('fields' => array ('BrandsService.id','BrandsService.service_name'),'order' => array ('BrandsService.service_name ASC')));
							$service_details = $this->BrandsService->find('first', array ('conditions' => array ('BrandsService.id' => $value['BrandsEstimatedetail']['brands_service_id'])));
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['item_name'] = $service_details['BrandsService']['service_name'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['description'] = $value['BrandsEstimatedetail']['description'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
			
							if($value['BrandsEstimatedetail']['account_tax_id']) // Individual
							{
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxid'] = $value['BrandsEstimatedetail']['account_tax_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxgroupid'] = '0';
								
							}
							
							if($value['BrandsEstimatedetail']['accounts_taxgroup_id']) // Grp
							{
								
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxgroupid'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxid'] = '0';
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['grp_name'] = $grp_name['AccountsTaxgroup']['groupname'];
							}
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['id'] = $value['BrandsEstimatedetail']['brands_service_id'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['type'] = "service";
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['type2'] = "Service";
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['pass_id'] = $value['BrandsEstimatedetail']['brands_service_id'].'-s';
							
						}
						if ($value['BrandsEstimatedetail']['brands_package_id']) 
						{
							
							$package_items = $this->BrandsPackage->find('list', array ('fields' => array ('BrandsPackage.id','BrandsPackage.package_name'),'order' => array ('BrandsPackage.package_name ASC')));
							$package_details = $this->BrandsPackage->find('first', array ('conditions' => array ('BrandsPackage.id' => $value['BrandsEstimatedetail']['brands_package_id'])));
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['item_name'] = $package_details['BrandsPackage']['package_name'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['description'] = $value['BrandsEstimatedetail']['description'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
							
							
							if($value['BrandsEstimatedetail']['account_tax_id'])
							{
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxid'] = $value['BrandsEstimatedetail']['account_tax_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxgroupid'] = '0';
								
							
							}
							
							elseif($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
							{
								
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxgroupid'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxid'] = '0';
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['grp_name'] = $grp_name['AccountsTaxgroup']['groupname'];
							}
							
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['id'] = $value['BrandsEstimatedetail']['brands_package_id'] ;
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['type'] = "package";
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['type2'] = "Package";
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['pass_id'] = $value['BrandsEstimatedetail']['brands_package_id'].'-p';
						}
						if ($value['BrandsEstimatedetail']['billing_unit_id']) 
						{
							$unit_items = $this->BillingUnit->find('list', array ('fields' => array ('BillingUnit.id','BillingUnit.name'),'order' => array ('BillingUnit.name ASC')));
							$unit_details = $this->BillingUnit->find('first', array ('conditions' => array ('BillingUnit.id' => $value['BrandsEstimatedetail']['billing_unit_id'])));
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['item_name'] = $unit_details['BillingUnit']['name'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['description'] = $value['BrandsEstimatedetail']['description'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
							
							if($value['BrandsEstimatedetail']['account_tax_id'])
							{
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxid'] = $value['BrandsEstimatedetail']['account_tax_id'];
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxgroupid'] = '0';
							}
							
							elseif($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
							{
								
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxgroupid'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'];
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxid'] = '0';
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['grp_name'] = $grp_name['AccountsTaxgroup']['groupname'];
							}
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['id'] = $value['BrandsEstimatedetail']['billing_unit_id'] ;
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['type'] = "unit";
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['type2'] = "Unit";
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['pass_id'] = $value['BrandsEstimatedetail']['billing_unit_id'].'-u';
						}
						
						
						
						
							if($value['BrandsEstimatedetail']['account_tax_id']) // Individual
							{
								$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $value['BrandsEstimatedetail']['account_tax_id'])));
								debug($tax_details);
								$tax_percent = $tax_details['AccountsTax']['percent'];
								$price = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);
								debug($tax_percent);
								$taxx1[$tax_details['AccountsTax']['name']] += ($price * $tax_percent)/100;
								debug($taxx1);
								foreach($taxx1 as $qe => $qw)
								{
									if($qw!=0)
									{
										$taxx12[$qe] = $qw;
									}
								}
								$multiple = 1;
								$type = "Individual";
								
							}
							
							if($value['BrandsEstimatedetail']['accounts_taxgroup_id']) // Grp
							{
								$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
								debug($tax_grp_details);
								if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
								$compounded = "Y";
								else
								$compounded = "N";
								if($compounded == "Y")
								{
											$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
											debug($tax_mappings_details);
											$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
											debug($amt);
											$tax_flag = 0;
											foreach($tax_mappings_details as $tax1 => $tax2)
											{
												$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
												debug($tax_values);
												if($tax_flag == 0)
												{
													debug($amt);
													$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													
													$tax_price1[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													debug($tax_price1);
													foreach($tax_price1 as $h1 => $h2){
														$amt += $h2 ;
													}
												}
																
																
												else
												{
													$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													
													$tax_price2[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													debug($tax_price2);
												}
												++$tax_flag;
															
											}
											debug($tax_price1);
											
											debug($tax_price2);
											debug($finaltax_price);
											foreach($finaltax_price as $ft1 => $ft2)
											{
												if($ft2!=0)
												{
													
													$finaltax_price1[$ft1] += $ft2;
												}
											}
										//	$taxx2[$tax_details['AccountsTax']['name']] += $tax_price1 + $tax_price2;	
										
										$type = "CompY";
								}	
										
								if($compounded == "N")
								{
									$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
									debug($tax_mappings_details);
									$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
									debug($amt);
									foreach($tax_mappings_details as $tax1 => $tax2)
									{
												$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
												debug($tax_values);
												$finaltax_price2[$tax_values['AccountsTax']['name']] += (($amt * $tax_values['AccountsTax']['percent'])/100);
											//	debug($taxx3);
									}
											
											$type = "CompN";				
								}
													
										$multiple = 0;
								
						}
			
					}
					debug($final_values);
					debug($taxx12);
					debug($finaltax_price1);
					debug($finaltax_price2);
					
					
					
					
					foreach($taxx12 as $k1 => $v1)
								{
									$finalTTT[$k1] = $finalTTT[$k1]+$v1;
								}
								
								foreach($finaltax_price1 as $k2 => $v2)
								{
									$finalTTT[$k2] = $finalTTT[$k2]+$v2;
								}
								
								foreach($finaltax_price2 as $k3 => $v3)
								{
									$finalTTT[$k3] = $finalTTT[$k3]+$v3;
								}
								
								debug($finalTTT);
					
					
			}
		}
		
		else
		{
			//list
			
					$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				foreach ($tax_groups_details as $t1 => $t2) 
					{
						$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						foreach($tax_mappings as $m1 => $m2)
						{
							$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
							foreach($taxname as $name1 => $name2)
							{
								$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								
								$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
								
								$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
								
								
							}
						}
					}
					ksort($final_taxes);
					debug($final_taxes); 
					//debug($final_taxes2); 
					$var = 0;		
					
					foreach($final_taxes as $f1 => $f2)
					{
						if(is_array($f2))
						{
							$name_exp = explode('-',$f1);
							$list[$f1] = $name_exp[0];
							foreach($f2 as $v1 => $v2)
							{
								debug($v2);
								foreach($v2 as $id1 => $name1)
								{
									//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
									$list[$f1.$id1]='|--'.$name1;
								}
							}
						}
						
						else
							$list[$f1] = $f2;
						
						
					}
					debug($list);
					
					if(!$tax_groups_details)
					{
					//	$only_taxes = $this->AccountsTax->find('list', array ('fields' => array ('AccountsTax.id','AccountsTax.name')));
						$only_taxes2 = $this->AccountsTax->find('all');
						foreach($only_taxes2 as $o1 => $o2)
						{
							$only_taxes[$o2['AccountsTax']['id']] = $o2['AccountsTax']['name'].'-'.$o2['AccountsTax']['percent'].'%';
						}
					}
					
					debug($only_taxes);
		
					
					$this->set(compact('list','only_taxes'));
					
					
					
					
					$clients = $this->Client->find('list', array (
						'fields' => array (
							'Client.id',
							'Client.client_companyname'
						),
						'order' => 'Client.client_companyname ASC'
					));
					$this->loadModel('Company');
					$companies = $this->Company->find('list', array (
						'fields' => array (
							'Company.id',
							'Company.companyname'
						),
						'order' => 'Company.companyname ASC'
					));
			
			
					$brand_list = $this->Brand->find('list', array (
						'fields' => array (
							'Brand.id',
							'Brand.brandname'
						),
						'order' => 'Brand.brandname ASC'
					));
					
					$estimate_details = $this->BrandsEstimate->find('first', array (
						'conditions' => array (
							'BrandsEstimate.id' => $id
						)
					));
				//	$comps = $this->Company->find('first',array('conditions'=>array('Company.id'=>)));
					$active = $estimate_details['BrandsEstimate']['active'];
					
					$est_name = $estimate_details['BrandsEstimate']['estimate_name'];
					$comp_est = $estimate_details['BrandsEstimate']['company_id'];
					$sub_total = $estimate_details['BrandsEstimate']['totalcost'];
					$service_tax = $estimate_details['BrandsEstimate']['totaltax'];
					$net = $estimate_details['BrandsEstimate']['net'];
					$notes = $estimate_details['BrandsEstimate']['customer_notes'];
					$terms = $estimate_details['BrandsEstimate']['terms'];
					$estimate_date = $estimate_details['BrandsEstimate']['estimate_date'];
					$def_client =  $estimate_details['BrandsEstimate']['client_id'];
					$def_notes = $estimate_details['BrandsEstimate']['customer_notes'];
					$def_terms = $estimate_details['BrandsEstimate']['terms'];
					$this->set(compact('def_notes','def_terms'));
					$this->set(compact('def_client'));
					$client = $this->Client->find('first', array (
						'conditions' => array (
							'Client.id' => $estimate_details['BrandsEstimate']['client_id']
						)
					));
					$clientname = $client['Client']['client_companyname'];
			
					$comp = $this->Company->find('first', array (
						'conditions' => array (
							'Company.id' => $estimate_details['BrandsEstimate']['company_id']
						)
					));
					//	debug($comp);
					$companyname = $comp['Company']['companyname'];
			
					$brand = $this->Brand->find('first', array (
						'conditions' => array (
							'Brand.id' => $estimate_details['BrandsEstimate']['brand_id']
						)
					));
					$brandname = $brand['Brand']['id'];
					//		debug($brandname);
			
					// Details from BrandsEstimatedetail
			
					$details_of_estimate = $this->BrandsEstimatedetail->find('all', array (
						'conditions' => array (
							'BrandsEstimatedetail.brands_estimate_id' => $id
						)
					));
					debug($details_of_estimate);
					foreach ($details_of_estimate as $key => $value) 
					{
						$grp_name = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
							
						
						if ($value['BrandsEstimatedetail']['brands_service_id']) 
						{
							$service_items = $this->BrandsService->find('list', array ('fields' => array ('BrandsService.id','BrandsService.service_name'),'order' => array ('BrandsService.service_name ASC')));
							$service_details = $this->BrandsService->find('first', array ('conditions' => array ('BrandsService.id' => $value['BrandsEstimatedetail']['brands_service_id'])));
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['item_name'] = $service_details['BrandsService']['service_name'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['description'] = $value['BrandsEstimatedetail']['description'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
			
							if($value['BrandsEstimatedetail']['account_tax_id']) // Individual
							{
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxid'] = $value['BrandsEstimatedetail']['account_tax_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxgroupid'] = '0';
								/*$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $value['BrandsEstimatedetail']['account_tax_id'])));
								debug($tax_details);
								$tax_percent = $tax_details['AccountsTax']['percent'];
								$price = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);
								debug($tax_percent);
								$taxx1[$tax_details['AccountsTax']['name']] += ($price * $tax_percent)/100;
								debug($taxx1);
								foreach($taxx1 as $qe => $qw)
								{
									if($qw!=0)
									{
										$taxx12[$qe] = $qw;
									}
								}
								$multiple = 1;
								$type = "Individual";
								*/
							}
							
							if($value['BrandsEstimatedetail']['accounts_taxgroup_id']) // Grp
							{
								
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxgroupid'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['taxid'] = '0';
								$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['grp_name'] = $grp_name['AccountsTaxgroup']['groupname'];
							}
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['id'] = $value['BrandsEstimatedetail']['brands_service_id'];
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['type'] = "service";
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['type2'] = "Service";
							$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['pass_id'] = $value['BrandsEstimatedetail']['brands_service_id'].'-s';
							
						}
						if ($value['BrandsEstimatedetail']['brands_package_id']) 
						{
							
							$package_items = $this->BrandsPackage->find('list', array ('fields' => array ('BrandsPackage.id','BrandsPackage.package_name'),'order' => array ('BrandsPackage.package_name ASC')));
							$package_details = $this->BrandsPackage->find('first', array ('conditions' => array ('BrandsPackage.id' => $value['BrandsEstimatedetail']['brands_package_id'])));
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['item_name'] = $package_details['BrandsPackage']['package_name'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['description'] = $value['BrandsEstimatedetail']['description'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
							
							
							if($value['BrandsEstimatedetail']['account_tax_id'])
							{
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxid'] = $value['BrandsEstimatedetail']['account_tax_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxgroupid'] = '0';
								
							
							}
							
							elseif($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
							{
								
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxgroupid'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'];
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['taxid'] = '0';
								$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['grp_name'] = $grp_name['AccountsTaxgroup']['groupname'];
							}
							
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['id'] = $value['BrandsEstimatedetail']['brands_package_id'] ;
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['type'] = "package";
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['type2'] = "Package";
							$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['pass_id'] = $value['BrandsEstimatedetail']['brands_package_id'].'-p';
						}
						if ($value['BrandsEstimatedetail']['billing_unit_id']) 
						{
							$unit_items = $this->BillingUnit->find('list', array ('fields' => array ('BillingUnit.id','BillingUnit.name'),'order' => array ('BillingUnit.name ASC')));
							$unit_details = $this->BillingUnit->find('first', array ('conditions' => array ('BillingUnit.id' => $value['BrandsEstimatedetail']['billing_unit_id'])));
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['item_name'] = $unit_details['BillingUnit']['name'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['description'] = $value['BrandsEstimatedetail']['description'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
							
							if($value['BrandsEstimatedetail']['account_tax_id'])
							{
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxid'] = $value['BrandsEstimatedetail']['account_tax_id'];
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxgroupid'] = '0';
							}
							
							elseif($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
							{
								
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxgroupid'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'];
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['taxid'] = '0';
								$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['grp_name'] = $grp_name['AccountsTaxgroup']['groupname'];
							}
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['id'] = $value['BrandsEstimatedetail']['billing_unit_id'] ;
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['type'] = "unit";
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['type2'] = "Unit";
							$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['pass_id'] = $value['BrandsEstimatedetail']['billing_unit_id'].'-u';
						}
						
						
						
						
							if($value['BrandsEstimatedetail']['account_tax_id']) // Individual
							{
								$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $value['BrandsEstimatedetail']['account_tax_id'])));
								debug($tax_details);
								$tax_percent = $tax_details['AccountsTax']['percent'];
								$price = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);
								debug($tax_percent);
								$taxx1[$tax_details['AccountsTax']['name']] += ($price * $tax_percent)/100;
								debug($taxx1);
								foreach($taxx1 as $qe => $qw)
								{
									if($qw!=0)
									{
										$taxx12[$qe] = $qw;
									}
								}
								$multiple = 1;
								$type = "Individual";
								
							}
							
							if($value['BrandsEstimatedetail']['accounts_taxgroup_id']) // Grp
							{
								$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
								debug($tax_grp_details);
								if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
								$compounded = "Y";
								else
								$compounded = "N";
								if($compounded == "Y")
								{
											$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
											debug($tax_mappings_details);
											$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
											debug($amt);
											$tax_flag = 0;
											foreach($tax_mappings_details as $tax1 => $tax2)
											{
												$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
												debug($tax_values);
												if($tax_flag == 0)
												{
													debug($amt);
													$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													
													$tax_price1[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													debug($tax_price1);
													foreach($tax_price1 as $h1 => $h2){
														$amt += $h2 ;
													}
												}
																
																
												else
												{
													$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													
													$tax_price2[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
													debug($tax_price2);
												}
												++$tax_flag;
															
											}
											debug($tax_price1);
											
											debug($tax_price2);
											debug($finaltax_price);
											foreach($finaltax_price as $ft1 => $ft2)
											{
												if($ft2!=0)
												{
													
													$finaltax_price1[$ft1] += $ft2;
												}
											}
										//	$taxx2[$tax_details['AccountsTax']['name']] += $tax_price1 + $tax_price2;	
										
										$type = "CompY";
								}	
										
								if($compounded == "N")
								{
									$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
									debug($tax_mappings_details);
									$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
									debug($amt);
									foreach($tax_mappings_details as $tax1 => $tax2)
									{
												$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
												debug($tax_values);
												$finaltax_price2[$tax_values['AccountsTax']['name']] += (($amt * $tax_values['AccountsTax']['percent'])/100);
											//	debug($taxx3);
									}
											
											$type = "CompN";				
								}
													
										$multiple = 0;
								
						}
			
					}
					debug($final_values);
					debug($taxx12);
					debug($finaltax_price1);
					debug($finaltax_price2);
					
					
					
					
					foreach($taxx12 as $k1 => $v1)
								{
									$finalTTT[$k1] = $finalTTT[$k1]+$v1;
								}
								
								foreach($finaltax_price1 as $k2 => $v2)
								{
									$finalTTT[$k2] = $finalTTT[$k2]+$v2;
								}
								
								foreach($finaltax_price2 as $k3 => $v3)
								{
									$finalTTT[$k3] = $finalTTT[$k3]+$v3;
								}
								
								debug($finalTTT);
					
					
					
		
		
			
					
				
		
		}

	 $this->set(compact('unit_items','package_items','service_items','list','est_name','comp_est','active','curr_id'));
		$this->set(compact('type','taxx12','finaltax_price1','finaltax_price2','tax_final','tax_finalN','tax_finalG','finalTTT'));
		$this->set(compact('companies', 'brands', 'clients', 'clientname', 'companyname', 'id', 'estimate_date', 'brandname', 'service_tick', 'package_tick', 'unit_tick', 'final_values', 'item', 'sub_total', 'service_tax', 'net', 'notes', 'terms','brand_list'));
		
	} 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	

	public function unit_type_edit($flag = null,$curr_id=null)
	{
		//Configure::write('debug',2);	
		debug($this->data);
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('BillingUnit');
		
		for ($i = 1; $i <= 3; $i++) {
		if ($this->data['BrandsEstimate']['unit_type'. $i] == "Unit") {
				$item = null;
				$type = null;
				$item = $this->BillingUnit->find('list', array (
					'fields' => array (
						'BillingUnit.id',
						'BillingUnit.name'
					),
					'order' => array (
						'BillingUnit.name ASC'
					)
				));
				debug($item);
				$type = "unit";
			}
		
		if ($this->data['BrandsEstimate']['unit_type' . $i] == "Service") {
				$item = null;
				$type = null;
				$item = $this->BrandsService->find('list', array (
					'fields' => array (
						'BrandsService.id',
						'BrandsService.service_name'
					),
					'order' => array (
						'BrandsService.service_name ASC'
					)
				));
				debug($item);
				$type = "service";
			}
			
			if ($this->data['BrandsEstimate']['unit_type'. $i] == "Package") {
				$item = null;
				$type = null;
				$item = $this->BrandsPackage->find('list', array (
					'fields' => array (
						'BrandsPackage.id',
						'BrandsPackage.package_name'
					),
					'order' => array (
						'BrandsPackage.package_name ASC'
					)
				));
				debug($item);
				$type = "package";
			}
		}

		$this->set(compact('item', 'type', 'flag','curr_id'));
	}

	public function rateedit($type = null,$curr_id= null, $qnty = null, $discount = null, $description = null) {
		//Configure::write('debug',2);	
		debug($this->data);
		
		
		$this->loadModel('BrandsPackage');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('CurrencyConversionrate');
		$this->loadModel('Currency');
				$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		debug($billingcurrency);			
		$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
		foreach ($tax_groups_details as $t1 => $t2) 
		{
			$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
			foreach($tax_mappings as $m1 => $m2)
			{
				$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
				foreach($taxname as $name1 => $name2)
				{
					$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
					$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
					
					$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
					
				}
			}
		}
		ksort($final_taxes);
		//debug($final_taxes2); 
		$var = 0;		
		
		foreach($final_taxes as $f1 => $f2)
		{
			if(is_array($f2))
			{
				$name_exp = explode('-',$f1);
				$list[$f1] = $name_exp[0];
				foreach($f2 as $v1 => $v2)
				{
					
					foreach($v2 as $id1 => $name1)
					{
						//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
						$list[$f1.$id1]='|--'.$name1;
					}
				}
			}
			
			else
				$list[$f1] = $f2;
			
			
		}
		
		
		
		
		$this->set(compact('list'));
		
		
		
		if($this->data['BrandsEstimate']['type'])
		$id = $this->data['BrandsEstimate']['type'];
		
		elseif($this->data['BrandsEstimate']['item'])
		$id = $this->data['BrandsEstimate']['item'];
		if ($type == "service") 
		{
			$pass_id = null;
			$serv_id = $this->BrandsService->find('first', array ('conditions' => array ('BrandsService.id' => $id)));
			debug($serv_id);
			$rate = $serv_id['BrandsService']['totalcost'];
			$unit_type = "Service";
			$pass_id = $serv_id['BrandsService']['id'] . "-s";
			
			//Currency Conversion
			if($billingcurrency['Currency']['id']!=$curr_id)
			{
				debug();
				$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$curr_id)));
				$conversion=$this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1'=>$billingcurrency['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$curr_id)));
				$rate2=$conversion['CurrencyConversionrate']['conversion_rate'];
				$rate=$rate*$rate2;
				$symbol=$clientbilling['Currency']['symbol'];
				$this->set(compact('symbol'));
			}
							
							//End
			
			
			//			$resource_id = $id."-s";
		}
		if ($type == "package") 
		{
			$pass_id = null;
			$serv_id = $this->BrandsPackage->find('first', array (
				'conditions' => array (
					'BrandsPackage.id' => $id
				)
			));
			debug($serv_id);
			$rate = $serv_id['BrandsPackage']['totalcost'];
			//		$resource_id = $id."-p";
			$unit_type = "Package";
			$pass_id = $serv_id['BrandsPackage']['id'] . "-u";
			if($billingcurrency['Currency']['id']!=$curr_id)
			{
				debug();
				$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$curr_id)));
				$conversion=$this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1'=>$billingcurrency['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$curr_id)));
				$rate2=$conversion['CurrencyConversionrate']['conversion_rate'];
				$rate=$rate*$rate2;
				$symbol=$clientbilling['Currency']['symbol'];
				$this->set(compact('symbol'));
			}
		}

		if ($type == "unit") 
		{
			$pass_id = null;
			$serv_id = $this->BillingUnit->find('first', array (
				'conditions' => array (
					'BillingUnit.id' => $id
				)
			));
			debug($serv_id);
			$rate = $serv_id['BillingUnit']['amount'];
			//		$resource_id = $id."-u";
			
			$unit_type = "Unit";
			$pass_id = $serv_id['BillingUnit']['id'] . "-u";
			
			//Currency Conversion
			if($billingcurrency['Currency']['id']!=$curr_id)
			{
				$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$curr_id)));
				debug($clientbilling);
				
				$conversion=$this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1'=>$billingcurrency['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$curr_id)));
				$rate2=$conversion['CurrencyConversionrate']['conversion_rate'];
				debug($rate2);
				debug($rate);
				$rate=$rate*$rate2;
				$symbol=$clientbilling['Currency']['symbol'];
				$this->set(compact('symbol'));
			}
							
							//End
			
		}

		$price_edit = $qnty * $rate;
		$amount = (($price_edit) - (($discount * $price_edit) / 100));
		
		
		$resource_id = $id;
		$this->set(compact('rate', 'resource_id', 'final_tax', 'unit_type', 'qnty', 'discount', 'tax_pass', 'amount','pass_id','type','description'));

	}

	public function amount_edit_row($pass_id = null) 
	{
		//Configure::write('debug',2);	
		debug($this->data);
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$x = 0;
		$res_exp=explode('.', $pass_id);
		$resource_id = $res_exp[0];
		$this->set(compact('resource_id'));
		$test_amount = null;
				foreach ($this->data as $key => $value) 
				{
					foreach ($this->data[$x]['BrandsEstimate']['quantity'] as $q1 => $q2) 
					{
						debug($q1);
						debug($pass_id);
						if($pass_id == $q1)
						{
							debug($q1);
							$quan = explode('.', $q2);
							debug($quan);
									
							if($q2 <= 0)
							{
								$validate_quan = 1;
							}
							
							elseif(!is_numeric($q2) && ($q2))
							{
								debug();	
								$validate_quan = 1;
							}
							
							elseif($quan[1])
							{
								$validate_quan = 1;
								debug();
							}
							
							elseif($quan[0] > 0 && !$quan[1])
							{
								debug();
								$validate_quan = 0;
							}
				
					}
				
					foreach ($this->data[$x]['BrandsEstimate']['rate'] as $r1 => $r2) 
					{
						foreach ($this->data[$x]['BrandsEstimate']['discount'] as $d1 => $d2) 
						{
						
								$exp = null;
								$exp = explode('.', $d2);
								debug($exp[1]);
								/*if($exp[1] > 0) $validate = 1;
								elseif(($exp[1] == 0)) $validate = 0;*/
								// For validating the discount , discount shud be 0 - 100
								if($q1 == $pass_id)
								{	
									if(!$d2)
									{
										debug();
										$validate = 0;
									}
									
									
									if (($d2 <= 100) && ($d2 >= 0)) 
									{
										debug($exp[1]);
										if (($exp[1] == 0))
										 {
											$validate = 0;
										}
										elseif ($exp[1] > 0 ) 
										{
											debug();
											$validate = 1;
										}
		
									}
									elseif ($d2 > 100 || $d2 < 0) 
									{
											debug();	
										$validate = 1;
		
									}
									
									if(!is_numeric($d2) && ($d2))
									{
										debug();	
										$validate = 1;
									}
									
									
									debug($validate);						
								}	
							
								debug($validate);
								if ($validate == 0)
								$amount = (($q2 * $r2) - (($d2 * $q2 * $r2) / 100));
							$test_amount[$r1] = $amount;
							$total_amount += (($q2 * $r2) - (($d2 * $q2 * $r2) / 100));
							
					}
				}
			}
			$x++;
		}
		debug($test_amount);
		foreach ($test_amount as $t1 => $t2) {

			if ($t1 == $pass_id) {
				debug($t2);
				$final_amount = $t2;
			}
		}
		
			
		
		
		$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
		foreach ($tax_groups_details as $t1 => $t2) 
		{
			$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
			foreach($tax_mappings as $m1 => $m2)
			{
				$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
				foreach($taxname as $name1 => $name2)
				{
					$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
					$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
					
					$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
					
				}
			}
		}
		ksort($final_taxes);
		debug($final_taxes); 
		//debug($final_taxes2); 
		$var = 0;		
		
		foreach($final_taxes as $f1 => $f2)
		{
			if(is_array($f2))
			{
				$name_exp = explode('-',$f1);
				$list[$f1] = $name_exp[0];
				foreach($f2 as $v1 => $v2)
				{
					debug($v2);
					foreach($v2 as $id1 => $name1)
					{
						//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
						$list[$f1.$id1]='|--'.$name1;
					}
				}
			}
			
			else
				$list[$f1] = $f2;
			
			
		}
		debug($list);
		
		if(!$tax_groups_details)
		{
		//	$only_taxes = $this->AccountsTax->find('list', array ('fields' => array ('AccountsTax.id','AccountsTax.name')));
			$only_taxes2 = $this->AccountsTax->find('all');
			foreach($only_taxes2 as $o1 => $o2)
			{
				$only_taxes[$o2['AccountsTax']['id']] = $o2['AccountsTax']['name'].'-'.$o2['AccountsTax']['percent'].'%';
			}
		}
		
		debug($only_taxes);
		
		debug($validate);
		$this->set(compact('amount','final_amount','validate','list','validate_quan','curr_id','only_taxes'));
	}

	public function email_template($id = null) 
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		$email = new CakeEmail();
		/*$this->Uploader = new Uploader(); 
		$this->Uploader = new Uploader(array('tempDir' => TMP));
		$this->Uploader->setup(array('tempDir' => TMP));
		*/$this->loadModel('Client');
		$this->loadModel('Company');
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('ClientEmailtype');
		$this->loadModel('BrandsEstimatedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$est_details = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
		$download_estimate_id=$est_details['BrandsEstimate']['id'];
		$download_estimate_date=$est_details['BrandsEstimate']['estimate_date'];
		
		$this->set(compact('download_estimate_id','download_estimate_date'));
		
		$estimatedetails=$this->BrandsEstimatedetail->find('all',array('conditions'=>array('BrandsEstimatedetail.brands_estimate_id'=>$id)));
		foreach($estimatedetails as $k=>$v)
		{
			if(!empty($v['BrandsEstimatedetail']['billing_unit_id']) || $v['BrandsEstimatedetail']['billing_unit_id']!=0)
			{
				$unit=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v['BrandsEstimatedetail']['billing_unit_id']),'fields'=>array('BillingUnit.name')));
				$download[$v['BrandsEstimatedetail']['id']]['unit']=$unit['BillingUnit']['name'];
			}
			if(!empty($v['BrandsEstimatedetail']['brands_service_id']) || $v['BrandsEstimatedetail']['brands_service_id']!=0)
			{
				$unit=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v['BrandsEstimatedetail']['brands_service_id']),'fields'=>array('BrandsService.service_name')));
				$download[$v['BrandsEstimatedetail']['id']]['unit']=$unit['BrandsService']['service_name'];
			}
			if(!empty($v['BrandsEstimatedetail']['brands_package_id']) || $v['BrandsEstimatedetail']['brands_package_id']!=0)
			{
				$unit=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v['BrandsEstimatedetail']['brands_package_id']),'fields'=>array('BrandsPackage.package_name')));
				$download[$v['BrandsEstimatedetail']['id']]['unit']=$unit['BrandsPackage']['package_name'];
			}
			if(!empty($v['BrandsEstimatedetail']['accounts_tax_id']) || $v['BrandsEstimatedetail']['accounts_tax_id']!=0)
			{
				$tax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['BrandsEstimatedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.id','AccountsTax.name','AccountsTax.percent')));
				$download[$v['BrandsEstimatedetail']['id']]['taxname'][$tax['AccountsTax']['id']]=$tax['AccountsTax']['name'];
				$wt=$v['BrandsEstimatedetail']['netcost'];
				$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$tax['AccountsTax']['id']]=($v['BrandsEstimatedetail']['totalcost']-$wt);
				
			}
			if(!empty($v['BrandsEstimatedetail']['accounts_taxgroup_id']) || $v['BrandsEstimatedetail']['accounts_taxgroup_id']!=0)
			{
				$taxgroup=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$v['BrandsEstimatedetail']['accounts_taxgroup_id'])));
				if($taxgroup['AccountsTaxgroup']['compounded']=='Y')
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						if($taxableamount==0)
						{
							$taxableamount=$v['BrandsEstimatedetail']['netcost'];
						}
						$download[$v['BrandsEstimatedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						$taxableamount=$taxableamount+$percent*$taxableamount;
					}
				}
				else
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						
							$taxableamount=$v['BrandsEstimatedetail']['netcost'];
						
						$download[$v['BrandsEstimatedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						
					}
				}
			}
			//$download[$v['AccountsClientinvoicedetail']['id']]['taxname']
			
			$download[$v['BrandsEstimatedetail']['id']]['description']=$v['BrandsEstimatedetail']['description'];
			$download[$v['BrandsEstimatedetail']['id']]['quantity']=$v['BrandsEstimatedetail']['quantity'];
			$download[$v['BrandsEstimatedetail']['id']]['rate']=($v['BrandsEstimatedetail']['netcost']/$v['BrandsEstimatedetail']['quantity']);
			$download[$v['BrandsEstimatedetail']['id']]['amount']=$v['BrandsEstimatedetail']['totalcost'];
			$download[$v['BrandsEstimatedetail']['id']]['discount']=$v['BrandsEstimatedetail']['discount'];
			$totalamount=$totalamount+$v['BrandsEstimatedetail']['totalcost'];
			$discount_raw=($v['BrandsEstimatedetail']['netcost']*$v['BrandsEstimatedetail']['discount'])/100;
			$discount_final=$discount_final+$discount_raw;
		}
		
		$this->set(compact('download','totalamount','discount_final'));
		
		$estimatesym=$this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
		if($estimatesym['BrandsEstimate']['currency_id'])
			{
				$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$estimatesym['BrandsEstimate']['currency_id']),'fields'=>array('Currency.symbol','Currency.name')));
			}
		else
			{
				$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y'),'fields'=>array('Currency.symbol','Currency.name')));
			}
		
		
		if($currencydown['Currency']['name']=='INR')
			{
				$symbol='INR';
			}
		else
			{
				$symbol=$currencydown['Currency']['symbol'];
			}
		$this->set(compact('symbol'));
		$branddetails = $this->Brand->find('first',array('conditions'=>array('Brand.id'=>$est_details['BrandsEstimate']['brand_id'])));
		$brandname = $branddetails['Brand']['brandname'];
		$date =  AppModel :: dateFormat($est_details['BrandsEstimate']['estimate_date']);
		$clientdetails = $this->Client->find('first',array('conditions'=>array('Client.id'=>$est_details['BrandsEstimate']['client_id'])));
		
		
		$download_clientname=$clientdetails['Client']['first_name'].' '.$clientdetails['Client']['last_name'];
		$download_clientaddress=$clientdetails['Client']['address'];
		$download_clientcompanyname=$clientdetails['Client']['client_companyname'];
		
		
		$download_estimatesubtotal=0;
		foreach($estimatedetails as $invdeta)
		{
			$download_estimatesubtotal=$download_estimatesubtotal+$invdeta['BrandsEstimatedetail']['totalcost'];
			$taxdetail[$invdeta['BrandsEstimatedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['BrandsEstimatedetail']['accounts_tax_id'])));
		}
		$download_tax=$est_details['BrandsEstimate']['totalcost']-$download_estimatesubtotal;
		$download_estimateamount=$est_details['BrandsEstimate']['totalcost'];
		
		
		
		
		
		
		
		
		
		
		$this->set(compact('id','brandname','date'));
		$this->set(compact('download_clientname','download_clientaddress','download_clientcompanyname','download_estimateamount'));
		$this->set(compact('download_invoicedamount','download_invoicesubtotal','download_tax','taxdetail','download_estimatesubtotal'));
		$this->layout = 'pdf'; //this will use the pdf.ctp layout 
        $this->render(); 
		
		
		
		
		
		
		
		
		
		
		if($this->data)
		{
			if($this->data['Estimate_email']['from'] && $this->data['Estimate_email']['to'])
			{
				//save and send + redirect
				$email_types = $this->ClientEmailtype->find('list', array ('fields' => array ('ClientEmailtype.id','ClientEmailtype.email_type'),'order' => 'ClientEmailtype.email_type ASC'));
				$estimate = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
				$from_address = $this->Company->find('list', array ('fields' => array ('Company.id','Company.email'),'conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id']),'order' => 'Company.email ASC'));
				$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
				$from_address1 = $from1['Company']['email'];
				$client_id = $estimate['BrandsEstimate']['client_id'];
				$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
				$to_adress = $to_adress1['Client']['email1'];
				$toadress=$to_adress;
				$fromadress=$from_address1;
				$ccaddress=$this->data['Estimate_email']['CC'];
				$subject=$this->data['Estimate_email']['subject'];
				$body=$this->data['Estimate_email']['content'];
				
				$path = $_SERVER['DOCUMENT_ROOT'].$this->webroot."app/webroot/files/uploads/estimates/";
    			$file = $path.$id.'.pdf';
			    $content = chunk_split(base64_encode(file_get_contents($file)));
			  	ob_start(); 
			    $uid = md5(uniqid(time()));
			    $name = basename($file);
			    $header = "From: "." <".$fromadress.">\r\n";
			    $header .= "Reply-To: ".$fromadress."\r\n";
			    $header .= "CC: ".$ccaddress."\n";
			    $header .= "MIME-Version: 1.0\r\n";
			    $header .= "Content-Type: multipart/mixed; boundary=\"".$uid."\"\r\n\r\n";
			    $header .= "This is a multi-part message in MIME format.\r\n";
			    $header .= "--".$uid."\r\n";
			    $header .= "Content-type:text/plain; charset=iso-8859-1\r\n";
			    $header .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
			    //$header .= "Content-Transfer-Encoding: base64\r\n\r\n";
			    $header .= $body."\r\n\r\n";
			    $header .= "--".$uid."\r\n";
			    $header .= "Content-Type:application/pdf; name=\""."Estimate #".$id."\"\r\n"; // use different content types here
			    $header .= "Content-Transfer-Encoding: base64\r\n";
			    $header .= "Content-Disposition: attachment; filename=\""."Estimate #".$id."\"\r\n\r\n";
			    $header .= $content."\r\n\r\n";
			    $header .= "--".$uid."--";
				$success = mail($toadress, $subject, $body, $header);
				
				
				
				
			
			$save->data=null;
			$save->data['BrandsEstimate']['id'] = $id;
			$save->data['BrandsEstimate']['status'] = "Sent";
			$this->BrandsEstimate->save($save->data);
			
			
			
			$email->data = null;
			$this->ClientsEmailhistory->create();
			
			$email->data['ClientsEmailhistory']['client_id'] = $estimate['BrandsEstimate']['client_id'];
			$email->data['ClientsEmailhistory']['brands_estimate_id'] = $id;
			$email->data['ClientsEmailhistory']['accounts_clientinvoice_id'] = '0';
			$email->data['ClientsEmailhistory']['subject'] = $subject;
			$email->data['ClientsEmailhistory']['staff_id'] = $this->Session->read('Auth.staff.id');
			$email->data['ClientsEmailhistory']['message'] = $body;
			$email->data['ClientsEmailhistory']['date'] =  date('Y-m-d h:m:s');
			$email->data['ClientsEmailhistory']['status'] = "Sent";
			$email->data['ClientsEmailhistory']['client_emailtype_id'] = '0';
			
			$this->ClientsEmailhistory->save($email->data);
				$this->Session->setFlash(__('Email sent'));
				$this->redirect(array ('action' => 'index',1));
					
			}
			
			else
			{
				//list + error
				
				if(!$this->data['Estimate_email']['from'])
				$this->Session->setFlash(__('<div class="flashMessageError">Please select the From address</div>'));
				
				if(!$this->data['Estimate_email']['to'])
				$this->Session->setFlash(__('<div class="flashMessageError">Please select the To address</div>'));
				if(!$this->data['Estimate_email']['to'] && !$this->data['Estimate_email']['from'])
				$this->Session->setFlash(__('<div class="flashMessageError">Please select the From and To addresses</div>'));
				
				$estimate = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
				$from_address = $this->Company->find('list', array ('fields' => array ('Company.id','Company.email'),'conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id']),'order' => 'Company.email ASC'));
				$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
				$from_address1 = $from1['Company']['email'];
				$client_id = $estimate['BrandsEstimate']['client_id'];
				$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
				$default_subject = "Estimate from ".$from1['Company']['companyname'];
			//	$default_content = "Please find the attached estimate of ".$estimate['BrandsEstimate']['estimate_name']." for ".$to_adress1['Client']['client_companyname'];
				$default_content = "Dear ".$to_adress1['Client']['first_name'].$to_adress1['Client']['last_name'].",\n".
"Your letter of inquiry regarding our services has been brought to my attention and I would like to thank you for your interest in InstaCarma. 
I have mentioned a few key facts of InstaCarma below, which would give you a better understanding of who we are and how we could be the right partner to help you develop your business.
This should help to familiarize you with our services and our commitment to high quality.
			
1. Completed the 7th Year of operations and have managed over 5000 plus linux and windows servers.
2. We have been the sole support department of many leading companies in Linux, Windows, VPS and Rails Hosting, helping them build a responsive and knowledgeable customer support department.
3. Our first customer is still with us and has grown from 3 servers to own a farm of 100 plus servers today.
4. Enterprise class processes to ensure that we deliver top class services consistently maintaining the service levels through out .
5. Management that is always accessible and responsive to make your relationship with us nothing short of delighting.
In short, If you become a customer of InstaCarma, you are leveraging the years of experience that we have gathered, documented, and perfected through servicing our customers over the years. And you get the benefits from day 1.
To have a sneak peek into our operations, please visit www.instacarma.com and glance through the videos. It will help you know us better. 
We are pleased to attach our price quote with this email. In case you have any questions, please feel free to email sales@instacarma.com - we would be glad to answer all your queries.
We look forward to working with you!
			
Thank you.
			
Carmatec Business Wing
Email: billing@instacarma.com 
";
				
			
				$from_address = $this->Company->find('list', array ('fields' => array ('Company.id','Company.email'),'conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id']),'order' => 'Company.email ASC'));
				$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
				$from_address1 = $from1['Company']['email'];
				$client_id = $estimate['BrandsEstimate']['client_id'];
				$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
				$default_subject = "Estimate from ".$from1['Company']['companyname'];
				$to_adress = $to_adress1['Client']['email1'];
				debug($to_adress1);
			}
		}
		
		else
		{
			//list
			$estimate = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
			$from_address = $this->Company->find('list', array ('fields' => array ('Company.id','Company.email'),'conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id']),'order' => 'Company.email ASC'));
			$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
			$from_address1 = $from1['Company']['email'];
			$client_id = $estimate['BrandsEstimate']['client_id'];
			$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
			$default_subject = "Estimate from ".$from1['Company']['companyname'];
		//	$default_content = "Please find the attached estimate of ".$estimate['BrandsEstimate']['estimate_name']." for ".$to_adress1['Client']['client_companyname'];
			$default_content = "Dear ".$to_adress1['Client']['first_name'].$to_adress1['Client']['last_name'].",\n".
"Your letter of inquiry regarding our services has been brought to my attention and I would like to thank you for your interest in InstaCarma. 
I have mentioned a few key facts of InstaCarma below, which would give you a better understanding of who we are and how we could be the right partner to help you develop your business.
This should help to familiarize you with our services and our commitment to high quality.
			
1. Completed the 7th Year of operations and have managed over 5000 plus linux and windows servers.
2. We have been the sole support department of many leading companies in Linux, Windows, VPS and Rails Hosting, helping them build a responsive and knowledgeable customer support department.
3. Our first customer is still with us and has grown from 3 servers to own a farm of 100 plus servers today.
4. Enterprise class processes to ensure that we deliver top class services consistently maintaining the service levels through out .
5. Management that is always accessible and responsive to make your relationship with us nothing short of delighting.
In short, If you become a customer of InstaCarma, you are leveraging the years of experience that we have gathered, documented, and perfected through servicing our customers over the years. And you get the benefits from day 1.
To have a sneak peek into our operations, please visit www.instacarma.com and glance through the videos. It will help you know us better. 
We are pleased to attach our price quote with this email. In case you have any questions, please feel free to email sales@instacarma.com - we would be glad to answer all your queries.
We look forward to working with you!
			
Thank you.
			
Carmatec Business Wing
Email: billing@instacarma.com 
";
			
		
			$from_address = $this->Company->find('list', array ('fields' => array ('Company.id','Company.email'),'conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id']),'order' => 'Company.email ASC'));
			$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
			$from_address1 = $from1['Company']['email'];
			$client_id = $estimate['BrandsEstimate']['client_id'];
			$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
			$default_subject = "Estimate from ".$from1['Company']['companyname'];
			$to_adress = $to_adress1['Client']['email1'];
			debug($to_adress1);
	//	
		}
		
		
		/*$email_types = $this->ClientEmailtype->find('list', array ('fields' => array ('ClientEmailtype.id','ClientEmailtype.email_type'),'order' => 'ClientEmailtype.email_type ASC'));
		$estimate = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
		$from_address = $this->Company->find('list', array ('fields' => array ('Company.id','Company.email'),'conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id']),'order' => 'Company.email ASC'));
		$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
		$from_address1 = $from1['Company']['email'];
		$client_id = $estimate['BrandsEstimate']['client_id'];
		$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
		$default_subject = "Estimate from ".$from1['Company']['companyname'];
	//	$default_content = "Please find the attached estimate of ".$estimate['BrandsEstimate']['estimate_name']." for ".$to_adress1['Client']['client_companyname'];
		$default_content = "Dear ".$to_adress1['Client']['first_name'].$to_adress1['Client']['last_name'].",\n".
		"Your letter of inquiry regarding our services has been brought to my attention and I would like to thank you for your interest in InstaCarma. 
		I have mentioned a few key facts of InstaCarma below, which would give you a better understanding of who we are and how we could be the right partner to help you develop your business.
		This should help to familiarize you with our services and our commitment to high quality.
		
		1. Completed the 7th Year of operations and have managed over 5000 plus linux and windows servers.
		2. We have been the sole support department of many leading companies in Linux, Windows, VPS and Rails Hosting, helping them build a responsive and knowledgeable customer support department.
		3. Our first customer is still with us and has grown from 3 servers to own a farm of 100 plus servers today.
		4. Enterprise class processes to ensure that we deliver top class services consistently maintaining the service levels through out .
		5. Management that is always accessible and responsive to make your relationship with us nothing short of delighting.
		
		In short, If you become a customer of InstaCarma, you are leveraging the years of experience that we have gathered, documented, and perfected through servicing our customers over the years. And you get the benefits from day 1.
		
		To have a sneak peek into our operations, please visit www.instacarma.com and glance through the videos. It will help you know us better. 
		
		We are pleased to attach our price quote with this email. In case you have any questions, please feel free to email sales@instacarma.com - we would be glad to answer all your queries.
		
		We look forward to working with you!
		
		Thank you.
		
		Carmatec Business Wing
		Email: billing@instacarma.com 
		";
		
		$to_adress = $to_adress1['Client']['email1'];
		debug($to_adress1);
		if($this->data)
		{
			$this->Uploader->uploadDir = 'files/uploads/invoice';
			$data = $this->Uploader->uploadAll(array('fileName1'));
			debug($data);
			debug($data['fileName1']['path']);
			$toadress=$to_adress;
			$fromadress=$from_address1;
			$ccaddress=$this->data['Estimate_email']['CC'];
			$subject=$this->data['Estimate_email']['subject'];
			$body=$this->data['Estimate_email']['content'];
			$content_type = "Content-type: text/plain; charset=iso-8859-1\n";
			$headers  = "MIME-Version: 1.0\n";
			$headers .= $content_type;
			$headers .= "From: "." <".$fromadress.">\n";
		   	$headers .= "Reply-to: ".$fromadress."\n";
		    $headers .= "Return-Path: ".$fromadress."\n";
		    $headers .= "CC: ".$ccaddress."\n";
		    $email->attachments("files/uploads/invoice/CTS0246_Jan_20121.pdf");
		    $this->Email->attachments = array(
	        ROOT . DS . 'app' . DS . 'webroot' . DS . 'files' . DS . 'uploads'. DS .'invoice'.DS. $data['fileName1']['path']
	        );
	//		mail($toadress,$subject, $body, $headers);
			
			$email->from($from_address1);
			$email->to($to_adress);
			$email->subject($subject);
		//	$email->cc($ccaddress);
			
			$email->attachments = array('files/uploads/1.jpg');
			$email->send($body);
		
			debug($email);
		//	$email->attachments = array($data['fileName1']['path']);
		//	$email->attachments(array('CTS0246_Jan_20121.pdf' => array('file' => 'files/uploads/invoice/CTS0246_Jan_20121.pdf','mimetype' => 'application/pdf','contentId' => 'my-unique-id') )); 
		//	$email->attachments("files/uploads/invoice/CTS0246_Jan_20121.pdf");
			
			$save->data=null;
			$save->data['BrandsEstimate']['id'] = $id;
			$save->data['BrandsEstimate']['status'] = "Sent";
			$this->BrandsEstimate->save($save->data);
			
			
			
			$email->data = null;
			$this->ClientsEmailhistory->create();
			
			$email->data['ClientsEmailhistory']['client_id'] = $estimate['BrandsEstimate']['client_id'];
			$email->data['ClientsEmailhistory']['brands_estimate_id'] = $id;
			$email->data['ClientsEmailhistory']['accounts_clientinvoice_id'] = '0';
			$email->data['ClientsEmailhistory']['subject'] = $subject;
			$email->data['ClientsEmailhistory']['staff_id'] = $this->Session->read('Auth.staff.id');
			$email->data['ClientsEmailhistory']['message'] = $body;
			$email->data['ClientsEmailhistory']['date'] =  date('Y-m-d h:m:s');
			$email->data['ClientsEmailhistory']['status'] = "Sent";
			$email->data['ClientsEmailhistory']['client_emailtype_id'] = '0';
			
	//		$this->ClientsEmailhistory->save($email->data);
				$this->Session->setFlash(__('Email sent'));
	//			$this->redirect(array ('action' => 'index',1));
		
		}*/
		$this->set(compact('from_address','to_adress','default_subject','default_content','id','client_id','email_types'));
	}
	
	public function email_template_draft($email_id = null)
	{
	//	Configure :: write('debug', 2);
		debug($this->data);
		$email = new CakeEmail();
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('Company');
		$this->loadModel('Client');
		
		
		
		
		
		$email_history = $this->ClientsEmailhistory->find('first',array('conditions'=>array('AND'=>array('ClientsEmailhistory.id'=>$email_id,'ClientsEmailhistory.status'=>"Draft"))));
		debug($email_history);
		$estimate = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$email_history['ClientsEmailhistory']['brands_estimate_id'])));
		debug($estimate);
		$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
		$from_address1 = $from1['Company']['email'];
		$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
		$to_adress = $to_adress1['Client']['email1'];
		debug($from_address1);
		debug($to_adress);
		
		
		$this->Uploader = new Uploader(); 
		$this->Uploader = new Uploader(array('tempDir' => TMP));
		$this->Uploader->setup(array('tempDir' => TMP));
		
		if($this->data['Estimate_email']['fileName1']){
			$this->Uploader->uploadDir = 'files/uploads/invoice';
			$data = $this->Uploader->uploadAll(array('fileName1'));
			debug($data);
		}
		
		if($this->data)
		{
			debug("?");
			$ccaddress=$this->data['Estimate_email']['CC'];
			$subject=$this->data['Estimate_email']['subject'];
			$body = $this->data['Estimate_email']['content'];
			
			$path = $_SERVER['DOCUMENT_ROOT']."accounts/app/webroot/files/uploads/invoice/";
				$filename =  $data['fileName1']['name'];
			    $file = $path.$filename;
			    $content = chunk_split(base64_encode(file_get_contents($file)));
			  	ob_start(); 
			    $uid = md5(uniqid(time()));
			    $name = basename($file);
			    $header = "From: "." <".$from_address1.">\r\n";
			    $header .= "Reply-To: ".$from_address1."\r\n";
			    $header .= "CC: ".$ccaddress."\n";
			    $header .= "MIME-Version: 1.0\r\n";
			    $header .= "Content-Type: multipart/mixed; boundary=\"".$uid."\"\r\n\r\n";
			    $header .= "This is a multi-part message in MIME format.\r\n";
			    $header .= "--".$uid."\r\n";
			    $header .= "Content-type:text/plain; charset=iso-8859-1\r\n";
			    $header .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
			    //$header .= "Content-Transfer-Encoding: base64\r\n\r\n";
			    $header .= $body."\r\n\r\n";
			    $header .= "--".$uid."\r\n";
			    $header .= "Content-Type: application/octet-stream; name=\"".$filename."\"\r\n"; // use different content types here
			    $header .= "Content-Transfer-Encoding: base64\r\n";
			    $header .= "Content-Disposition: attachment; filename=\"".$filename."\"\r\n\r\n";
			    $header .= $content."\r\n\r\n";
			    $header .= "--".$uid."--";
				$success = mail($to_adress, $subject, $body, $header);
			
			/*$email->from($from_address1);
			$email->to($to_adress);
			$email->subject($subject);
			$body=$this->data['Estimate_email']['content'];
		//	$email->cc($ccaddress);
		//	$email->attachments = array('files/uploads/1.jpg');
			$email->send($body);*/
			
			/*$content_type = "Content-type: text/plain; charset=iso-8859-1\n";
			$headers  = "MIME-Version: 1.0\n";
			$headers .= $content_type;
			$headers .= "From: "." <".$from_address1.">\n";
		   	$headers .= "Reply-to: ".$from_address1."\n";
		    $headers .= "Return-Path: ".$from_address1."\n";
		    $headers .= "CC: ".$ccaddress."\n";
		    $email->attachments("files/uploads/invoice/CTS0246_Jan_20121.pdf");
		    $this->Email->attachments = array(
	        ROOT . DS . 'app' . DS . 'webroot' . DS . 'files' . DS . 'uploads'. DS .'invoice'.DS. $data['fileName1']['path']
	        );
			mail($to_adress,$subject, $body, $headers);
			*/
			
			
			$email->data = null;
			$this->ClientsEmailhistory->create();
			$email->data['ClientsEmailhistory']['id'] =  $email_history['ClientsEmailhistory']['id'];
			$email->data['ClientsEmailhistory']['client_id'] = $email_history['ClientsEmailhistory']['client_id'];
			$email->data['ClientsEmailhistory']['brands_estimate_id'] = $email_history['ClientsEmailhistory']['brands_estimate_id'];
			$email->data['ClientsEmailhistory']['accounts_clientinvoice_id'] = '0';
			$email->data['ClientsEmailhistory']['subject'] = $subject;
			$email->data['ClientsEmailhistory']['staff_id'] = $this->Session->read('Auth.staff.id');
			$email->data['ClientsEmailhistory']['message'] = $body;
			$email->data['ClientsEmailhistory']['date'] =  date('Y-m-d h:m:s');
			$email->data['ClientsEmailhistory']['status'] = "Sent";
			$email->data['ClientsEmailhistory']['client_emailtype_id'] ='0';
			$this->ClientsEmailhistory->save($email->data);
			$save->data=null;
			$save->data['BrandsEstimate']['id'] = $email_history['ClientsEmailhistory']['brands_estimate_id'];
			$save->data['BrandsEstimate']['status'] = "Sent";
			$this->BrandsEstimate->save($save->data);
			debug($email);
		}
		$this->Session->setFlash(__('Email sent'));
			$this->redirect(array ('action' => 'index',1));
	}
	
	
	public function send_draft($id = null, $email_id = null)
	{
		//Configure :: write('debug', 2);
		$this->loadModel('ClientEmailtype');
		$this->loadModel('ClientsEmailhistory');
		$email_detail_history = $this->ClientsEmailhistory->find('first',array('conditions'=>array('AND'=>array('ClientsEmailhistory.brands_estimate_id'=>$id,'ClientsEmailhistory.status'=>"Draft"))));
		debug($email_detail_history);
		$def_type_id = $email_detail_history['ClientsEmailhistory']['client_emailtype_id'];
		$default_subject = $email_detail_history['ClientsEmailhistory']['subject'];
		$default_content = $email_detail_history['ClientsEmailhistory']['message'];
		$this->loadModel('Company');
		$this->loadModel('Client');
		$estimate = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
		
		$email_types = $this->ClientEmailtype->find('list', array ('fields' => array ('ClientEmailtype.id','ClientEmailtype.email_type'),'order' => 'ClientEmailtype.email_type ASC'));
		$from1 = $this->Company->find('first',array('conditions'=>array('Company.id'=>$estimate['BrandsEstimate']['company_id'])));
		$from_address1 = $from1['Company']['email'];
		$client_id = $estimate['BrandsEstimate']['client_id'];
		$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$estimate['BrandsEstimate']['client_id'])));
		$to_adress = $to_adress1['Client']['email1'];
		debug($to_adress);
		$this->set(compact('from_address1','to_adress','default_subject','default_content','id','client_id','def_type_id','email_types','email_id'));
	}
	
	
	public function sent_email($id = null, $email_id = null)
	{
		//Configure :: write('debug', 2);
		$this->loadModel('ClientEmailtype');
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('Client');
		$email_detail_history = $this->ClientsEmailhistory->find('first',array('conditions'=>array('AND'=>array('ClientsEmailhistory.id'=>$email_id))));
		debug($email_detail_history);
		$to_adress1 = $this->Client->find('first',array('conditions'=>array('Client.id'=>$email_detail_history['ClientsEmailhistory']['client_id'])));
		$to_adress = $to_adress1['Client']['email1'];
		
		$email_types = $this->ClientEmailtype->find('first',array('conditions'=>array('AND'=>array('ClientEmailtype.id'=>$email_detail_history['ClientsEmailhistory']['client_emailtype_id']))));
		$type = $email_types['ClientEmailtype']['email_type'];
		$to = $to_adress;
		$subject = $email_detail_history['ClientsEmailhistory']['subject'];
		$message = $email_detail_history['ClientsEmailhistory']['message'];
		
		
		$this->set(compact('type','to','subject','message','id'));
		
	}
	
	
	
	public function draft($client_id = null, $id = null) 
	{
//	Configure :: write('debug', 2);
		debug($this->data);
		$this->loadModel('ClientsEmailhistory');
		$email_detail_history = $this->ClientsEmailhistory->find('all',array('conditions'=>array('ClientsEmailhistory.brands_estimate_id'=>$id)));
		debug($email_detail_history);
		if(!$email_detail_history)
		{
			$draft = "yes";
		}
		foreach($email_detail_history as $key => $value)
		{
			debug($value['ClientsEmailhistory']['status']);
			if($value['ClientsEmailhistory']['status'] == "Draft")
			{
				$draft = 1;
				$history_id = $value['ClientsEmailhistory']['id'];
			}
			if($value['ClientsEmailhistory']['status'] != "Draft")
			{
				$draft = "yes";
			}
			
		}
		debug($draft);
		if($draft == "yes") // For saving as draft for first time !
		{
			
				$draft = 0;
				$email1->data = null;
				$this->ClientsEmailhistory->create();
				$email1->data['ClientsEmailhistory']['client_id'] = $client_id;
				$email1->data['ClientsEmailhistory']['brands_estimate_id'] = $id;
				$email1->data['ClientsEmailhistory']['accounts_clientinvoice_id'] = '0';
				$email1->data['ClientsEmailhistory']['subject'] = $this->data['Estimate_email']['subject'];
				$email1->data['ClientsEmailhistory']['staff_id'] = $this->Session->read('Auth.staff.id');
				$email1->data['ClientsEmailhistory']['message'] = $this->data['Estimate_email']['content'];
				$email1->data['ClientsEmailhistory']['date'] =  date('Y-m-d h:m:s');
				$email1->data['ClientsEmailhistory']['status'] = "Draft";
				$email1->data['ClientsEmailhistory']['client_emailtype_id'] = '0';
				debug($email1->data);	
				if($this->ClientsEmailhistory->save($email1->data))
				{
					$this->Session->setFlash(__('Email saved as draft'));
					$this->redirect(array ('action' => 'index',1));
				}
				
					
		}
		
		debug($email->data);	
		debug($draft);
		debug($history_id);
		if($draft == 1) // For replacing the latest draft
		{
			$email->data = null;
			$email->data['ClientsEmailhistory']['id'] = $history_id;
			$email->data['ClientsEmailhistory']['client_id'] = $client_id;
			$email->data['ClientsEmailhistory']['brands_estimate_id'] = $id;
			$email->data['ClientsEmailhistory']['accounts_clientinvoice_id'] = '0';
			$email->data['ClientsEmailhistory']['subject'] = $this->data['Estimate_email']['subject'];
			$email->data['ClientsEmailhistory']['staff_id'] = $this->Session->read('Auth.staff.id');
			$email->data['ClientsEmailhistory']['message'] = $this->data['Estimate_email']['content'];
			$email->data['ClientsEmailhistory']['date'] =  date('Y-m-d h:m:s');
			$email->data['ClientsEmailhistory']['status'] = "Draft";
			$email->data['ClientsEmailhistory']['client_emailtype_id'] = '0';
			debug($email->data);	
			if($this->ClientsEmailhistory->save($email->data))
			{	
				$this->Session->setFlash(__('Email saved as draft'));
				$this->redirect(array ('action' => 'index',1));
			}
			
		}
		
		
	}
	

	/**
	 * delete method
	 *
	 * @param string $id
	 * @return void
	 * 
	 * 
	 */

	public function delete() 
	{
		
		//Configure :: write('debug', 2);
		debug($this->data);
		foreach($this->data['Estimates'] as $k => $v)
 		{
 			if($v == 1)
 			{
 				$save->data = null;
 				$this->BrandsEstimate->create();
 				$save->data['BrandsEstimate']['id'] = $k;
 				$save->data['BrandsEstimate']['active'] = 'N';
 				debug($save->data);
 				$this->BrandsEstimate->save($save->data);
 		
 				
 				
 			}
 			
 		}
 		$this->Session->setFlash(__('Estimate deleted'));
		$this->redirect(array('action'=>'index',1));
 		
 		
		
		
	}
	public function convert($id = null) 
	{
		//Configure :: write('debug', 2);
		debug($this->data);
		$this->set(compact('id'));
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('Currency');
		$this->loadModel('BrandsEstimatedetail');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('BillingUnit');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		
		
		
		
		$estimate_details = $this->BrandsEstimate->find('first', array ('conditions' => array ('BrandsEstimate.id' => $id)));
		debug($estimate_details);
		
		$this->loadModel('Currency');
		$currency_details = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$estimate_details['BrandsEstimate']['currency_id'])));
		$symbol = $currency_details['Currency']['symbol'];
		
		
		/*$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		debug($billingcurrency);
		$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$estimate_details['BrandsEstimate']['currency_id'])));
		debug($clientbilling);
			if($clientbilling['Currency']['id'] != $billingcurrency['Currency']['id'])
			{
				debug();
				$symbol = $clientbilling['Currency']['symbol'];
			}
			
			else
			{
				debug();
				$symbol = 1;
			}
			debug($symbol);*/
		$this->set(compact('symbol'));
		
		$clients = $this->Client->find('list', array ('fields' => array ('Client.id','Client.client_companyname'),'conditions' => array('Client.id'=>$estimate_details['BrandsEstimate']['client_id'])));
		$brands = $this->Brand->find('list', array ('fields' => array ('Brand.id','Brand.brandname'),'conditions' => array('Brand.id'=>$estimate_details['BrandsEstimate']['brand_id'])));
		$currency = $this->Currency->find('list', array ('fields' => array ('Currency.id','Currency.name'),'conditions' => array('Currency.id'=>$estimate_details['BrandsEstimate']['currency_id'])));
		$details_of_estimate = $this->BrandsEstimatedetail->find('all', array ('conditions' => array ('BrandsEstimatedetail.brands_estimate_id' => $id)));
		debug($details_of_estimate);
		if( ($this->data) || (!$this->data ))
		{
			debug("?");
		foreach($details_of_estimate as  $key => $value)
		{
			if($value['BrandsEstimatedetail']['account_tax_id'])
			{
				$tax_details_view = $this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$value['BrandsEstimatedetail']['account_tax_id'])));
				debug($tax_details_view);	
			}
			elseif($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
			{	
				$taxgrp_view = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
				debug($taxgrp_view);
			}
			if ($value['BrandsEstimatedetail']['brands_service_id']) 
			{
				$service_tick = 1;
				$service_details = $this->BrandsService->find('first', array ('conditions' => array ('BrandsService.id' => $value['BrandsEstimatedetail']['brands_service_id'])));
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['type'] = "Service";
				
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['item_name'] = $service_details['BrandsService']['service_name'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['description'] = $value['BrandsEstimatedetail']['description'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['account_tax_id'] = $value['BrandsEstimatedetail']['account_tax_id'] ;
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['accounts_taxgroup_id'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'] ;
				
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['tax'] = $taxgrp_view['AccountsTaxgroup']['groupname'];
					$final_taxes_view[$taxgrp_view['AccountsTaxgroup']['groupname']] += $value['BrandsEstimatedetail']['tax'];
					debug($value['BrandsEstimatedetail']['accounts_taxgroup_id']);
					$mappings = $this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
					debug($mappings);
					$test_tax[$tax_details_view['AccountsTax']['name']] += $value['BrandsEstimatedetail']['tax'];
				}
				
				elseif($value['BrandsEstimatedetail']['account_tax_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
					$final_taxes_view[$tax_details_view['AccountsTax']['name']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
				$final_values[$value['BrandsEstimatedetail']['brands_service_id']]['id'] = $value['BrandsEstimatedetail']['brands_service_id'] . "-s";

				
			}
			
			debug($test_tax);
			if ($value['BrandsEstimatedetail']['brands_package_id']) 
			{
				$package_tick = 1;
				$package_details = $this->BrandsPackage->find('first', array ('conditions' => array ('BrandsPackage.id' => $value['BrandsEstimatedetail']['brands_package_id'])));
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['item_name'] = $package_details['BrandsPackage']['package_name'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['description'] = $value['BrandsEstimatedetail']['description'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['id'] = $value['BrandsEstimatedetail']['brands_package_id'] . "-p";
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['account_tax_id'] = $value['BrandsEstimatedetail']['account_tax_id'] ;
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['accounts_taxgroup_id'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'] ;
				$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['type'] = "Package";
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['tax'] = $taxgrp_view['AccountsTaxgroup']['groupname'];
					$final_taxes_view[$taxgrp_view['AccountsTaxgroup']['groupname']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				
				elseif($value['BrandsEstimatedetail']['account_tax_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['brands_package_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
					$final_taxes_view[$tax_details_view['AccountsTax']['name']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				
			}
			if ($value['BrandsEstimatedetail']['billing_unit_id']) 
			{
				$unit_tick = 1;
				$unit_details = $this->BillingUnit->find('first', array ('conditions' => array ('BillingUnit.id' => $value['BrandsEstimatedetail']['billing_unit_id'])));
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['item_name'] = $unit_details['BillingUnit']['name'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['description'] = $value['BrandsEstimatedetail']['description'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['quantity'] = $value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['rate'] = (($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']))/$value['BrandsEstimatedetail']['quantity'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['discount'] = $value['BrandsEstimatedetail']['discount'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['tax'] = $tax_details_view['AccountsTax']['name'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['amount'] = $value['BrandsEstimatedetail']['totalcost'];
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['id'] = $value['BrandsEstimatedetail']['billing_unit_id'] . "-u";
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['account_tax_id'] = $value['BrandsEstimatedetail']['account_tax_id'] ;
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['accounts_taxgroup_id'] = $value['BrandsEstimatedetail']['accounts_taxgroup_id'] ;
				$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['type'] = "Unit";
				
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['tax'] = $taxgrp_view['AccountsTaxgroup']['groupname'];
					$final_taxes_view[$taxgrp_view['AccountsTaxgroup']['groupname']] += $value['BrandsEstimatedetail']['tax'];
			
				}
				
				elseif($value['BrandsEstimatedetail']['account_tax_id'])
				{
					$final_values[$value['BrandsEstimatedetail']['billing_unit_id']]['tax'] =  $tax_details_view['AccountsTax']['name'];
					$final_taxes_view[$tax_details_view['AccountsTax']['name']] += $value['BrandsEstimatedetail']['tax'];
			
				}			
			}
			
			$taxes += $value['BrandsEstimatedetail']['tax'];
			$sub_total_view += $value['BrandsEstimatedetail']['totalcost'];
			$net_view +=  ($value['BrandsEstimatedetail']['totalcost'] + $value['BrandsEstimatedetail']['tax']);
			
			
				
			if($value['BrandsEstimatedetail']['account_tax_id']) // Individual
				{
					$tax_details = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $value['BrandsEstimatedetail']['account_tax_id'])));
					debug($tax_details);
					$tax_percent = $tax_details['AccountsTax']['percent'];
					$price = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);
					debug($tax_percent);
					$taxx1[$tax_details['AccountsTax']['name']] += ($price * $tax_percent)/100;
					debug($taxx1);
					foreach($taxx1 as $qe => $qw)
					{
						if($qw!=0)
						{
							$taxx12[$qe] = $qw;
						}
					}
					$multiple = 1;
					$type = "Individual";
					
				}
				
				if($value['BrandsEstimatedetail']['accounts_taxgroup_id']) // Grp
				{
					$tax_grp_details = $this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$value['BrandsEstimatedetail']['accounts_taxgroup_id'])));
					debug($tax_grp_details);
					if($tax_grp_details['AccountsTaxgroup']['compounded'] == "Y")
					$compounded = "Y";
					else
					$compounded = "N";
					if($compounded == "Y")
					{
								$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								debug($tax_mappings_details);
								$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
								debug($amt);
								$tax_flag = 0;
								foreach($tax_mappings_details as $tax1 => $tax2)
								{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									if($tax_flag == 0)
									{
										debug($amt);
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price1[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price1);
										foreach($tax_price1 as $h1 => $h2){
											$amt += $h2 ;
										}
									}
													
													
									else
									{
										$finaltax_price[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										
										$tax_price2[$tax_values['AccountsTax']['name']] = (($amt * $tax_values['AccountsTax']['percent'])/100);
										debug($tax_price2);
									}
									++$tax_flag;
												
								}
								debug($tax_price1);
								
								debug($tax_price2);
								debug($finaltax_price);
								foreach($finaltax_price as $ft1 => $ft2)
								{
									if($ft2!=0)
									{
										
										$finaltax_price1[$ft1] += $ft2;
									}
								}
							//	$taxx2[$tax_details['AccountsTax']['name']] += $tax_price1 + $tax_price2;	
							
							$type = "CompY";
					}	
							
					if($compounded == "N")
					{
						$tax_mappings_details = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $tax_grp_details['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						debug($tax_mappings_details);
						$amt = ($value['BrandsEstimatedetail']['totalcost'] * 100)/(100-$value['BrandsEstimatedetail']['discount']);;
						debug($amt);
						foreach($tax_mappings_details as $tax1 => $tax2)
						{
									$tax_values = $this->AccountsTax->find('first', array ('conditions' => array ('AccountsTax.id' => $tax2['AccountsTaxgroupmapping']['accounts_tax_id'])));
									debug($tax_values);
									$finaltax_price2[$tax_values['AccountsTax']['name']] += (($amt * $tax_values['AccountsTax']['percent'])/100);
								//	debug($taxx3);
						}
								
								$type = "CompN";				
					}
										
							$multiple = 0;
					
			}
			
			
			
			
			
			
		}
		
	}
	debug($taxx12);
		debug($finaltax_price1);
		debug($finaltax_price2);
		
		foreach($taxx12 as $k1 => $v1)
					{
						$finalTTT[$k1] = $finalTTT[$k1]+$v1;
					}
					
					foreach($finaltax_price1 as $k2 => $v2)
					{
						$finalTTT[$k2] = $finalTTT[$k2]+$v2;
					}
					
					foreach($finaltax_price2 as $k3 => $v3)
					{
						$finalTTT[$k3] = $finalTTT[$k3]+$v3;
					}
					
					debug($finalTTT);
		
	
	
	
		$description =  $estimate_details['BrandsEstimate']['description'];
		$total =  $estimate_details['BrandsEstimate']['net'];
		$discount = $estimate_details['BrandsEstimate']['discount'];
		$notes = $estimate_details['BrandsEstimate']['customer_notes'];
		$terms = $estimate_details['BrandsEstimate']['terms'];
		debug($final_values);
		debug($sub_total_view);
		debug($net_view);
		$this->set(compact('clients','finalTTT','brands','currency','final_values','sub_total_view','net_view','taxes','notes','terms','description','discount','total'));
		
		
		
		//For converting to invoice . . 
		
		if ($this->request->is('post')) 
		{
			if (!empty ($this->data)) 
			{
				debug($final_values);
				$this->AccountsClientinvoice->create();

				if (1) 
				{
					$save->data = null;
					$save->data['AccountsClientinvoice']['client_id'] = $this->data['AccountsClientinvoice']['client'];
					$save->data['AccountsClientinvoice']['description'] = $this->data['AccountsClientinvoice']['description'];
					$save->data['AccountsClientinvoice']['invoiced_date'] = date('Y-m-d', strtotime($this->data['AccountsClientinvoice']['invoice_date']));
					$save->data['AccountsClientinvoice']['service_startdate'] = date('Y-m-d', strtotime($this->data['AccountsClientinvoice']['service_startdate']));
					$save->data['AccountsClientinvoice']['due_date'] = date('Y-m-d', strtotime($this->data['AccountsClientinvoice']['due_date']));
					$save->data['AccountsClientinvoice']['brand_id'] = $this->data['AccountsClientinvoice']['brand'];
					$save->data['AccountsClientinvoice']['late_feedetails'] = $this->data['AccountsClientinvoice']['latefee'];
					$save->data['AccountsClientinvoice']['discounts'] = $this->data['AccountsClientinvoice']['discount'];
					$save->data['AccountsClientinvoice']['currency_id'] = $this->data['AccountsClientinvoice']['currency'];
					$save->data['AccountsClientinvoice']['invoice_amount'] = $this->data['AccountsClientinvoice']['total'];
					$save->data['AccountsClientinvoice']['status'] = "overdue";
					$save->data['AccountsClientinvoice']['paymentdue_term'] = $this->data['AccountsClientinvoice']['term'];
					$save->data['AccountsClientinvoice']['client_notes'] = $this->data['AccountsClientinvoice']['notes'];
					$save->data['AccountsClientinvoice']['client_termsandcondition'] = $this->data['AccountsClientinvoice']['terms'];
					$this->AccountsClientinvoice->save($save->data);
					$invoice_id = $this->AccountsClientinvoice->getLastInsertId();
					debug($final_values);
					
					
					
					
					//Ledger Update and Payment detail Update
					
					
					
					
					
					 /**********************************Spot Conversion Logic ****************************************************** 
								 	***************************************************************************************************************
								 	*/
								 	 $finalamount=$this->data['AccountsClientinvoice']['total'];
								 	$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
								 	if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
											$from=$fromcur['Currency']['name'];
											$to=$billingcurrency['Currency']['name'];
											
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
		 									debug($handle);
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											
											$allData = explode(',',$result);  //Get all the contents to an array 
											
											$ledgeramount=$finalamount*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
											
										}
										else
										{
											$ledgeramount=$finalamount;
										}
								 	
								 	/**************************************************************************************************************
								 	 **********************************Spot Conversion Logic ****************************************************** 
								 	***************************************************************************************************************
								 	*/
								 	
								 	
								 	$last1=$this->AccountsClientinvoice->getLastInsertID();
								 	$this->AccountsLedger->create();
								 	$ledger->data=null;
								 	$ledger->data['AccountsLedger']['transaction_id']=$last1;
								 	$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
								 	$accounttype=$this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accounts_accounts['AccountsAccount']['account_type_id'])));
								 	$goldenrule=$this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accounttype['AccountType']['accounts_goldenrule_id'])));
								 	
								 	
								 	$accountbal=$this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accounts_accounts['AccountsAccount']['id']),'fields'=>array('AccountsLedger.balance'),'order'=>array('AccountsLedger.id DESC')));
								 	
								 	if(!empty($accountbal)){
								 		$bbaalance = $accountbal['AccountsLedger']['balance'];
								 	}else{
								 		$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
								 	}
								 	$ledger->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
								 	$ledger->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
								 	$ledger->data['AccountsLedger']['payment_description']='Credit Amount';
								 //	$ledger->data['AccountsLedger']['debit']=$finalamount;
								 	
								 	if($goldenrule['AccountsGoldenrule']['increase']=='Debit')
								 		{
								 			$ledger->data['AccountsLedger']['credit']=$ledgeramount;
								 			$ledger->data['AccountsLedger']['debit']=0;
								 		}
								 	else
								 		{
								 			$ledger->data['AccountsLedger']['debit']=$ledgeramount;
								 			$ledger->data['AccountsLedger']['credit']=0;
								 		}
								 	$ledger->data['AccountsLedger']['is_neutral']='Y';
								 	$ledger->data['AccountsLedger']['balance']=$bbaalance+$ledgeramount;
								 	debug($ledger->data);
								 if($this->AccountsLedger->save($ledger->data))
								 {
								 	$this->AccountsLedger->create();
								 	$ledgerincome->data=null;
								 	$ledgerincome->data['AccountsLedger']['transaction_id']=$last1;
								 	$accounts_accounts_income=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Sales')));
								 	$accounttype_income=$this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accounts_accounts_income['AccountsAccount']['account_type_id'])));
								 	$goldenrule_income=$this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accounttype_income['AccountType']['accounts_goldenrule_id'])));
								 	$accountbal_income=$this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accounts_accounts_income['AccountsAccount']['id']),'fields'=>array('AccountsLedger.balance'),'order'=>array('AccountsLedger.id DESC')));
								 	
								 	if(!empty($accountbal_income)){
								 		$bbaalance_income = $accountbal_income['AccountsLedger']['balance'];
								 	}else{
								 		$bbaalance_income = $accounts_accounts_income['AccountsAccount']['opening_balance'];
								 	}
								 	$ledgerincome->data['AccountsLedger']['accounts_account_id']=$accounts_accounts_income['AccountsAccount']['id'];
								 	$ledgerincome->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
								 	$ledgerincome->data['AccountsLedger']['payment_description']='Amount Credited For Invoice '.$last1;
								 	
								 	if($goldenrule['AccountsGoldenrule']['increase']=='Credit')
								 		{
								 			$ledgerincome->data['AccountsLedger']['credit']=$ledgeramount;
								 			$ledgerincome->data['AccountsLedger']['debit']=0;
								 		}
								 	else
								 		{
								 			$ledgerincome->data['AccountsLedger']['debit']=$ledgeramount;
								 			$ledgerincome->data['AccountsLedger']['credit']=0;
								 		}
								 	$ledgerincome->data['AccountsLedger']['balance']=$bbaalance_income+$ledgeramount;
								 	
								 	$this->AccountsLedger->save($ledgerincome->data);
								 	
								 	
								 	
								 	$this->AccountsClientpaymentdetail->create();
								 	$clientpay->data=null;
								 	$clientpay->data['AccountsClientpaymentdetail']['client_id']=$this->data['AccountsClientinvoice']['client'];
								 	$clientpay->data['AccountsClientpaymentdetail']['accounts_clientinvoice_id']=$last1;
								 	if($this->data['brand'])
								 		{
								 			$clientpay->data['AccountsClientpaymentdetail']['brand_id']=$this->data['brand'];
								 		}
								 	else
								 		{
								 			$clientpay->data['AccountsClientpaymentdetail']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
								 		}
								 	
								 	$clientpay->data['AccountsClientpaymentdetail']['paid']='N';
								 	$clientpay->data['AccountsClientpaymentdetail']['paid_amount']='0';
								 	$clientpay->data['AccountsClientpaymentdetail']['invoiced_amount']=$finalamount;
								 	$clientpay->data['AccountsClientpaymentdetail']['due']=$finalamount;
								 	$clientpay->data['AccountsClientpaymentdetail']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
								 	$this->AccountsClientpaymentdetail->save($clientpay->data);
								 }
					
					
					
					
					
					
					
					
					
					
					
					//End
					
					
					
					
					
					
					
					
					
					
					
					foreach($final_values as $f1 => $f2)
					{
						$this->AccountsClientinvoicedetail->create();
						$detail->data = null;
						if($f2['type'] == "Service")
						{
							$detail->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id'] = $invoice_id;
							$detail->data['AccountsClientinvoicedetail']['unit_type'] = "service";
							$detail->data['AccountsClientinvoicedetail']['brands_package_id'] = '0';
							$detail->data['AccountsClientinvoicedetail']['billing_unit_id'] = '0';
							$detail->data['AccountsClientinvoicedetail']['brands_service_id'] = $f1;
							$detail->data['AccountsClientinvoicedetail']['quantity'] = $f2['quantity'];
							$detail->data['AccountsClientinvoicedetail']['active'] = 'Y';
							$detail->data['AccountsClientinvoicedetail']['totalcost'] = $f2['amount'];
							if($f2['account_tax_id'])
							{
								debug($f2['account_tax_id']);
								$detail->data['AccountsClientinvoicedetail']['accounts_tax_id'] = $f2['account_tax_id'];
								$detail->data['AccountsClientinvoicedetail']['accounts_taxgroup_id'] = '0';
								
							}
							if($f2['accounts_taxgroup_id'])
							{
								$detail->data['AccountsClientinvoicedetail']['accounts_taxgroup_id'] = $f2['accounts_taxgroup_id'];
								$detail->data['AccountsClientinvoicedetail']['accounts_tax_id'] = '0';
							}
							
							$detail->data['AccountsClientinvoicedetail']['netcost'] = $f2['amount'];
							$detail->data['AccountsClientinvoicedetail']['description'] = $f2['description'];
							$detail->data['AccountsClientinvoicedetail']['discount'] = $f2['discount'];
							
							
						}
						
						if($f2['type'] == "Package")
						{
							$detail->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id'] = $invoice_id;
							$detail->data['AccountsClientinvoicedetail']['unit_type'] = "package";
							$detail->data['AccountsClientinvoicedetail']['brands_package_id'] = $f1;
							$detail->data['AccountsClientinvoicedetail']['billing_unit_id'] = '0';
							$detail->data['AccountsClientinvoicedetail']['brands_service_id'] = '0';
							$detail->data['AccountsClientinvoicedetail']['quantity'] = $f2['quantity'];
							$detail->data['AccountsClientinvoicedetail']['active'] = 'Y';
							$detail->data['AccountsClientinvoicedetail']['totalcost'] = $f2['amount'];
							if($f2['account_tax_id'])
							{
								debug($f2['account_tax_id']);
								$detail->data['AccountsClientinvoicedetail']['accounts_tax_id'] = $f2['account_tax_id'];
								$detail->data['AccountsClientinvoicedetail']['accounts_taxgroup_id'] = '0';
								
							}
							if($f2['accounts_taxgroup_id'])
							{
								$detail->data['AccountsClientinvoicedetail']['accounts_taxgroup_id'] = $f2['accounts_taxgroup_id'];
								$detail->data['AccountsClientinvoicedetail']['accounts_tax_id'] = '0';
							}
							
							$detail->data['AccountsClientinvoicedetail']['netcost'] = $f2['amount'];
							$detail->data['AccountsClientinvoicedetail']['description'] = $f2['description'];
							$detail->data['AccountsClientinvoicedetail']['discount'] = $f2['discount'];
							
							
						}
						
						if($f2['type'] == "Unit")
						{
							$detail->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id'] = $invoice_id;
							$detail->data['AccountsClientinvoicedetail']['unit_type'] = "unit";
							$detail->data['AccountsClientinvoicedetail']['brands_package_id'] = '0';
							$detail->data['AccountsClientinvoicedetail']['billing_unit_id'] = $f1;
							$detail->data['AccountsClientinvoicedetail']['brands_service_id'] = '0';
							$detail->data['AccountsClientinvoicedetail']['quantity'] = $f2['quantity'];
							$detail->data['AccountsClientinvoicedetail']['active'] = 'Y';
							$detail->data['AccountsClientinvoicedetail']['totalcost'] = $f2['amount'];
							if($f2['account_tax_id'])
							{
								debug($f2['account_tax_id']);
								$detail->data['AccountsClientinvoicedetail']['accounts_tax_id'] = $f2['account_tax_id'];
								$detail->data['AccountsClientinvoicedetail']['accounts_taxgroup_id'] = '0';
								
							}
							if($f2['accounts_taxgroup_id'])
							{
								$detail->data['AccountsClientinvoicedetail']['accounts_taxgroup_id'] = $f2['accounts_taxgroup_id'];
								$detail->data['AccountsClientinvoicedetail']['accounts_tax_id'] = '0';
							}
							
							$detail->data['AccountsClientinvoicedetail']['netcost'] = $f2['amount'];
							$detail->data['AccountsClientinvoicedetail']['description'] = $f2['description'];
							$detail->data['AccountsClientinvoicedetail']['discount'] = $f2['discount'];
							
							
						}
						
						debug($detail->data);
						$this->AccountsClientinvoicedetail->save($detail->data);
				
					}
					
					$inactive->data = null;
					$this->BrandsEstimate->create();
					$inactive->data['BrandsEstimate']['id'] = $id;
					$inactive->data['BrandsEstimate']['active'] = "C";
					$this->BrandsEstimate->save($inactive->data);
					
				}
				debug($save->data);
				
											
				//$this->Session->setFlash(__('Estimate has been saved'));
				$this->redirect(array ('controller'=>'accounts_clientinvoices','action' => 'view',$invoice_id));
			} 
			
			else 
			{
				$this->Session->setFlash(__('The estimate could not be saved. Please, try again.'));
			}

		}
		
	}
	
	
	public function download_inv($id = null)
	{
		//configure::write('debug',2);
		$this->loadModel('BrandsEstimatedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$est_details = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
		$branddetails = $this->Brand->find('first',array('conditions'=>array('Brand.id'=>$est_details['BrandsEstimate']['brand_id'])));
		$brandname = $branddetails['Brand']['brandname'];
		$date =  AppModel :: dateFormat($est_details['BrandsEstimate']['estimate_date']);
		$clientdetails = $this->Client->find('first',array('conditions'=>array('Client.id'=>$est_details['BrandsEstimate']['client_id'])));
		$clientname = $clientdetails['Client']['client_companyname'];
		$subtotal = $est_details['BrandsEstimate']['totalcost'];
		$taxes = $est_details['BrandsEstimate']['totaltax'];
		$net = $est_details['BrandsEstimate']['net'];
		$note = $est_details['BrandsEstimate']['customer_notes'];
		$terms = $est_details['BrandsEstimate']['terms'];
		$this->set(compact('id','brandname','date','clientname','subtotal','taxes','net','note','terms'));
		
		
		
		
	
		
	}
	
	public function download_inv2($id = null)
	{
		//configure::write('debug',2);
		
		$this->loadModel('BrandsEstimatedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$est_details = $this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
		$download_estimate_id=$est_details['BrandsEstimate']['id'];
		$download_estimate_date=$est_details['BrandsEstimate']['estimate_date'];
		
		$this->set(compact('download_estimate_id','download_estimate_date'));
		
		$estimatedetails=$this->BrandsEstimatedetail->find('all',array('conditions'=>array('BrandsEstimatedetail.brands_estimate_id'=>$id)));
		foreach($estimatedetails as $k=>$v)
		{
			if(!empty($v['BrandsEstimatedetail']['billing_unit_id']) || $v['BrandsEstimatedetail']['billing_unit_id']!=0)
			{
				$unit=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v['BrandsEstimatedetail']['billing_unit_id']),'fields'=>array('BillingUnit.name')));
				$download[$v['BrandsEstimatedetail']['id']]['unit']=$unit['BillingUnit']['name'];
			}
			if(!empty($v['BrandsEstimatedetail']['brands_service_id']) || $v['BrandsEstimatedetail']['brands_service_id']!=0)
			{
				$unit=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v['BrandsEstimatedetail']['brands_service_id']),'fields'=>array('BrandsService.service_name')));
				$download[$v['BrandsEstimatedetail']['id']]['unit']=$unit['BrandsService']['service_name'];
			}
			if(!empty($v['BrandsEstimatedetail']['brands_package_id']) || $v['BrandsEstimatedetail']['brands_package_id']!=0)
			{
				$unit=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v['BrandsEstimatedetail']['brands_package_id']),'fields'=>array('BrandsPackage.package_name')));
				$download[$v['BrandsEstimatedetail']['id']]['unit']=$unit['BrandsPackage']['package_name'];
			}
			if(!empty($v['BrandsEstimatedetail']['accounts_tax_id']) || $v['BrandsEstimatedetail']['accounts_tax_id']!=0)
			{
				$tax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['BrandsEstimatedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.id','AccountsTax.name','AccountsTax.percent')));
				$download[$v['BrandsEstimatedetail']['id']]['taxname'][$tax['AccountsTax']['id']]=$tax['AccountsTax']['name'];
				$wt=$v['BrandsEstimatedetail']['netcost'];
				$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$tax['AccountsTax']['id']]=($v['BrandsEstimatedetail']['totalcost']-$wt);
				
			}
			if(!empty($v['BrandsEstimatedetail']['accounts_taxgroup_id']) || $v['BrandsEstimatedetail']['accounts_taxgroup_id']!=0)
			{
				$taxgroup=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$v['BrandsEstimatedetail']['accounts_taxgroup_id'])));
				if($taxgroup['AccountsTaxgroup']['compounded']=='Y')
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						if($taxableamount==0)
						{
							$taxableamount=$v['BrandsEstimatedetail']['netcost'];
						}
						$download[$v['BrandsEstimatedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						$taxableamount=$taxableamount+$percent*$taxableamount;
					}
				}
				else
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						
							$taxableamount=$v['BrandsEstimatedetail']['netcost'];
						
						$download[$v['BrandsEstimatedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['BrandsEstimatedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						
					}
				}
			}
			//$download[$v['AccountsClientinvoicedetail']['id']]['taxname']
			
			$download[$v['BrandsEstimatedetail']['id']]['description']=$v['BrandsEstimatedetail']['description'];
			$download[$v['BrandsEstimatedetail']['id']]['quantity']=$v['BrandsEstimatedetail']['quantity'];
			$download[$v['BrandsEstimatedetail']['id']]['rate']=($v['BrandsEstimatedetail']['netcost']/$v['BrandsEstimatedetail']['quantity']);
			$download[$v['BrandsEstimatedetail']['id']]['amount']=$v['BrandsEstimatedetail']['totalcost'];
			$download[$v['BrandsEstimatedetail']['id']]['discount']=$v['BrandsEstimatedetail']['discount'];
			$totalamount=$totalamount+$v['BrandsEstimatedetail']['totalcost'];
			$discount_raw=($v['BrandsEstimatedetail']['netcost']*$v['BrandsEstimatedetail']['discount'])/100;
			$discount_final=$discount_final+$discount_raw;
		}
		
		$this->set(compact('download','totalamount','discount_final'));
		
		$estimatesym=$this->BrandsEstimate->find('first',array('conditions'=>array('BrandsEstimate.id'=>$id)));
		if($estimatesym['BrandsEstimate']['currency_id'])
			{
				$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$estimatesym['BrandsEstimate']['currency_id']),'fields'=>array('Currency.symbol','Currency.name')));
			}
		else
			{
				$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y'),'fields'=>array('Currency.symbol','Currency.name')));
			}
		
		
		if($currencydown['Currency']['name']=='INR')
			{
				$symbol='INR';
			}
		else
			{
				$symbol=$currencydown['Currency']['symbol'];
			}
		
		$this->set(compact('symbol'));
		
		
		
		$branddetails = $this->Brand->find('first',array('conditions'=>array('Brand.id'=>$est_details['BrandsEstimate']['brand_id'])));
		$brandname = $branddetails['Brand']['brandname'];
		$date =  AppModel :: dateFormat($est_details['BrandsEstimate']['estimate_date']);
		$clientdetails = $this->Client->find('first',array('conditions'=>array('Client.id'=>$est_details['BrandsEstimate']['client_id'])));
		
		
		$download_clientname=$clientdetails['Client']['first_name'].' '.$clientdetails['Client']['last_name'];
		$download_clientaddress=$clientdetails['Client']['address'];
		$download_clientcompanyname=$clientdetails['Client']['client_companyname'];
		
		
		$download_estimatesubtotal=0;
		foreach($estimatedetails as $invdeta)
		{
			$download_estimatesubtotal=$download_estimatesubtotal+$invdeta['BrandsEstimatedetail']['totalcost'];
			$taxdetail[$invdeta['BrandsEstimatedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['BrandsEstimatedetail']['accounts_tax_id'])));
		}
		$download_tax=$est_details['BrandsEstimate']['totalcost']-$download_estimatesubtotal;
		$download_estimateamount=$est_details['BrandsEstimate']['totalcost'];
		
		
		
		
		
		
		
		
		
		
		$this->set(compact('id','brandname','date'));
		$this->set(compact('download_clientname','download_clientaddress','download_clientcompanyname','download_estimateamount'));
		$this->set(compact('download_invoicedamount','download_invoicesubtotal','download_tax','taxdetail','download_estimatesubtotal'));
		$this->layout = 'pdf'; //this will use the pdf.ctp layout 
        $this->render(); 
		
		
		
	
		
	}
	

}