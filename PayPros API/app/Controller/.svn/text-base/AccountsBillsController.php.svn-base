<?php
App::uses('AppController', 'Controller');
CakePlugin::load('Uploader');
CakePlugin::load('Export'); 
App::import('Vendor', 'Uploader.Uploader');

/**
 * AccountsBills Controller
 *
 * @property AccountsBill $AccountsBill
 */
class AccountsBillsController extends AppController {
var $helpers = array('Html', 'Form','Ajax', 'Js','Javascript','Cache');
//public $cacheAction = "1 hour";
public $components = array('Email', 'RequestHandler','Session','Export.Export');
public $actsAs = array('Uploader.Attachment');
/*var $components = array('Autocomplete'); */
 
//var $components = array('Session', 'RequestHandler'); 
 //public $paginate = array('limit' =>3,'order' => array( 'AccountsBill.id' => 'asc'));
 
 	public function beforeFilter(){
		parent::beforeFilter();
		$this->loadModel('Aco');
		$this->loadModel('ArosAco');
		$url = $this->params['action'];
		$controller = $this->params['controller'];
			$module_name = 'Bills';
			$aco = $this->Aco->find('first',array('conditions'=>array('Aco.alias'=>$module_name)));
			$aros_acosDetails = $this->ArosAco->find('first',array('conditions'=>array('ArosAco.aro_id'=>$this->Session->read('Auth1.User.Aro_id'),'ArosAco.aco_id'=>$aco['Aco']['id'])));
			$this->Session->write('Auth1.User.Permission',$aros_acosDetails);
			if($aros_acosDetails['ArosAco']['_create'] == 1){
	    		$proceed=1;
		    }
		    if($aros_acosDetails['ArosAco']['_read'] == 1){
	    		$proceed=1;
		    }
		    if($aros_acosDetails['ArosAco']['_update'] == 1){
	    		$proceed=1;
	    	}
		    if($aros_acosDetails['ArosAco']['_delete'] == 1){
		    	$proceed=1;
	    	}	    
	    
	    if(!$proceed){
	    	$this->redirect(array('controller'=>'users','action' => 'noaccess'));
	    }
    }
 
/**
 * index method
 *
 * @return void
 */
	public function index($flag = null,$yes = null,$dashboard_flag = null,$search_field = NULL,$search_data = NULL,$from=NULL,$to=NULL) {
		//Configure::write('debug',2);
		debug($this->data);
		$month=null;
		$month['01']="January";
		$month['02']="February";
		$month['03']="March";
		$month['04']="April";
		$month['05']="May";
		$month['06']="June";
		$month['07']="July";
		$month['08']="August";
		$month['09']="September";
		$month['10']="October";
		$month['11']="November";
		$month['12']="December";
 		$year=null;
 		$year[date('Y')]=date('Y');
 		$year[date('Y')-1]=date('Y')-1;
    	$year[date('Y')+1]=date('Y')+1;
    	$this->set(compact('year','month'));
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('ChequePaymentdetail');
		$this->AccountsBill->recursive = 0;
		$this->AccountsRegularvendor->recursive = -1;
		debug($this->data['Search']['search_by']);
	//	Cache::delete('final');
		//if(!$accountsBills = Cache::read('final')){
		//debug($this->data);
		if($flag == '- Search -'){
			$flag = null;
		}
		$LD = FALSE;
		$chkDate = explode('-',$yes);
		if($this->data['Bills']['from'] || $from) {
			if(!empty($from)) {
				$from = $from;
				$to = $to;
			} else {
				$from = date('Y-m-d',strtotime($this->data['Bills']['from']));
				$to = date('Y-m-d',strtotime($this->data['Bills']['to']));
			}
			$this->set(compact('from','to'));
	//		$this->paginate = array('conditions'=>array('AND'=>array('AccountsBill.bill_recieveddate '=>$this->data['Bills']['from'],'AccountsBill.last_date LIKE'=>$this->data['Bills']['to'])));
			$this->paginate = array('conditions'=>array('AND'=>array('AccountsBill.bill_recieveddate between ? and ? '=> array($from,$to))));
			
			$final = $this->paginate();
			foreach($final as $key => $val) {
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
				}
				$this->ChequePaymentdetail->unBindModel(array('belongsTo'=>array('AccountsBill')));
				$ledgerDues[$val['AccountsBill']['id']] = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$val['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N')));
			}
			
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] = $v['AccountsBill']['amount'] -$v['AccountsBill']['billamount'] ;
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
			$data = $this->AccountsBill->find('first', array('conditions'=>array('AND'=>array('AccountsBill.bill_recieveddate between ? and ? '=> array($from,$to))),'fields'=>array('SUM(amount)','SUM(billamount)')));
			debug($data);
			$netTotall = $data[0]['SUM(amount)'] - $data[0]['SUM(billamount)'];
			
		// Total amount that has to be displayed at the bottom ..
			$this->set(compact('totalamount','netTotall','ledgerDues'));
			$this->set('accountsBills',$this->paginate());
		}
			
		
		elseif($this->data['Search']['search_by'] == "Vendor") {
			$finding_vendor = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AND'=>array('AccountsRegularvendor.company_name LIKE'=>$this->data['Search']['vendor'].'%','AccountsRegularvendor.active'=>'Y'))));
			if(!empty($finding_vendor)) {
				$this->paginate = array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$finding_vendor['AccountsRegularvendor']['id']));
				$final = $this->paginate();
			} else {
				$this->paginate = array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>0));
				$final = $this->paginate();
			}
			foreach($final as $key => $val) {
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
				}
				$this->ChequePaymentdetail->unBindModel(array('belongsTo'=>array('AccountsBill')));
				$ledgerDues[$val['AccountsBill']['id']] = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$val['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N')));
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] =$v['AccountsBill']['amount'] - $v['AccountsBill']['billamount'];
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
		// Total amount that has to be displayed at the bottom ..
			$this->set('accountsBills',$this->paginate());
			$this->set(compact('totalamount','ledgerDues'));
			
		}
		
		elseif($this->data['Search']['search_by'] == "Bill") {
			$finding_bill = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$this->data['Search']['vendor'])));
			$this->paginate = array('conditions'=>array('AccountsBill.id'=>$finding_bill['AccountsBill']['id']));
			$final = $this->paginate();
			foreach($final as $key => $val) {
		//		debug($val);
				foreach($val as $val1) {
					
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
					
				}
				$this->ChequePaymentdetail->unBindModel(array('belongsTo'=>array('AccountsBill')));
				$ledgerDues[$val['AccountsBill']['id']] = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$val['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N')));
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] =$v['AccountsBill']['amount'] - $v['AccountsBill']['billamount'];
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
			
			// Total amount that has to be displayed at the bottom ..
			$this->set(compact('totalamount','ledgerDues'));
			$this->set('accountsBills',$this->paginate());
		} elseif($this->data['Search']['search_by'] == "Invoice") {
			$finding_invoice = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.invoice_no'=>$this->data['Search']['vendor'])));
			if(!empty($finding_invoice)) {
				$this->paginate = array('conditions'=>array('AccountsBill.invoice_no'=>$finding_invoice['AccountsBill']['invoice_no']));
			} else {
				$this->paginate = array('conditions'=>array('AccountsBill.invoice_no'=>0));
			} 
			
			$final = $this->paginate();
			foreach($final as $key => $val) {
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
				}
				$this->ChequePaymentdetail->unBindModel(array('belongsTo'=>array('AccountsBill')));
				$ledgerDues[$val['AccountsBill']['id']] = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$val['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N')));
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] = $v['AccountsBill']['amount'] - $v['AccountsBill']['billamount'];
					$vends = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$v['AccountsBill']['accounts_regularvendor_id'])));
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
			//Total amount that has to be displayed at the bottom ..
			$this->set(compact('totalamount','ledgerDues'));
			$this->set('accountsBills',$this->paginate());
		}
		
		elseif($this->data['Search']['search_by'] == "Voucher") {
			$finding_voucher = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.voucher_no'=>$this->data['Search']['vendor'])));
	//		debug($finding_voucher);
			$this->paginate = array('conditions'=>array('AccountsBill.voucher_no'=>$finding_voucher['AccountsBill']['voucher_no']));
			$final = $this->paginate();
	//		debug($final);
			foreach($final as $key => $val) {
		//		debug($val);
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
				}
				$this->ChequePaymentdetail->unBindModel(array('belongsTo'=>array('AccountsBill')));
				$ledgerDues[$val['AccountsBill']['id']] = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$val['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N')));
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] =$v['AccountsBill']['amount'] - $v['AccountsBill']['billamount'];
				}
			}
		
			foreach($final2 as $f1=>$f2)
			{
				foreach($f2 as $f=>$ff)
				{
					$totalamount +=$ff;
				}
			}
		//	debug($totalamount);// Total amount that has to be displayed at the bottom ..
			$this->set(compact('totalamount'));
			$this->set('accountsBills',$this->paginate());
		}
		
		
		elseif($this->data['Search']['search_by'] == "Amount") {
			$finding_amount = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.amount'=>$this->data['Search']['vendor'])));
	//		debug($finding_amount);
			if(!empty($finding_amount)) {
				$this->paginate = array('conditions'=>array('AccountsBill.amount'=>$finding_amount['AccountsBill']['amount']));
			} else {
				$this->paginate = array('conditions'=>array('AccountsBill.amount'=>0));
			}
			
			$final = $this->paginate();
	//		debug($final);
			foreach($final as $key => $val) {
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
				}
				$this->ChequePaymentdetail->unBindModel(array('belongsTo'=>array('AccountsBill')));
				$ledgerDues[$val['AccountsBill']['id']] = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$val['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N')));
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] =$v['AccountsBill']['amount'] - $v['AccountsBill']['billamount'] ;
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
		// Total amount that has to be displayed at the bottom ..
			$this->set(compact('totalamount'));
			$this->set('accountsBills',$this->paginate());
		}
		
		
		
		elseif(!$this->data['Search']['search_by'])
		{
			//Code for golbal search
			if (!empty($search_field)) {
					if ($search_field == 'id') {
						$this->paginate = array ('conditions' => array ('AccountsBill.id' => $search_data),'order' => array ('AccountsBill.id' => 'ASC'));
						$final = $this->paginate();						
					}
					if ($search_field == 'accounts_regularvendor_id') {
						$this->loadModel('AccountsRegularvendor');
						$vendor_id = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.company_name' => $search_data, 'AccountsRegularvendor.active' => 'Y'),'fields'=>array('AccountsRegularvendor.id')));
						if(!empty($vendor_id)) {
							$this->paginate = array ('conditions' => array ('AccountsBill.accounts_regularvendor_id'=>$vendor_id['AccountsRegularvendor']['id']),'order' => array ('AccountsBill.id' => 'ASC'));
						} else {
							$this->paginate = array ('conditions' => array ('AccountsBill.accounts_regularvendor_id'=>0),'order' => array ('AccountsBill.id' => 'ASC'));
						}
						
						$final = $this->paginate();						
					}
					if ($search_field == 'invoice_no') {
						$this->paginate = array ('conditions' => array ('AccountsBill.invoice_no'=>$search_data),'order' => array ('AccountsBill.id' => 'ASC'));
						$final = $this->paginate();
											}					
					if ($search_field == 'voucher_no') {
						$this->paginate = array ('conditions' => array ('AccountsBill.voucher_no'=> $search_data),'order' => array ('AccountsBill.id' => 'ASC'));
						$final = $this->paginate();
					}
				}
			//End of global search
			/**Start of LedgerDue (Code : Ganesh)**/
		if($flag == 3) {
			$LD = TRUE;
			$this->paginate = array('conditions'=>array('AccountsBill.ledger_due'=>'Y'), 'order' => array('AccountsBill.last_date' => 'DESC'));
			$final = $this->paginate();
			$this->loadModel('ChequePaymentdetail');
			$this->ChequePaymentdetail->recursive = 0;
			foreach($final as $val){
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));
					$final2[$val['AccountsBill']['id']]['amount'] = $val['AccountsBill']['amount'] ;
					$totalamount +=($val['AccountsBill']['amount']-$val['AccountsBill']['billamount']);					
				}
				$this->ChequePaymentdetail->unBindModel(array('belongsTo'=>array('AccountsBill')));
				$ledgerDues[$val['AccountsBill']['id']] = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$val['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N')));
			}
			$totalAmount = $this->AccountsBill->query("select sum(amount) from accounts_bills where ledger_due = 'Y' and paid_status != 'Y'");
			$totalPaidAmount = $this->AccountsBill->query("select sum(billamount) from accounts_bills where ledger_due = 'Y' and paid_status != 'Y'");
			$netTotall = $totalAmount[0][0]['sum(amount)'] - $totalPaidAmount[0][0]['sum(billamount)'];
			//$total = $this->AccountsBill->find('all',array('fields' => array('sum(AccountsBill.cost * Model.quantity)   AS ctotal'), 'conditions'=>array('RequestedItem.purchase_request_id'=>$this->params['named']['po_id'])));
			$this->set(compact('totalamount','ledgerDues','netTotall','LD'));
			$this->set('accountsBills',$this->paginate());
			
		/**End of LedgerDue (Code : Ganesh)**/
		} elseif($flag == "2" || $dashboard_flag == 'overdue') {  // OverDue Bills .. 
			if($dashboard_flag == 'overdue'){
				$this->paginate = array('conditions'=>array(/*'OR'=>array('AccountsBill.paid_status'=>array('Due','N')),*/'AccountsBill.last_date <='=>date('Y-m-d'),'AccountsBill.amount > AccountsBill.billamount'), 'order' => array('AccountsBill.last_date' => 'DESC'));
			}else{
				$this->paginate = array('conditions'=>array(/*'OR'=>array('AccountsBill.paid_status'=>array('Due','N')),*/'AccountsBill.last_date <='=>date('Y-m-d'),'AccountsBill.amount > AccountsBill.billamount'), 'order' => array('AccountsBill.last_date' => 'DESC'));
			}
			$final = $this->paginate();
			foreach($final as $key => $val) {
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
				}
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] = $v['AccountsBill']['amount'] -  $v['AccountsBill']['billamount'];
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
			$data = $this->AccountsBill->find('first', array('conditions'=>array(/*'OR'=>array('AccountsBill.paid_status'=>array('Due','N')),*/'AccountsBill.last_date <='=>date('Y-m-d'),'AccountsBill.amount > AccountsBill.billamount'),'fields'=>array('SUM(amount)','SUM(billamount)')));
			$netTotall = $data[0]['SUM(amount)'] - $data[0]['SUM(billamount)'];
			// Total amount that has to be displayed at the bottom ..
			$this->set(compact('totalamount','netTotall'));
			$this->set('accountsBills',$this->paginate());
		}
		
		elseif($flag == "1" || $dashboard_flag == 'paid') { // Closed bills
			if($dashboard_flag == 'paid') {
				$financialYear = $this->requestAction(array('controller'=>'dashboards','action'=>'getFinancialYear'));
				$startYear = $financialYear['start_year'];
				$endYear   = $financialYear['end_year'];
				$this->paginate = array('conditions'=>array(/*'OR'=>array('AccountsBill.paid_status'=>array('Y','C')),*/'AccountsBill.ledger_due'=>'N','AccountsBill.amount = AccountsBill.billamount','AccountsBill.period_fromdate BETWEEN ? AND ?'=>array($startYear,$endYear)),'order' => array('AccountsBill.last_date' => 'DESC'));
			} else {
				$this->paginate = array('conditions'=>array(/*'OR'=>array('AccountsBill.paid_status'=>array('C','Y')),*/'AccountsBill.ledger_due'=>'N','AccountsBill.amount = AccountsBill.billamount'),'order' => array('AccountsBill.last_date' => 'DESC'));
			}
			$final = $this->paginate();
			foreach($final as $key => $val) {
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));					
				}
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] =$v['AccountsBill']['amount'] - $v['AccountsBill']['billamount'];
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
			
			$data = $this->AccountsBill->find('first', array('conditions'=>array(/*'OR'=>array('AccountsBill.paid_status'=>array('C','Y')),*/'AccountsBill.ledger_due'=>'N','AccountsBill.amount = AccountsBill.billamount'/*,'AccountsBill.last_date <='=>date('Y-m-d')*/),'fields'=>array('SUM(amount)','SUM(billamount)')));
			$netTotall = $data[0]['SUM(amount)']/* - $data[0]['SUM(billamount)']*/;
		// Total amount that has to be displayed at the bottom ..
			$this->set(compact('totalamount','netTotall'));
			$this->set('accountsBills',$this->paginate());
			
		}
		else // Open bills
		{
			$options = array(
				'fields' => array(
					'AccountsBill.id','AccountsBill.amount','AccountsBill.billamount'
				),
				'conditions' => array(
					'AccountsBill.amount > > AccountsBill.billamount',
				),
			);
			if($dashboard_flag == 'open'){
				$this->paginate = array('conditions'=>array(/*'AccountsBill.paid_status'=>'N','AccountsBill.ledger_due'=>'N',*/'AccountsBill.amount > AccountsBill.billamount'),'order' => array('AccountsBill.last_date' => 'DESC'));
				//$this->paginate = array(/*'conditions'=>array('AccountsBill.paid_status'=>'N','AccountsBill.ledger_due'=>'N','AccountsBill.amount >' => 'AccountsBill.billamount')*/$options,'order' => array('AccountsBill.last_date' => 'DESC'));	
			} else {
				$this->paginate = array('conditions'=>array(/*'AccountsBill.paid_status'=>'N','AccountsBill.ledger_due'=>'N',*/'AccountsBill.amount > AccountsBill.billamount'),'order' => array('AccountsBill.last_date' => 'DESC'));
				//$this->paginate = array(/*'conditions'=>array('AccountsBill.paid_status'=>'N','AccountsBill.ledger_due'=>'N','AccountsBill.amount >' => 'AccountsBill.billamount')*/$options,'order' => array('AccountsBill.last_date' => 'DESC'));
			}
			$final = $this->paginate();
			foreach($final as $key => $val) {
				foreach($val as $val1) {
					$toggle_bills[$val1['accounts_regularvendor_id']] = $this->AccountsBill->find('all',array('conditions'=>array('AccountsBill.accounts_regularvendor_id'=>$val1['accounts_regularvendor_id']),'order' => array( 'AccountsBill.last_date' => 'desc')));
				}
			}
			foreach($final as $k=>$v) {
				foreach($v as $v1=>$v2) {
					$final2[$v['AccountsBill']['id']]['amount'] =$v['AccountsBill']['amount'] - $v['AccountsBill']['billamount'];
				}
			}
		
			foreach($final2 as $f1=>$f2) {
				foreach($f2 as $f=>$ff) {
					$totalamount +=$ff;
				}
			}
		// Total amount that has to be displayed at the bottom ..
			$flag = $flag;
		//	debug($flag);
			$data = $this->AccountsBill->find('first', array('conditions'=>array(/*'AccountsBill.paid_status'=>'N',*/'AccountsBill.amount > AccountsBill.billamount'),'fields'=>array('SUM(amount)','SUM(billamount)')));
			$netTotall = $data[0]['SUM(amount)'] - $data[0]['SUM(billamount)'];
			$this->set(compact('totalamount','yes','netTotall'));
			$this->set('accountsBills',$this->paginate());
		}
		}
		//Cache::write('accountsBills',$this->paginate(), 86400);
		//}
		//debug($this->paginate());
		foreach($final as $k=>$v)
			{
				foreach($v as $v1=>$v2)
				{
					$vends = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$v['AccountsBill']['accounts_regularvendor_id'])));
					//debug($vends);
					foreach($vends as $vend1 => $vend2)
					{
						$vend_final[$v['AccountsBill']['id']] = $vend2['company_name'];
					}
				}
			}
			//debug($vend_final);
			
			//@siddharth
			
		//end	
			
		if(count($final) < 20) $no_pagination = 1;
		else $no_pagination = 0;
		$this->set(compact('no_pagination'));
		$this->set(compact('flag','toggle_bills','vend_final'));
		
		$outputArray  = $this->Session->write('finalArray',$this->paginate());
		$outputArray1 = $this->Session->write('finalArray1',$vend_final);
		$outputArray2 = $this->Session->write('finalArray2',$ledgerDues);
		
	}
	
	
	 
	
	public function bill_csv($LD=null,$flag=null) {
    //Configure::write('debug',2);
    debug($this->Session->read('finalArray'));
  
    $this->loadModel('Currency');
    $currencies = $this->Currency->find('list',array('fields'=>array('Currency.symbol','Currency.name')));
    
    $account_bills = $this->Session->read('finalArray');
    $vendors       = $this->Session->read('finalArray1');
    $ledger_dues   = $this->Session->read('finalArray2');
   
    $i=0;
    foreach($account_bills as $key=>$value){
    	
    	        if(((($value['AccountsBill']['amount'] > $value['AccountsBill']['billamount']) && (strtotime($value['AccountsBill']['last_date']) <= strtotime(date('Y-m-d')))) || (($value['AccountsBill']['amount'] > $value['AccountsBill']['billamount']) && (strtotime($value['AccountsBill']['last_date']) > strtotime(date('Y-m-d'))))) && !$LD){
    	        	
			    	
			    	if((($value['AccountsBill']['amount'] > $value['AccountsBill']['billamount']) && (strtotime($value['AccountsBill']['last_date']) <= strtotime(date('Y-m-d'))))){
			    	   $status = 'Due';
			    	}else{
			    	   $status = 'Not paid';	
			    	}
			    	
		    	    $balance = $value['AccountsBill']['amount']-$value['AccountsBill']['billamount'];
		    	     
		    	    $final[$i]['Bill No']           = $value['AccountsBill']['id'];
		    	    
		    	    if($vendors[$value['AccountsBill']['id']]){
			    		 $final[$i]['Vendor'] = $vendors[$value['AccountsBill']['id']];
			    	}else{
			    		 $final[$i]['Vendor'] = " ";
			    	}
			    	
		    	    $final[$i]['Invoice No']        = $value['AccountsBill']['invoice_no'];
		    	    $final[$i]['Total Amount']      = $currencies[$this->params['currency']].' '.$value['AccountsBill']['amount'];	
		    	    $final[$i]['Balance Amount']    = $currencies[$this->params['currency']].' '.$balance;
		    	    $final[$i]['Received Date']     = $value['AccountsBill']['bill_recieveddate'];
		    	    $final[$i]['Last Date']         = $value['AccountsBill']['last_date'];
		    	    $final[$i]['Paid Status']       = $status;
		    	    
			    	
		    	 }elseif(($value['AccountsBill']['amount'] == $value['AccountsBill']['billamount']) && ($value['AccountsBill']['ledger_due'] == 'N') && !$LD){  
		    	 	    $status = 'Paid';
		    	 	   
		    	 	    $balance = $value['AccountsBill']['amount']-$value['AccountsBill']['billamount'];
		    	     
			    	    $final[$i]['Bill No']           = $value['AccountsBill']['id'];
			    	    if($vendors[$value['AccountsBill']['id']]){
				    		 $final[$i]['Vendor'] = $vendors[$value['AccountsBill']['id']];
				    	}else{
				    		 $final[$i]['Vendor'] = " ";
				    	}
				    	
			    	    $final[$i]['Invoice No']        = $value['AccountsBill']['invoice_no'];
			    	    $final[$i]['Total Amount']      = $currencies[$this->params['currency']].' '.$value['AccountsBill']['amount'];	
			    	    $final[$i]['Balance Amount']    = $currencies[$this->params['currency']].' '.$balance;
			    	    $final[$i]['Received Date']     = $value['AccountsBill']['bill_recieveddate'];
			    	    $final[$i]['Last Date']         = $value['AccountsBill']['last_date'];
			    	    $final[$i]['Paid Status']       = $status;
	    		    
    	         }elseif(($value['AccountsBill']['ledger_due'] == 'Y')){
    	         	    $totalAmmount = null;
		            	foreach($ledger_dues[$value['AccountsBill']['id']] as $ledger_due) {
		            		foreach($ledger_due as $details):
		            			$totalAmmount = $totalAmmount + $details['amount'];
		            		endforeach;
		            	}
		            	
		            	
		            	if(($value['AccountsBill']['amount'] == $value['AccountsBill']['billamount']) && ($value['AccountsBill']['ledger_due'] == 'N')){ 
	                  		  $status = 'Paid';
	                  	} 
	                  		
	                  	if(($value['AccountsBill']['amount'] > $value['AccountsBill']['billamount']) && (strtotime($value['AccountsBill']['last_date']) > strtotime(date('Y-m-d')))){ 
	                  		   $status = 'Not Paid';
	                  	} 
	                  	if(($value['AccountsBill']['amount'] > $value['AccountsBill']['billamount']) && (strtotime($value['AccountsBill']['last_date']) <= strtotime(date('Y-m-d')))){ 
	                  		   $status = 'Due';
	                  	} 
		            	
		            	$balance = $value['AccountsBill']['amount']-$value['AccountsBill']['billamount'];
		    	     
			    	    $final[$i]['Bill No']           = $value['AccountsBill']['id'];
			    	    if($vendors[$value['AccountsBill']['id']]){
				    		 $final[$i]['Vendor'] = $vendors[$value['AccountsBill']['id']];
				    	}else{
				    		 $final[$i]['Vendor'] = " ";
				    	}
				    	
			    	    $final[$i]['Invoice No']        = $value['AccountsBill']['invoice_no'];
			    	    if($flag == 3) {
		            		$final[$i]['Total Amount'] = $currencies[$this->params['currency']].' '.$totalAmmount;
		            	}else{
		            		$final[$i]['Total Amount'] = $currencies[$this->params['currency']].' '.$value['AccountsBill']['amount'];
		            	}	
			    	    $final[$i]['Balance Amount']    = $currencies[$this->params['currency']].' '.$balance;
			    	    $final[$i]['Received Date']     = $value['AccountsBill']['bill_recieveddate'];
			    	    $final[$i]['Last Date']         = $value['AccountsBill']['last_date'];
			    	    $final[$i]['Paid Status']       = $status;
		            	
		         }	  
		           
    	         $i++;
    	}	
   
    $this->Export->exportCsv($final, 'bill.csv');
    // a CSV file called myExport.csv will be downloaded by the browser.
}
	

/**
 * view method
 *
 * @param string $id
 * @return void
 */
	public function view($id = null,$flag = null) {

		//Configure::write('debug',2);
		      
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('AccountsBillalert');
		$this->loadModel('AccountsLedger');
		$this->loadModel('ChequePaymentdetail');

		$this->AccountsBill->id = $id;
		if (!$this->AccountsBill->exists()) {
			throw new NotFoundException(__('Invalid bill'));
		}
		$this->set('accountsBill', $this->AccountsBill->read(null, $id));
		$accountsBill = $this->AccountsBill->read(null, $id);
		$acc_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$accountsBill['AccountsBill']['accounts_account_id'])));
		$acc_name2 = $acc_name['AccountsAccount']['account_name'];
		$vendor_name = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$accountsBill['AccountsBill']['accounts_regularvendor_id'])));
		$photo_url = $vendor_name['AccountsRegularvendor']['photo_url'];
		$photo = $vendor_name['AccountsRegularvendor']['photo'];
		$vendor_name2 = $vendor_name['AccountsRegularvendor']['company_name'];
		$bill_alertdeatils = $this->AccountsBillalert->find('first',array('conditions'=>array('AccountsBillalert.accounts_bills_id'=>$id)));
		$initiated_on = $bill_alertdeatils['AccountsBillalert']['initiated_on'];
		$ending_on = $bill_alertdeatils['AccountsBillalert']['ending_on'];
		$frequency = $bill_alertdeatils['AccountsBillalert']['frequency_month'];
		$due_day =  $bill_alertdeatils['AccountsBillalert']['due_day'];
		
		$ledger_details = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id !='=>$acc_name['AccountsAccount']['id'],'AccountsLedger.accounts_bill_id'=>$id,'AccountsLedger.is_neutral'=>'N'),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
		foreach($ledger_details as $key => $value) {
			$paid_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$value['AccountsLedger']['accounts_account_id'])));
			foreach($paid_details as $key2 => $value2) {
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] =  $value['AccountsLedger']['id'];
				if($value['AccountsLedger']['credit'] == 0) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['amount'] =  $value['AccountsLedger']['debit'];
				}
				if($value['AccountsLedger']['debit'] == 0) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['amount'] =  $value['AccountsLedger']['credit'];
				}
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_on'] =  date('d M Y',strtotime($value['AccountsLedger']['date']));
				// For Cash
				if( ($value2['asset_type'] == "Cash" ) || ($value2['asset_type'] == "cash")) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Cash";
					$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
					$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
					$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] = $value['AccountsLedger']['id'];
				
				}
				//For Cheque
				if( ($value2['asset_type'] == "Bank" ) || ($value2['asset_type'] == "bank")) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Cheque";
					$final_cheque[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
					$final_cheque[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
					
				}
				//For Card
				if( ($value2['liability_type'] == "Credit Card" ) || ($value2['liability_type'] == "Credit Card")) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Card";
					$final_card[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
					$final_card[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
				}	
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['approved_by'] = $value['AccountsLedger']['approved_by'];
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] = $value['AccountsLedger']['id'];
			}
		}
		
		$this->loadModel('ChequePaymentdetail');
		$this->ChequePaymentdetail->recursive = 0; 
		$ledgerdues = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$id,'ChequePaymentdetail.paid'=>'N')));
		debug($ledgerdues);
		if(!empty($ledgerdues)){
			foreach($ledgerdues as $id1 => $ledgerdue) {
				$final_details[$ledgerdue['ChequePaymentdetail']['id'].'-ledger'][$ledgerdue['ChequePaymentdetail']['id'].'-ledger']['paid_by'] = "Cheque";
				$final_cheque[$ledgerdue['ChequePaymentdetail']['id'].'-ledger'][$ledgerdue['ChequePaymentdetail']['id'].'-ledger']['account_name'] = $ledgerdue['AccountsAccount']['account_name'];
				$final_cheque[$ledgerdue['ChequePaymentdetail']['id'].'-ledger'][$ledgerdue['ChequePaymentdetail']['id'].'-ledger']['recieved_by'] = $ledgerdue['ChequePaymentdetail']['recieved_by'];
				$final_details[$ledgerdue['ChequePaymentdetail']['id'].'-ledger'][$ledgerdue['ChequePaymentdetail']['id'].'-ledger']['amount'] =  $ledgerdue['ChequePaymentdetail']['amount'];
				$final_details[$ledgerdue['ChequePaymentdetail']['id'].'-ledger'][$ledgerdue['ChequePaymentdetail']['id'].'-ledger']['paid_on'] =  date('d M Y',strtotime($ledgerdue['ChequePaymentdetail']['cheque_dated']));
				$final_details[$ledgerdue['ChequePaymentdetail']['id'].'-ledger'][$ledgerdue['ChequePaymentdetail']['id'].'-ledger']['approved_by'] = $ledgerdue['ChequePaymentdetail']['approved_by'];
			}
		}
		debug($final_cheque);
		debug($final_details);
		$this->set(compact('acc_name2','vendor_name2','flag','id','photo_url','photo','initiated_on','ending_on','frequency','due_day','final_details'));
		$this->set(compact('final_cash','final_cheque','final_card'));
	}

  public function test() {
  	
 }

/**
 * add method
 *
 * @return void
 */
 public function new1()
 {
 //	Configure::write('debug',2);
 //	debug($this->data);
	if($this->data['AccountsBill']['set_alert'] == "Yes") 	
	{
		$flag= 1;
	}
	else $flag = 0;
	for($date = 1;$date <=31;$date++)
	{
		$finaldate[$date]=$date;
	}
	
	for($month = 1;$month <=12;$month++)
	{
		$finalmonth[$month]=$month;
	}
	
	$this->set(compact('flag','finaldate','finalmonth'));
 }
  public function new2($id = null)
 {
 //	Configure::write('debug',2);
 	debug($this->data);
	if($this->data['AccountsBill']['set_alert'] == "Yes") 	
	{
		$flag= 1;
	}
		$this->loadModel('AccountsBillalert');
		$alert_id2 = $this->AccountsBillalert->find('first',array('conditions'=>array('AccountsBillalert.accounts_bills_id'=>$id)));
		$alert_id = $alert_id2['AccountsBillalert']['id'];
		$frequency = $alert_id2['AccountsBillalert']['frequency_month'];
		$due_day = $alert_id2['AccountsBillalert']['due_day'];
		$var = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
		debug($var);
		debug($var['bill_fileuploadpath']);
		$amount = $var['AccountsBill']['amount'];
		$bill_recieveddate = $var['AccountsBill']['bill_recieveddate'];
		$last_date = $var['AccountsBill']['last_date'];
		$initiated_on = $var['AccountsBill']['period_fromdate'];
		$ending_on = $var['AccountsBill']['period_todate'];
		$this->set(compact('initiated_on','ending_on'));
		
		$this->set(compact('frequency','due_day'));
	$this->set(compact('flag'));
 }
 
 	public function add2() 
	{
	//	Configure::write('debug',2);
		debug($this->data);
		$this->loadModel('AccountsRegularvendor');
		if($this->data['group1'] == "Yes") $flag = 1;
		if($this->data['group1'] == "No") $flag = 0;
		$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AND'=>array('AccountsRegularvendor.active'=>'Y','AccountsRegularvendor.company_name !='=> "Miscellaneous"))));
		debug($vendornames);
		$this->set(compact('flag','vendornames'));
	}
 
 public function add3($id = null) 
	{
	
	//	Configure::write('debug',2);
	
		
		$this->loadModel('AccountsRegularvendor');
		if($this->data['group1'] == "Yes") $flag = 1;
		$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AND'=>array('AccountsRegularvendor.active'=>'Y','AccountsRegularvendor.company_name !='=> "Miscellaneous"))));
		$vendornames2 = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$id)));
	
		$vendornames3 = $vendornames2['AccountsRegularvendor']['company_name'];
		
		$this->set(compact('flag','vendornames','vendornames3'));
	}
 
 
 /**
 * add method
 *
 * @return void
 */
 	public function add($flag) {
 		//Configure::write('debug',2);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('AccountsBillalert');
		$this->loadModel('AccountsNewalert');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		$this->loadModel('AccountsLedger');
		if($this->data) {
			if(($this->data['accounts_account_id'] && is_numeric($this->data['AccountsBill']['invoice_no']) )  && ($this->data['AccountsBill']['bill_amount'])) {
				if($this->request->is('post')) {
					
					if(($this->data['AccountsBill']['paid_status'] == 'Y') || ($this->data['AccountsBill']['paid_status'] == 'C')) {
						$account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));	
						$cash_account1 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['AccountsBill']['paid_statusss']),'fields'=>array('AccountsAccount.closing_balance','AccountsAccount.opening_balance','AccountsAccount.account_name','AccountsAccount.account_type_id')));
						$balanccee = $cash_account1['AccountsAccount']['closing_balance'];
						if($balanccee < $this->data['AccountsBill']['bill_amount']) {
							$this->Session->setFlash(__('<div class="flashMessageError">The '.$cash_account1['AccountsAccount']['account_name'].' don\'t have enough amount to pay!</div>'));
							$this->redirect(array('action'=>'add'));
						}
					}
					
					//save and redirect
					$first_day = date('M 01,Y');
					$last_day = date('M t,Y', strtotime('M d,Y '));
					$this->Uploader = new Uploader(); 
					$this->Uploader = new Uploader(array('tempDir' => TMP));
					$this->Uploader->setup(array('tempDir' => TMP));
					$save->data= null;
					$this->AccountsBill->create();
					if($this->data['group1'] == "Yes") {
						$save->data= null;
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
						$save->data['AccountsBill']['accounts_regularvendor_id'] = $this->data['AccountsBill']['accounts_regularvendor_id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
						$save->data['AccountsBill']['item_description'] = $this->data['AccountsBill']['item_description'];
						$save->data['AccountsBill']['billamount'] = 0;
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['bill_amount'];
						$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['rcv_date']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						$save->data['AccountsBill']['period_fromdate'] =   date('Y-m-d',strtotime($first_day));
						$save->data['AccountsBill']['period_todate'] =  date('Y-m-d',strtotime($last_day));
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$data2 = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
				   		$this->Uploader->uploadDir = 'files/uploads/vendors';
						$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
						if($data2) {
							$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
							$save->data['AccountsBill']['bill_fileuploadpath'] = $data2['bill_fileuploadpath']['name'];
						}
						$vendor_id = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$this->data['AccountsBill']['accounts_regularvendor_id']),'fields'=>array('AccountsRegularvendor.company_name')));
					} elseif($this->data['group1'] == "No") {
						$save->data = null;
						$vendor_id = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.company_name LIKE'=>'Miscellaneous')));
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
						$save->data['AccountsBill']['accounts_regularvendor_id'] = $vendor_id['AccountsRegularvendor']['id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
						$save->data['AccountsBill']['item_description'] = $this->data['AccountsBill']['item_description'];
						$save->data['AccountsBill']['billamount'] = 0;
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['bill_amount'];
						$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['rcv_date']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						$save->data['AccountsBill']['period_fromdate'] =  date('Y-m-d',strtotime($first_day));
						$save->data['AccountsBill']['period_todate'] = date('Y-m-d',strtotime($last_day));
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$data2 = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
				   		$this->Uploader->uploadDir = 'files/uploads/vendors';
				   		$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
						if($data2) {
							$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
							$save->data['AccountsBill']['bill_fileuploadpath'] = $data2['bill_fileuploadpath']['name'];
						}
					}
					$this->AccountsBill->save($save->data);
					$getLastInsertBilllId = $this->AccountsBill->getlastInsertId();
					if(empty($vendor_id['AccountsRegularvendor']['company_name'])){
						$vendorr_name = 'unknown vendor';
					} else {
						$vendorr_name = $vendor_id['AccountsRegularvendor']['company_name'];
					}
					if(($this->data['AccountsBill']['paid_status'] == 'Y') || ($this->data['AccountsBill']['paid_status'] == 'C')) {
						$save_billl['AccountsBill']['id'] = $this->AccountsBill->getlastInsertId();
						$save_billl['AccountsBill']['billamount'] = $this->data['AccountsBill']['bill_amount'];
						$this->AccountsBill->save($save_billl);
						$account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));	
						$cash_account1 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['AccountsBill']['paid_statusss']),'fields'=>array('AccountsAccount.closing_balance','AccountsAccount.opening_balance','AccountsAccount.account_name','AccountsAccount.account_type_id')));
						$balanccee = $cash_account1['AccountsAccount']['closing_balance'];				
						if($balanccee < $this->data['AccountsBill']['bill_amount']) {
							$this->Session->setFlash(__('<div class="flashMessageError">The '.$cash_account1['AccountsAccount']['account_name'].' don\'t have enough amount to pay!</div>'));
							$this->redirect(array('add'));
						}
						$save_leedger['AccountsLedger']['debit'] = $this->data['AccountsBill']['bill_amount'];
						$save_leedger['AccountsLedger']['credit'] = 0;
						$save_leedger['AccountsLedger']['accounts_account_id'] = $this->data['AccountsBill']['paid_statusss'];
						$save_leedger['AccountsLedger']['accounts_bill_id'] = $this->AccountsBill->getLastInsertId();
						$save_leedger['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['rcv_date']));
						$save_leedger['AccountsLedger']['cheque_no'] = 'Bill #'.$this->AccountsBill->getLastInsertId().' to '.$vendorr_name.' towards '.$account_name['AccountsAccount']['account_name'];
						$save_leedger['AccountsLedger']['is_neutral'] = 'N';
						
						$this->AccountsLedger->create();
						$this->AccountsLedger->save($save_leedger);
						$ledger_lastinsert_id = $this->AccountsLedger->getLastInsertId();
						
						
						$saveee['AccountsLedger']['id'] = $ledger_lastinsert_id;
						$saveee['AccountsLedger']['transaction_id'] = $ledger_lastinsert_id;
						$this->AccountsLedger->save($saveee);
						$save_closingBalance['AccountsAccount']['id'] = $this->data['AccountsBill']['paid_statusss'];
						$save_closingBalance['AccountsAccount']['closing_balance'] = $balanccee - $this->data['AccountsBill']['bill_amount'];
						$this->AccountsAccount->save($save_closingBalance);
						
						/**Log Code**/
						$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save_leedger['AccountsLedger']['accounts_account_id'],0,$save_leedger['AccountsLedger']['debit'],$balanccee,$save_closingBalance['AccountsAccount']['closing_balance'],$ledger_lastinsert_id,$save_billl['AccountsBill']['id'],0,'Add Bill','Bill added and paid'));
						/**Log Code**/
						
						$account_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['accounts_account_id']),'fields'=>array('AccountsAccount.account_type_id','AccountsAccount.account_name','AccountsAccount.closing_balance')));
			    		$account = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['accounts_account_id']),'fields'=>array('AccountsAccount.opening_balance')));
			    		$save_ledgers['AccountsLedger']['accounts_account_id'] = $this->data['accounts_account_id'];
			    		$save_ledgers['AccountsLedger']['accounts_bill_id'] = $this->AccountsBill->getLastInsertId();
			    		$save_ledgers['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['rcv_date']));
			    		$save_ledgers['AccountsLedger']['debit'] = 0;
			    		$save_ledgers['AccountsLedger']['credit'] = $this->data['AccountsBill']['bill_amount'];
			    		$save_ledgers['AccountsLedger']['cheque_no'] ='Bill #'.$this->AccountsBill->getLastInsertId().' paid to '.$vendorr_name.' towards '.$account_name['AccountsAccount']['account_name'];
			    		$save_ledgers['AccountsLedger']['payment_description'] = 'Amount credited!';
						$save_ledgers['AccountsLedger']['transaction_id'] = $ledger_lastinsert_id;
						$this->AccountsLedger->create();
			    		$this->AccountsLedger->save($save_ledgers);
			    		$save_closingBalancee['AccountsAccount']['id'] = $this->data['accounts_account_id'];
			    		$save_closingBalancee['AccountsAccount']['closing_balance'] = $account_details['AccountsAccount']['closing_balance'] + $this->data['AccountsBill']['bill_amount'];
			    		$this->AccountsAccount->save($save_closingBalancee);
					}
					if(($this->data['AccountsBill']['paid_status'] == 'N') || ($this->data['AccountsBill']['paid_status'] == 'Due')) {
						$account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['accounts_account_id']),'fields'=>array('AccountsAccount.account_name')));
						$account_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_type_id','AccountsAccount.opening_balance','AccountsAccount.account_name','AccountsAccount.closing_balance')));
			    		$save_ledgers['AccountsLedger']['accounts_account_id'] = $account_details['AccountsAccount']['id'];
			    		$save_ledgers['AccountsLedger']['accounts_bill_id'] = $this->AccountsBill->getLastInsertId();
						$save_ledgers['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['rcv_date']));
			    		$save_ledgers['AccountsLedger']['is_neutral'] = 'Y';
			    		$save_ledgers['AccountsLedger']['cheque_no'] = "Bill #".$this->AccountsBill->getLastInsertId()." to ".$vendorr_name." towards ".$account_name['AccountsAccount']['account_name'];
			    		$save_ledgers['AccountsLedger']['debit'] = 0;
			    		$save_ledgers['AccountsLedger']['credit'] = $this->data['AccountsBill']['bill_amount'];
			    		$this->AccountsLedger->create();
			    		$this->AccountsLedger->save($save_ledgers);
			    		$latest_id = $this->AccountsLedger->getLastInsertId();
			    		$latest_ledger = $this->AccountsLedger->findById($latest_id);
			    		$save_transac_id['AccountsLedger']['id'] = $latest_ledger['AccountsLedger']['id'];
			    		$save_transac_id['AccountsLedger']['transaction_id'] = $latest_ledger['AccountsLedger']['id'];
			    		$this->AccountsLedger->save($save_transac_id);
			    		$save_Closing_balance['AccountsAccount']['id'] = $account_details['AccountsAccount']['id'];
			    		$save_Closing_balance['AccountsAccount']['closing_balance'] = $account_details['AccountsAccount']['closing_balance'] + $this->data['AccountsBill']['bill_amount'];
			    		$this->AccountsAccount->save($save_Closing_balance);
						
						/**Log Code**/
						$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save_ledgers['AccountsLedger']['accounts_account_id'],$save_ledgers['AccountsLedger']['credit'],0,$account_details['AccountsAccount']['closing_balance'],$save_Closing_balance['AccountsAccount']['closing_balance'],$latest_id,$save_ledgers['AccountsLedger']['accounts_bill_id'],0,'Add Bill','Bill added not paid'));
						/**Log Code**/
					}
					if($this->data['AccountsBill']['set_alert'] == "Yes") {
						$s = $this->data['AccountsBill']['period_fromdate'];
						$start =$s['year'].'-'. $s['month'].'-'.$s['day'];
						$e = $this->data['AccountsBill']['period_todate'];
						$end = $e['year'].'-'. $e['month'].'-'.$e['day'];
						$exp = $this->datecal($end,$start);
						$new_id = $this->AccountsBill->getLastInsertId();
						$this->request->data['AccountsBillalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
						$this->request->data['AccountsBillalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
						$this->request->data['AccountsBillalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
						$this->request->data['AccountsBillalert']['due_day'] = $this->data['AccountsBill']['due_on'];
						$this->request->data['AccountsBillalert']['active'] = "Y";
						$this->request->data['AccountsBillalert']['paused'] = "N";
						$this->request->data['AccountsBillalert']['accounts_bills_id'] = $new_id;
						$this->request->data['AccountsBillalert']['amount'] = $this->data['AccountsBill']['bill_amount'];
						$this->request->data['AccountsBillalert']['next_invoiced_date']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
						$alertid = $this->AccountsBillalert->getLastInsertId();
						$this->request->data['AccountsNewalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
						$this->request->data['AccountsNewalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
						$this->request->data['AccountsNewalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
						$this->request->data['AccountsNewalert']['due_day'] = $this->data['AccountsBill']['due_on'];
						$this->request->data['AccountsNewalert']['accounts_bills_id'] = $new_id;
						$this->request->data['AccountsNewalert']['accounts_billalerts_id'] = $alertid;
						$this->AccountsNewalert->save($this->request->data);
						$this->AccountsBillalert->save($this->request->data);
					}
					$yes= null;
					$this->Session->setFlash(__('<div class="flashMessageSuccess">The accounts bill has been saved</div>'));
					$yes= 1;
					$new_id2 = $this->AccountsBill->getLastInsertId();
					$this->redirect(array('action' => 'view',$new_id2,0));
				}
			} else {
				//list + error
				if(!$this->data['accounts_account_id']) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any account</div>'));
				} elseif( (!$this->data['AccountsBill']['invoice_no'] || !is_numeric($this->data['AccountsBill']['invoice_no']))  || ($this->data['AccountsBill']['invoice_no'] <= 0)) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid invoice number</div>'));
				} elseif(  (!$this->data['AccountsBill']['voucher_no'] || !is_numeric($this->data['AccountsBill']['voucher_no']))  || ($this->data['AccountsBill']['voucher_no'] <= 0  )) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid voucher number</div>'));
				} elseif(!$this->data['AccountsBill']['bill_amount'] ) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid amount</div>'));
				}
				
				$expense_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name LIKE'=>'Expenses')));
				$expense_id = $expense_type['AccountType']['id'];
				$accountnames =  $this->AccountsAccount->find('list', array('fields' => array('AccountsAccount.id','AccountsAccount.account_name'),'conditions'=>array('AccountsAccount.account_type_id'=>$expense_id)));
				$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AccountsRegularvendor.active'=>'Y')));
				$this->set(compact('vendornames','accountnames'));
				$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.active'=>'Y','AccountsAccount.account_type_id'=>$expense_id))));
				$i=$j=$k=$l=0;
				/**
				 * Foreach to seperate accounts in levelwise.
				 * */
				foreach($accounts as $accounts)
				{
					switch($accounts['AccountsAccount']['level'])
					{
						case 1:
							$level1[$i]=$accounts;
							$i++;
							break;
							
						case 2:
							$level2[$j]=$accounts;
							$j++;
							break;
							
						case 3:
							$level3[$k]=$accounts;
							$k++;
							break;
						case 4:
							$level4[$l]=$accounts;
							$l++;
							break;
					}
				}
				
				if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
				if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
				if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
				if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');
		
				/**
				 * To get all accounts in a tree structure.
				 * It is used to set parent_id for a new account.
				 * */
				 $a=0;
				foreach($level1 as $level11){
					$final_account.= '<option  value="'.$level11['AccountsAccount']['id'].'" class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
					$a++; 
					if($level2){
						foreach($level2 as $level22){
							if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
								$final_account.= '<option  value="'.$level22['AccountsAccount']['id'].'" class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
								if($level3){$w=1;
									foreach($level3 as $level33){
										if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
											$final_account/*[$level33['AccountsAccount']['id']]*/.= '<option  value="'.$level33['AccountsAccount']['id'].'" class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
											if($level4){
												foreach($level4 as $level44){
													if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
														$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				
				$this->set(compact('final_account','current_account'));
				$this->set(compact('accountsAccounts', 'accountsRegularvendors', 'accountsBillalerts','flag'));
			}
		} else {
			$expense_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name LIKE'=>'Expenses')));
			$expense_id = $expense_type['AccountType']['id'];
			$accountnames =  $this->AccountsAccount->find('list', array('fields' => array('AccountsAccount.id','AccountsAccount.account_name'),'conditions'=>array('AccountsAccount.account_type_id'=>$expense_id)));
			$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AccountsRegularvendor.active'=>'Y')));
			$this->set(compact('vendornames','accountnames'));
			$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.active'=>'Y','AccountsAccount.account_type_id'=>$expense_id))));
			$i=$j=$k=$l=0;
			foreach($accounts as $accounts)
			{
				switch($accounts['AccountsAccount']['level'])
				{
					case 1:
						$level1[$i]=$accounts;
						$i++;
						break;
						
					case 2:
						$level2[$j]=$accounts;
						$j++;
						break;
						
					case 3:
						$level3[$k]=$accounts;
						$k++;
						break;
					case 4:
						$level4[$l]=$accounts;
						$l++;
						break;
				}
			}
			
			if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
			if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
			if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
			if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');
			$a=0;
			foreach($level1 as $level11){
				$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'" class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
				$a++; 
				if($level2){
					foreach($level2 as $level22){
						if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
							$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'" class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
							if($level3){$w=1;
								foreach($level3 as $level33){
									if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
										$final_account/*[$level33['AccountsAccount']['id']]*/.= '<option value="'.$level33['AccountsAccount']['id'].'" class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
										if($level4){
											foreach($level4 as $level44){
												if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
													$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			$this->set(compact('final_account','current_account'));
			$this->set(compact('accountsAccounts', 'accountsRegularvendors', 'accountsBillalerts','flag'));
		}
 	}
 
	 public function amount_check()
	 {
	 	//Configure::write('debug',2);
		debug($this->data);
		if(!is_numeric($this->data['AccountsBill']['bill_amount']) || $this->data['AccountsBill']['bill_amount']== 0)
		$validate = 1;
		
		$this->set(compact('validate'));
	 }
 
 
 
 	 public function amount_checkedit($am = null)
	 {
	 	//Configure::write('debug',2);
		debug($this->data);
		if(!is_numeric($this->data['AccountsBill']['amount']) || $this->data['AccountsBill']['amount']== 0)
		$validate = 1;
		
		$this->set(compact('validate','am'));
	 }
 
 
 
 
 
 
 
 
 
	public function add12343($flag) 
	{
	//	Configure::write('debug',2);
		debug($this->data);
		$first_day = date('M 01,Y');
		$last_day = date('M t,Y', strtotime('M d,Y '));
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('AccountsBillalert');
		$this->loadModel('AccountsNewalert');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		$this->loadModel('AccountsLedger');
		
		$this->Uploader = new Uploader(); 
		$this->Uploader = new Uploader(array('tempDir' => TMP));
		$this->Uploader->setup(array('tempDir' => TMP));
	//	$this->AccountsCompany->recursive = 0;
		
		$expense_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name LIKE'=>'Expenses')));
		debug($expense_type);
		$expense_id = $expense_type['AccountType']['id'];
		$accountnames =  $this->AccountsAccount->find('list', array('fields' => array('AccountsAccount.id','AccountsAccount.account_name'),'conditions'=>array('AccountsAccount.account_type_id'=>$expense_id)));
		debug($accountnames);
		$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AccountsRegularvendor.active'=>'Y')));
		
		$this->set(compact('vendornames','accountnames'));
		
		
		$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.active'=>'Y','AccountsAccount.account_type_id'=>$expense_id))));
		debug($accounts);
		$i=$j=$k=$l=0;
		/**
		 * Foreach to seperate accounts in levelwise.
		 * */
		foreach($accounts as $accounts)
		{
			switch($accounts['AccountsAccount']['level'])
			{
				case 1:
					$level1[$i]=$accounts;
					$i++;
					break;
					
				case 2:
					$level2[$j]=$accounts;
					$j++;
					break;
					
				case 3:
					$level3[$k]=$accounts;
					$k++;
					break;
				case 4:
					$level4[$l]=$accounts;
					$l++;
					break;
			}
		}
		
		if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
		if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
		if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
		if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');

		/**
		 * To get all accounts in a tree structure.
		 * It is used to set parent_id for a new account.
		 * */
		 $a=0;
		foreach($level1 as $level11){
			$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'" class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
			$a++; 
			if($level2){
				foreach($level2 as $level22){
					if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
						$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'" class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
						if($level3){$w=1;
							foreach($level3 as $level33){
								if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
									$final_account/*[$level33['AccountsAccount']['id']]*/.= '<option value="'.$level33['AccountsAccount']['id'].'" class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
									if($level4){
										foreach($level4 as $level44){
											if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
												$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		
		
		debug($final_account);
		$this->set(compact('final_account','current_account'));		
		
		
		
		if ($this->request->is('post')) 
		{
			if(!empty($this->data))
			{
				debug($this->data);
			$this->AccountsBill->create();
			
			
				debug($this->request->data);
				debug($this->data['AccountsBill']['account_name']);
				if($this->data['group1'] == "Yes")
				{
					$save->data= null;
					$save->data['AccountsBill']['accounts_account_id'] = $this->data['AccountsBill']['accounts_account_id'];
					$save->data['AccountsBill']['accounts_regularvendor_id'] = $this->data['AccountsBill']['accounts_regularvendor_id'];
					$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
					$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
				//	$this->request->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
					$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['bill_amount'];
					$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['rcv_date']));
					$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
					$save->data['AccountsBill']['period_fromdate'] =   date('Y-m-d',strtotime($first_day));
					$save->data['AccountsBill']['period_todate'] =  date('Y-m-d',strtotime($last_day));
					$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
					$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
					$data2 = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
						debug($data2);
					/*if($this->data['AccountsBill']['bill_fileuploadpath'])
			   		{*/
			   			$this->Uploader->uploadDir = 'files/uploads/vendors';
			   			debug($this->Uploader->uploadAll());
						$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
						debug($data);
						if($data2)
						{
							$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
							$save->data['AccountsBill']['bill_fileuploadpath'] = $data2['bill_fileuploadpath']['name'];
						
						}
						
				    	
						
			    	//}
			    	debug($save->data);
			    	
			    	
			    	
			    	
				}
				elseif($this->data['group1'] == "No")
				{
					$save->data = null;
					$vendor_id = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.company_name LIKE'=>'Miscellaneous')));
					$save->data['AccountsBill']['accounts_account_id'] = $this->data['AccountsBill']['accounts_account_id'];
					$save->data['AccountsBill']['accounts_regularvendor_id'] = $vendor_id['AccountsRegularvendor']['id'];
					$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
					$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
		//			$this->request->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
					$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['bill_amount'];
					$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['rcv_date']));
					$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
					$save->data['AccountsBill']['period_fromdate'] =  date('Y-m-d',strtotime($first_day));
					$save->data['AccountsBill']['period_todate'] = date('Y-m-d',strtotime($last_day));
					$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
					$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
					$data2 = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
					debug($data2);
					/*if($this->data['AccountsBill']['bill_fileuploadpath'])
			   		{*/
			   			$this->Uploader->uploadDir = 'files/uploads/vendors';
			   			debug($this->Uploader->uploadAll());
						$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
						debug($data);
						if($data2)
						{
							$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
							$save->data['AccountsBill']['bill_fileuploadpath'] = $data2['bill_fileuploadpath']['name'];
						
						}
					
			   	 	/*if($this->data['AccountsBill']['bill_fileuploadpath'])
			   		{
				    	
				   		$this->Uploader->uploadDir = 'files/uploads/vendors';
				
						$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
						debug($data);
						if($data)
						{
							$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
							$save->data['AccountsBill']['bill_fileuploadpath'] = $data['bill_fileuploadpath']['name'];
						}
			    	}*/
			    	debug($save->data);
			  	 	//$this->AccountsBill->save($save->data);
					
				}
				
				debug($save->data);
				$this->AccountsBill->save($save->data);
				
				
				
				
				
				
				if($this->data['AccountsBill']['set_alert'] == "Yes")
				{
					$s = $this->data['AccountsBill']['period_fromdate'];
					debug($s['month']);
					$start =$s['year'].'-'. $s['month'].'-'.$s['day'];
					debug($start);
					$e = $this->data['AccountsBill']['period_todate'];
					$end = $e['year'].'-'. $e['month'].'-'.$e['day'];
					$exp = $this->datecal($end,$start);
					debug($exp);
					$new_id = $this->AccountsBill->getLastInsertId();
					$this->request->data['AccountsBillalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
					$this->request->data['AccountsBillalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
					$this->request->data['AccountsBillalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
					$this->request->data['AccountsBillalert']['due_day'] = $this->data['AccountsBill']['due_on'];
					$this->request->data['AccountsBillalert']['active'] = "Y";
					$this->request->data['AccountsBillalert']['paused'] = "N";
					$this->request->data['AccountsBillalert']['accounts_bills_id'] = $new_id;
					$this->request->data['AccountsBillalert']['amount'] = $this->data['AccountsBill']['bill_amount'];
					
					$alertid = $this->AccountsBillalert->getLastInsertId();
					$this->request->data['AccountsNewalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
					$this->request->data['AccountsNewalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
					$this->request->data['AccountsNewalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
					$this->request->data['AccountsNewalert']['due_day'] = $this->data['AccountsBill']['due_on'];
					$this->request->data['AccountsNewalert']['accounts_bills_id'] = $new_id;
					$this->request->data['AccountsNewalert']['accounts_billalerts_id'] = $alertid;
					$this->AccountsNewalert->save($this->request->data);
					$this->AccountsBillalert->save($this->request->data);
					/*debug($this->AccountsBill->save($this->request->data));
					$this->AccountsBillalert->save($this->request->data);
					debug($this->AccountsBillalert->save($this->request->data));*/
				}
				$yes= null;
				$this->Session->setFlash(__('<div class="flashMessageSuccess">The accounts bill has been saved</div>'));
				$yes= 1;	
				$new_id2 = $this->AccountsBill->getLastInsertId();
				debug($new_id2);
				$this->redirect(array('action' => 'view',$new_id2,$flag));
			
			}
			else 
			{
				$this->Session->setFlash(__('<div class="flashMessageError">The accounts bill could not be saved. Please, try again.</div>'));
			}
		}
		$accountsAccounts = $this->AccountsBill->AccountsAccount->find('list');
		$accountsRegularvendors = $this->AccountsBill->AccountsRegularvendor->find('list');
	//	$accountsBillalerts = $this->AccountsBill->AccountsBillalert->find('list');
		$this->set(compact('accountsAccounts', 'accountsRegularvendors', 'accountsBillalerts','flag'));
	}



function datecal($date1=null,$date2=null)
	{
		 	
		//to calculate difference between two dates
			$diff = abs(strtotime($date2) - strtotime($date1));
			
			$years = floor($diff / (365*60*60*24));
			$months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
			$days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
			$exp = $years."/".$months."/".$days;
			//$exp = $months;
			return($exp);
	}
	
/**
 * edit method
 *
 * @param string $id
 * @return void
 */
 
 
 	public function edit($id = null,$flag = null) {
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('AccountsBillalert');
		$this->loadModel('AccountsNewalert');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		$this->loadModel('AccountsLedger');
		$this->Uploader = new Uploader(); 
		$this->Uploader = new Uploader(array('tempDir' => TMP));
		$this->Uploader->setup(array('tempDir' => TMP));
		
		$accountsBill_details = $this->AccountsBill->findById($id);
		if($this->data) {
			if(($this->data['accounts_account_id'] && is_numeric($this->data['AccountsBill']['invoice_no'] ))  && ( is_numeric($this->data['AccountsBill']['voucher_no']) && $this->data['AccountsBill']['amount'])) {
				if($this->request->is('post')) {
					if($this->data['AccountsBill']['amount'] < $accountsBill_details['AccountsBill']['billamount']) {
						$errorTexxt = '<div class="flashMessageError">This bill is already paid Rs.'.$accountsBill_details['AccountsBill']['billamount'].' cannot edit amount less than this amount!</div>';
						$this->Session->setFlash($errorTexxt);
						$this->redirect(array('action' => 'index',0,1));
					}
					//save and redirect
					$first_day = date('M 01,Y');
					$last_day = date('M t,Y', strtotime('M d,Y '));
					$alert_id2 = $this->AccountsBillalert->find('first',array('conditions'=>array('AccountsBillalert.accounts_bills_id'=>$id)));
					$alert_id = $alert_id2['AccountsBillalert']['id'];
					$new_alert2 = $this->AccountsNewalert->find('first',array('conditions'=>array('AccountsNewalert.accounts_bills_id'=>$id)));
					$new_alert = $new_alert2['AccountsNewalert']['id'];
					if($this->data['AccountsBill']['amount'] != $accountsBill_details['AccountsBill']['amount']){
						$accounts_payable = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
						$account_payable_ledger = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accounts_payable['AccountsAccount']['id']),'order'=>array('AccountsLedger.id DESC')));
						if(empty($account_payable_ledger)) {
							$current_balance = $accounts_payable['AccountsAccount']['opening_balance'];
						} else {
							$current_balance = $account_payable_ledger['AccountsLedger']['balance'];
						}
						$updated_amount = $this->data['AccountsBill']['amount'] - $accountsBill_details['AccountsBill']['amount'];
						if($updated_amount > 0) {
							$save_ledger['AccountsLedger']['credit'] = $updated_amount;
							$save_ledger['AccountsLedger']['debit'] = 0;
							$save_ledger['AccountsLedger']['is_neutral'] = 'Y';
							$save_ledger['AccountsLedger']['accounts_account_id'] = $accounts_payable['AccountsAccount']['id'];
							$save_ledger['AccountsLedger']['date'] = date('Y-m-d');
							$save_ledger['AccountsLedger']['accounts_bill_id'] = $id;
							$save_ledger['AccountsLedger']['payment_description'] = "Amount has been increased for the bill- $id";
							$save_ledger['AccountsLedger']['cheque_no'] = "$id";
							$this->AccountsLedger->create();
							$this->AccountsLedger->save($save_ledger);
							$last_insertId = $this->AccountsLedger->getLastInsertId();
							$transact_id['AccountsLedger']['id'] = $last_insertId;
							$transact_id['AccountsLedger']['transaction_id'] = $last_insertId;
							$this->AccountsLedger->save($transact_id);
							$save_openingBalance['AccountsAccount']['id'] = $accounts_payable['AccountsAccount']['id'];
							$save_openingBalance['AccountsAccount']['closing_balance'] = $accounts_payable['AccountsAccount']['closing_balance'] + $updated_amount;
							$this->AccountsAccount->save($save_openingBalance);
							
							/**Log Code**/
							$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save_ledger['AccountsLedger']['accounts_account_id'],$save_ledger['AccountsLedger']['credit'],0,$accounts_payable['AccountsAccount']['closing_balance'],$save_openingBalance['AccountsAccount']['closing_balance'],$last_insertId,$id,0,'Edit Bill','Edit bill accounts payable'));
							/**Log Code**/
							
						}
						if($updated_amount < 0) {
							$amountttt = explode('-',$updated_amount);
							$save_ledger['AccountsLedger']['debit'] = $amountttt[1];
							$save_ledger['AccountsLedger']['credit'] = 0;
							$save_ledger['AccountsLedger']['is_neutral'] = 'Y';
							$save_ledger['AccountsLedger']['accounts_account_id'] = $accounts_payable['AccountsAccount']['id'];
							$save_ledger['AccountsLedger']['accounts_bill_id'] = $id;
							$save_ledger['AccountsLedger']['date'] = date('Y-m-d');
							$save_ledger['AccountsLedger']['payment_description'] = "Amount has been decreased for the bill- $id";
							$save_ledger['AccountsLedger']['cheque_no'] = "$id";
							$this->AccountsLedger->create();
							$this->AccountsLedger->save($save_ledger);
							
							$last_insertId = $this->AccountsLedger->getLastInsertId();
							$transact_id['AccountsLedger']['id'] = $last_insertId;
							$transact_id['AccountsLedger']['transaction_id'] = $last_insertId;
							$this->AccountsLedger->save($transact_id);
							
							$save_closingBalance['AccountsAccount']['id'] = $accounts_payable['AccountsAccount']['id'];
							$save_closingBalance['AccountsAccount']['closing_balance'] = $accounts_payable['AccountsAccount']['closing_balance'] - $amountttt[1];
							$this->AccountsAccount->save($save_closingBalance);
							
							/**Log Code**/
							$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save_ledger['AccountsLedger']['accounts_account_id'],0,$save_ledger['AccountsLedger']['debit'],$accounts_payable['AccountsAccount']['closing_balance'],$save_closingBalance['AccountsAccount']['closing_balance'],$last_insertId,$id,0,'Edit Bill','Edit bill accounts payable'));
							/**Log Code**/
							
						}
					}
					
					if($this->data['group1'] == "Yes")
					{
						$save->data = null;
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
						$save->data['AccountsBill']['accounts_regularvendor_id'] = $this->data['AccountsBill']['accounts_regularvendor_id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
						$save->data['AccountsBill']['item_description'] = $this->data['AccountsBill']['item_description'];
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['amount'];
				
				//		$save->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
						
						$save->data['AccountsBill']['period_fromdate'] =  date('Y-m-d',strtotime($first_day));
						$save->data['AccountsBill']['period_todate'] = date('Y-m-d',strtotime($last_day));
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$save->data['AccountsBill']['id'] = $id;
						$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['billrecieveddate']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						
				
						if($this->data['AccountsBill']['bill_fileuploadpath']) {
					   		$this->Uploader->uploadDir = 'files/uploads/vendors';
					   		$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
							if($data) {
								$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
								$save->data['AccountsBill']['bill_fileuploadpath'] = $data['bill_fileuploadpath']['name'];
							}
			    		}
						$this->AccountsBill->save($save->data);
					}
					elseif($this->data['group1'] == "No")
					{
						$vendor_id = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.company_name LIKE'=>'Miscellaneous')));
						$save->data = null;
						$save->data['AccountsBill']['accounts_regularvendor_id'] = $vendor_id['AccountsRegularvendor']['id'];
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['amount'];
						//$save->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
						$save->data['AccountsBill']['period_fromdate'] = date('Y-m-d',strtotime($first_day));
						$save->data['AccountsBill']['item_description'] = $this->data['AccountsBill']['item_description'];
						$save->data['AccountsBill']['period_todate'] =date('Y-m-d',strtotime($last_day));
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$save->data['AccountsBill']['bill_recieveddate'] =date('Y-m-d',strtotime( $this->data['AccountsBill']['billrecieveddate']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						$this->Uploader = new Uploader(); 
						$this->Uploader = new Uploader(array('tempDir' => TMP));
				
						//$this->request->data['AccountsBill']['id'] = $id;
						$save->data['AccountsBill']['id']=$id;
						if($this->data['AccountsBill']['bill_fileuploadpath']) {
					   		$this->Uploader->uploadDir = 'files/uploads/vendors';
							$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
							if($data) {
								$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
								$save->data['AccountsBill']['bill_fileuploadpath'] = $data['bill_fileuploadpath']['name'];
							}
				    	}
					}
					if($this->data['AccountsBill']['set_alert'] == "Yes")
					{
						$s = date('Y-m-d',strtotime($this->data['AccountsBill']['period_fromdate']));
						debug($s['month']);
						$start =$s['year'].'-'. $s['month'].'-'.$s['day'];
						debug($start);
						$e = date('Y-m-d',strtotime($this->data['AccountsBill']['period_todate']));
						$end = $e['year'].'-'. $e['month'].'-'.$e['day'];
						$exp = $this->datecal($end,$start);
						debug($exp);
						
						$save->data['AccountsBillalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
						$save->data['AccountsBillalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
						$save->data['AccountsBillalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
						$save->data['AccountsBillalert']['due_day'] = $this->data['AccountsBill']['due_on'];
						$save->data['AccountsBillalert']['active'] = "Y";
						$save->data['AccountsBillalert']['paused'] = "N";
						$save->data['AccountsBillalert']['accounts_bills_id'] = $id;
						$save->data['AccountsBillalert']['amount'] = $this->data['AccountsBill']['bill_amount'];
						if($alert_id)
						{
							$save->data['AccountsBillalert']['id'] = $alert_id;
						}
						
						$alertid = $this->AccountsBillalert->getLastInsertId();
						$save->data['AccountsNewalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
						$save->data['AccountsNewalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
						$save->data['AccountsNewalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
						$save->data['AccountsNewalert']['due_day'] = $this->data['AccountsBill']['due_on'];
						$save->data['AccountsNewalert']['accounts_bills_id'] = $id;
						$save->data['AccountsNewalert']['accounts_billalerts_id'] = $alert_id;
						
						if($new_alert)
						{
								$this->request->data['AccountsNewalert']['id'] = $new_alert;
						}
						$this->AccountsNewalert->save($save->data);
						//debug($this->AccountsBill->save($this->request->data));
						$this->AccountsBillalert->save($save->data);
						//debug($this->AccountsBillalert->save($this->request->data));
					}
				
					if($this->data['AccountsBill']['set_alert'] == "No")
					{
						debug($alert_id);
						$save->data = null;
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
			//			$save->data['AccountsBill']['accounts_regularvendor_id'] = $this->data['AccountsBill']['accounts_regularvendor_id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
				//		$save->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
						$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['billrecieveddate']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['amount'];
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['item_description'] = $this->data['AccountsBill']['item_description'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$this->AccountsBillalert->delete($alert_id);
						$this->AccountsNewalert->delete($new_alert);
						if($this->data['AccountsBill']['bill_fileuploadpath']) {
					    	$this->Uploader->uploadDir = 'files/uploads/vendors';
							$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
							if($data) {
								$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
								$save->data['AccountsBill']['bill_fileuploadpath'] = $data['bill_fileuploadpath']['name'];
							}
				    	}
					}
					$this->AccountsBill->save($save->data);
					$this->Session->setFlash(__('<div class="flashMessageSuccess">The accounts bill has been saved</div>'));
					$yes= 1;
					$this->redirect(array('action' => 'index',0,$yes));
				}
			} else {
				//list+error
				if(!$this->data['accounts_account_id']) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any account</div>'));
				} elseif(  (!$this->data['AccountsBill']['invoice_no'] || !is_numeric($this->data['AccountsBill']['invoice_no']))  || ($this->data['AccountsBill']['invoice_no'] <= 0)) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid invoice number</div>'));
				} elseif(  (!$this->data['AccountsBill']['voucher_no'] || !is_numeric($this->data['AccountsBill']['voucher_no']))  || ($this->data['AccountsBill']['voucher_no'] <= 0  )) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid voucher number</div>'));
				} elseif(!$this->data['AccountsBill']['bill_amount']) {	
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter the amount</div>'));
				}
				for($date = 1;$date <=31;$date++) {
					$finaldate[$date]=$date;
				}
				for($month = 1;$month <=12;$month++) {
					$finalmonth[$month]=$month;
				}
				$this->set(compact('finaldate','finalmonth'));
				$new_alert2 = $this->AccountsNewalert->find('first',array('conditions'=>array('AccountsNewalert.accounts_bills_id'=>$id)));
				$new_alert = $new_alert2['AccountsNewalert']['id'];
				$alert_id2 = $this->AccountsBillalert->find('first',array('conditions'=>array('AccountsBillalert.accounts_bills_id'=>$id)));
				$alert_id = $alert_id2['AccountsBillalert']['id'];
				$initiated_on2 = $alert_id2['AccountsBillalert']['initiated_on'];
				$ending_on2 = $alert_id2['AccountsBillalert']['ending_on'];
				$frequency = $alert_id2['AccountsBillalert']['frequency_month'];
				$due_day = $alert_id2['AccountsBillalert']['due_day'];
				$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AND'=>array('AccountsRegularvendor.company_name NOT LIKE'=>'Miscellaneous','AccountsRegularvendor.active'=>'Y'))));
				$var = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
				$this->set(compact('vendornames','checked_no'));
				$expense_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name LIKE'=>'Expenses')));
				$expense_id = $expense_type['AccountType']['id'];
				$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.active'=>'Y','AccountsAccount.account_type_id'=>$expense_id))));
				$i=$j=$k=$l=0;
				/**
				 * Foreach to seperate accounts in levelwise.
				 * */
				foreach($accounts as $accounts)
				{
					switch($accounts['AccountsAccount']['level'])
					{
						case 1:
							$level1[$i]=$accounts;
							$i++;
							break;
							
						case 2:
							$level2[$j]=$accounts;
							$j++;
							break;
							
						case 3:
							$level3[$k]=$accounts;
							$k++;
							break;
						case 4:
							$level4[$l]=$accounts;
							$l++;
							break;
					}
				}
				
				if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
				if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
				if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
				if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');
		
				/**
				 * To get all accounts in a tree structure.
				 * It is used to set parent_id for a new account.
				 * */
				 $account = $this->AccountsAccount->findById($var['AccountsBill']['accounts_account_id']);
				
					$selected='';
				foreach($level1 as $level11){
					if($level11['AccountsAccount']['id'] == $account['AccountsAccount']['id']){
						$selected='selected';
						$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'"' .$selected." ". 'class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
					}else{
						$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'" class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
					}
					if($level2){
						foreach($level2 as $level22){
							if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
								if($level22['AccountsAccount']['id'] == $account['AccountsAccount']['id']){
									$selected='selected';
									$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'"'.$selected." ".' class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
								}else{
									$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'" class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
								}
								if($level3){
									foreach($level3 as $level33){
										if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
											if($level33['AccountsAccount']['id'] == $account['AccountsAccount']['id']){
												$selected='selected';
												$final_account.= '<option value="'.$level33['AccountsAccount']['id'].'"'.$selected." ". 'class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
											}else{
												$final_account.= '<option value="'.$level33['AccountsAccount']['id'].'" class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
											}
											
											if($level4){
												foreach($level4 as $level44){
													if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
														$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				$this->set(compact('final_account','current_account'));		
				$this->AccountsBill->id = $id;
				if($var['AccountsBill']['set_alert'] == 'Yes')
					$alert_check = 1;
				else 
					$alert_check = 0;
				$vendornames_new = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$var['AccountsBill']['accounts_regularvendor_id'])));
				$default_vendor = $vendornames_new['AccountsRegularvendor']['id'];
				if($vendornames_new['AccountsRegularvendor']['company_name'] == "Miscellaneous") {
					$checked_no = 1;
				} else 
					$checked_no = 0;
				$alerts = 
				$this->set(compact('checked_no','default_vendor'));
				$bill_pdf = $var['AccountsBill']['bill_fileuploadpath'];
				$bill_pdf_url =  $var['AccountsBill']['bill_fileuploadpath_url'];
				$ac_name2 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$var['AccountsBill']['accounts_account_id'])));
				$ac_name = $ac_name2['AccountsAccount']['account_name'];
				$vendor_id = $var['AccountsBill']['accounts_regularvendor_id'];
				$amount = $var['AccountsBill']['amount'];
				$invoice_no = $var['AccountsBill']['invoice_no'];
				$voucher_no = $var['AccountsBill']['voucher_no'];
				$bill_recieveddate = $var['AccountsBill']['bill_recieveddate'];
				$last_date = $var['AccountsBill']['last_date'];
				$initiated_on = $var['AccountsBill']['bill_recieveddate'];
				$ending_on = $var['AccountsBill']['last_date'];
				$status_paid = $var['AccountsBill']['paid_status'];
				$this->set(compact('amount','voucher_no','status_paid','invoice_no','bill_recieveddate','last_date','initiated_on','ending_on','vendor_id','ac_name','bill_pdf','bill_pdf_url','alert_check'));
				$this->set(compact('accountsAccounts', 'accountsRegularvendors', 'accountsBillalerts','id','frequency','due_day','flag','initiated_on2','ending_on2'));
			}
		}
		
		else//list
		{
			for($date = 1;$date <=31;$date++)
			{
				$finaldate[$date]=$date;
			}
			
			for($month = 1;$month <=12;$month++)
			{
				$finalmonth[$month]=$month;
			}
			$this->set(compact('finaldate','finalmonth'));
		
			
			$new_alert2 = $this->AccountsNewalert->find('first',array('conditions'=>array('AccountsNewalert.accounts_bills_id'=>$id)));
			$new_alert = $new_alert2['AccountsNewalert']['id'];
			$alert_id2 = $this->AccountsBillalert->find('first',array('conditions'=>array('AccountsBillalert.accounts_bills_id'=>$id)));
			$alert_id = $alert_id2['AccountsBillalert']['id'];
			$initiated_on2 = $alert_id2['AccountsBillalert']['initiated_on'];
			$ending_on2 = $alert_id2['AccountsBillalert']['ending_on'];
			$frequency = $alert_id2['AccountsBillalert']['frequency_month'];
			$due_day = $alert_id2['AccountsBillalert']['due_day'];
		//	$this->AccountsCompany->recursive = 0;
			$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AND'=>array('AccountsRegularvendor.company_name NOT LIKE'=>'Miscellaneous','AccountsRegularvendor.active'=>'Y'))));
				
			$var = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
			debug($var);
			
			
			$this->set(compact('vendornames','checked_no'));
			$expense_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name LIKE'=>'Expenses')));
			debug($expense_type);
			$expense_id = $expense_type['AccountType']['id'];
			$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.active'=>'Y','AccountsAccount.account_type_id'=>$expense_id))));
			debug($accounts);
			$i=$j=$k=$l=0;
			/**
			 * Foreach to seperate accounts in levelwise.
			 * */
			foreach($accounts as $accounts)
			{
				switch($accounts['AccountsAccount']['level'])
				{
					case 1:
						$level1[$i]=$accounts;
						$i++;
						break;
						
					case 2:
						$level2[$j]=$accounts;
						$j++;
						break;
						
					case 3:
						$level3[$k]=$accounts;
						$k++;
						break;
					case 4:
						$level4[$l]=$accounts;
						$l++;
						break;
				}
			}
			
			if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
			if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
			if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
			if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');
	
			/**
			 * To get all accounts in a tree structure.
			 * It is used to set parent_id for a new account.
			 * */
			 $account = $this->AccountsAccount->findById($var['AccountsBill']['accounts_account_id']);
			//debug($account);	
			//debug($level1);
			//debug($level2);
				$selected='';
			foreach($level1 as $level11){
				if($level11['AccountsAccount']['id'] == $account['AccountsAccount']['id']){
					$selected='selected';
					$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'"' .$selected." ". 'class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
				}else{
					$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'" class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
				}
				if($level2){
					foreach($level2 as $level22){
						if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
							if($level22['AccountsAccount']['id'] == $account['AccountsAccount']['id']){
								$selected='selected';
								$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'"'.$selected." ".' class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
							}else{
								$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'" class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
							}
							if($level3){
								foreach($level3 as $level33){
									if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
										if($level33['AccountsAccount']['id'] == $account['AccountsAccount']['id']){
											$selected='selected';
											$final_account.= '<option value="'.$level33['AccountsAccount']['id'].'"'.$selected." ". 'class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
										}else{
											$final_account.= '<option value="'.$level33['AccountsAccount']['id'].'" class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
										}
										
										if($level4){
											foreach($level4 as $level44){
												if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
													$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			$this->set(compact('final_account','current_account'));		
			$this->AccountsBill->id = $id;
			if($var['AccountsBill']['set_alert'] == 'Yes')
				$alert_check = 1;
			else $alert_check = 0;
				$vendornames_new = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$var['AccountsBill']['accounts_regularvendor_id'])));
			$default_vendor = $vendornames_new['AccountsRegularvendor']['id'];
			if($vendornames_new['AccountsRegularvendor']['company_name'] == "Miscellaneous") {
				$checked_no = 1;
			} else 
				$checked_no = 0;
			$this->set(compact('checked_no','default_vendor'));
			$bill_pdf = $var['AccountsBill']['bill_fileuploadpath'];
			$bill_pdf_url =  $var['AccountsBill']['bill_fileuploadpath_url'];
			$ac_name2 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$var['AccountsBill']['accounts_account_id'])));
			$ac_name = $ac_name2['AccountsAccount']['account_name'];
			$vendor_id = $var['AccountsBill']['accounts_regularvendor_id'];
			$amount = $var['AccountsBill']['amount'];
			$invoice_no = $var['AccountsBill']['invoice_no'];
			$voucher_no = $var['AccountsBill']['voucher_no'];
			$bill_recieveddate = $var['AccountsBill']['bill_recieveddate'];
			$last_date = $var['AccountsBill']['last_date'];
			$initiated_on = $var['AccountsBill']['bill_recieveddate'];
			$ending_on = $var['AccountsBill']['last_date'];
			$status_paid = $var['AccountsBill']['paid_status'];
			$description = $var['AccountsBill']['item_description'];
			$this->set(compact('amount','invoice_no','status_paid','voucher_no','bill_recieveddate','last_date','initiated_on','ending_on','vendor_id','ac_name','bill_pdf','bill_pdf_url','alert_check','description'));
			$this->set(compact('accountsAccounts', 'accountsRegularvendors', 'accountsBillalerts','id','frequency','due_day','flag','initiated_on2','ending_on2'));
		}
	}
 
	public function edit2($id = null,$flag = null) 
	{
		
		
		
		
			//Configure::write('debug',2);
		debug($this->data);
		$first_day = date('M 01,Y');
		$last_day = date('M t,Y', strtotime('M d,Y '));
		debug($last_day);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('AccountsBillalert');
		$this->loadModel('AccountsNewalert');
		$this->loadModel('AccountType');
		$this->Uploader = new Uploader(); 
		$this->Uploader = new Uploader(array('tempDir' => TMP));
		$this->Uploader->setup(array('tempDir' => TMP));
		for($date = 1;$date <=31;$date++)
		{
			$finaldate[$date]=$date;
		}
		
		for($month = 1;$month <=12;$month++)
		{
			$finalmonth[$month]=$month;
		}
		$this->set(compact('finaldate','finalmonth'));
	
		
		$new_alert2 = $this->AccountsNewalert->find('first',array('conditions'=>array('AccountsNewalert.accounts_bills_id'=>$id)));
		$new_alert = $new_alert2['AccountsNewalert']['id'];
		$alert_id2 = $this->AccountsBillalert->find('first',array('conditions'=>array('AccountsBillalert.accounts_bills_id'=>$id)));
		$alert_id = $alert_id2['AccountsBillalert']['id'];
		$initiated_on2 = $alert_id2['AccountsBillalert']['initiated_on'];
		$ending_on2 = $alert_id2['AccountsBillalert']['ending_on'];
		$frequency = $alert_id2['AccountsBillalert']['frequency_month'];
		$due_day = $alert_id2['AccountsBillalert']['due_day'];
	//	$this->AccountsCompany->recursive = 0;
		$vendornames = $this->AccountsRegularvendor->find('list', array('fields' => array('AccountsRegularvendor.id','AccountsRegularvendor.company_name'), 'conditions'=>array('AccountsRegularvendor.active'=>'Y')));
		
		$var = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
		debug($var);
		
		
		$this->set(compact('vendornames','checked_no'));
		$expense_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name LIKE'=>'Expenses')));
		debug($expense_type);
		$expense_id = $expense_type['AccountType']['id'];
		$accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.active'=>'Y','AccountsAccount.account_type_id'=>$expense_id))));
		debug($accounts);
		$i=$j=$k=$l=0;
		/**
		 * Foreach to seperate accounts in levelwise.
		 * */
		foreach($accounts as $accounts)
		{
			switch($accounts['AccountsAccount']['level'])
			{
				case 1:
					$level1[$i]=$accounts;
					$i++;
					break;
					
				case 2:
					$level2[$j]=$accounts;
					$j++;
					break;
					
				case 3:
					$level3[$k]=$accounts;
					$k++;
					break;
				case 4:
					$level4[$l]=$accounts;
					$l++;
					break;
			}
		}
		
		if($level1)  $level1= Set::sort($level1, '{n}.AccountsAccount.account_name', 'asc');
		if($level2)  $level2= Set::sort($level2, '{n}.AccountsAccount.account_name', 'asc');
		if($level3)  $level3= Set::sort($level3, '{n}.AccountsAccount.account_name', 'asc');
		if($level4)  $level4= Set::sort($level4, '{n}.AccountsAccount.account_name', 'asc');

		/**
		 * To get all accounts in a tree structure.
		 * It is used to set parent_id for a new account.
		 * */
		 $account = $this->AccountsAccount->findById($var['AccountsBill']['accounts_account_id']);
			$selected='';
		foreach($level1 as $level11){
			if($level11['AccountsAccount']['id'] == $account['AccountsAccount']['parent_id']){
				$selected='selected';
				$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'"' .$selected." ". 'class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
			}else{
				$final_account.= '<option value="'.$level11['AccountsAccount']['id'].'" class="stepOne">'.$level11['AccountsAccount']['account_name'].'</option>';
			}
			if($level2){
				foreach($level2 as $level22){
					if($level22['AccountsAccount']['parent_id']==$level11['AccountsAccount']['id']){
						if($level22['AccountsAccount']['id'] == $account['AccountsAccount']['parent_id']){
							$selected='selected';
							$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'"'.$selected." ".' class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
						}else{
							$final_account.= '<option value="'.$level22['AccountsAccount']['id'].'" class="stepTwo">'.$level22['AccountsAccount']['account_name'].'</option>';
						}
						if($level3){
							foreach($level3 as $level33){
								if($level33['AccountsAccount']['parent_id']==$level22['AccountsAccount']['id']){
									if($level33['AccountsAccount']['id'] == $account['AccountsAccount']['parent_id']){
										$selected='selected';
										$final_account.= '<option value="'.$level33['AccountsAccount']['id'].'"'.$selected." ". 'class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
									}else{
										$final_account.= '<option value="'.$level33['AccountsAccount']['id'].'" class="stepThree">'.$level33['AccountsAccount']['account_name'].'</option>';
									}
									
									if($level4){
										foreach($level4 as $level44){
											if($level44['AccountsAccount']['parent_id']==$level33['AccountsAccount']['id']){
												$final_account[$level44['AccountsAccount']['id']] = '|------------'.$level44['AccountsAccount']['account_name'];
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		
		debug($final_account);
	
		$this->set(compact('final_account','current_account'));		
		
		$this->AccountsBill->id = $id;
		
		if($var['AccountsBill']['set_alert'] == 'Yes')
		$alert_check = 1;
		else $alert_check = 0;
		$vendornames_new = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$var['AccountsBill']['accounts_regularvendor_id'])));
		debug($vendornames_new);
		$default_vendor = $vendornames_new['AccountsRegularvendor']['company_name'];
		if($vendornames_new['AccountsRegularvendor']['company_name'] == "Miscellaneous")
		{
			$checked_no = 1;
		}
		else $checked_no = 0;
		$alerts = 
		$this->set(compact('checked_no','default_vendor'));
		$bill_pdf = $var['AccountsBill']['bill_fileuploadpath'];
		$bill_pdf_url =  $var['AccountsBill']['bill_fileuploadpath_url'];
		
		$ac_name2 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$var['AccountsBill']['accounts_account_id'])));
		$ac_name = $ac_name2['AccountsAccount']['account_name'];
		$vendor_id = $var['AccountsBill']['accounts_regularvendor_id'];
		$amount = $var['AccountsBill']['amount'];
		$bill_recieveddate = $var['AccountsBill']['bill_recieveddate'];
		$last_date = $var['AccountsBill']['last_date'];
		$initiated_on = $var['AccountsBill']['bill_recieveddate'];
		$ending_on = $var['AccountsBill']['last_date'];
		$this->set(compact('ac_name','amount','bill_recieveddate','last_date','initiated_on','ending_on','vendor_id','ac_name','bill_pdf','bill_pdf_url','alert_check'));
		if (!$this->AccountsBill->exists()) {
			throw new NotFoundException(__('Invalid accounts bill'));
		}
		if ($this->request->is('post') || $this->request->is('put')) 
		{
			if(!empty($this->data))
			{
				if (1) 
				{
					debug($this->data);
					if($this->data['group1'] == "Yes")
					{
						$save->data = null;
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
						$save->data['AccountsBill']['accounts_regularvendor_id'] = $this->data['AccountsBill']['accounts_regularvendor_id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['amount'];
				
				//		$save->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
						
						$save->data['AccountsBill']['period_fromdate'] =  date('Y-m-d',strtotime($first_day));
						$save->data['AccountsBill']['period_todate'] = date('Y-m-d',strtotime($last_day));
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$save->data['AccountsBill']['id'] = $id;
						$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['billrecieveddate']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						
				
						if($this->data['AccountsBill']['bill_fileuploadpath'])
			   			{
				    		
					   		$this->Uploader->uploadDir = 'files/uploads/vendors';
					   		$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
							debug($data);
							if($data)
							{
								$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
								$save->data['AccountsBill']['bill_fileuploadpath'] = $data['bill_fileuploadpath']['name'];
							}
			    		}
			    		debug($save->data);
						$this->AccountsBill->save($save->data);
					}
					elseif($this->data['group1'] == "No")
					{
						$vendor_id = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.company_name LIKE'=>'Miscellaneous')));
						$save->data = null;
						$save->data['AccountsBill']['accounts_regularvendor_id'] = $vendor_id['AccountsRegularvendor']['id'];
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['amount'];
						//$save->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
						$save->data['AccountsBill']['period_fromdate'] = $first_day;
						$save->data['AccountsBill']['period_todate'] =$last_day;
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$save->data['AccountsBill']['bill_recieveddate'] =date('Y-m-d',strtotime( $this->data['AccountsBill']['billrecieveddate']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						$this->Uploader = new Uploader(); 
						$this->Uploader = new Uploader(array('tempDir' => TMP));
				
						//$this->request->data['AccountsBill']['id'] = $id;
						$save->data['AccountsBill']['id']=$id;
						if($this->data['AccountsBill']['bill_fileuploadpath'])
			   			{
				    	
					   		$this->Uploader->uploadDir = 'files/uploads/vendors';
					//		debug($this->Uploader->uploadAll(array('photo')));
							$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
							debug($this->Uploader->uploadAll());
							debug($this->Uploader->upload(array('bill_fileuploadpath')));
							debug($data);
							if($data)
							{
								$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
								$save->data['AccountsBill']['bill_fileuploadpath'] = $data['bill_fileuploadpath']['name'];
							}
				    	}
			            debug($save->data);
						debug($this->AccountsBill->save($save->data));
					}
					if($this->data['AccountsBill']['set_alert'] == "Yes")
					{
						$s = date('Y-m-d',strtotime($this->data['AccountsBill']['period_fromdate']));
						debug($s['month']);
						$start =$s['year'].'-'. $s['month'].'-'.$s['day'];
						debug($start);
						$e = date('Y-m-d',strtotime($this->data['AccountsBill']['period_todate']));
						$end = $e['year'].'-'. $e['month'].'-'.$e['day'];
						$exp = $this->datecal($end,$start);
						debug($exp);
						
						$save->data['AccountsBillalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
						$save->data['AccountsBillalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
						$save->data['AccountsBillalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
						$save->data['AccountsBillalert']['due_day'] = $this->data['AccountsBill']['due_on'];
						$save->data['AccountsBillalert']['active'] = "Y";
						$save->data['AccountsBillalert']['paused'] = "N";
						$save->data['AccountsBillalert']['accounts_bills_id'] = $id;
						$save->data['AccountsBillalert']['amount'] = $this->data['AccountsBill']['bill_amount'];
						if($alert_id)
						{
							$save->data['AccountsBillalert']['id'] = $alert_id;
						}
						
						$alertid = $this->AccountsBillalert->getLastInsertId();
						$save->data['AccountsNewalert']['initiated_on']=date('Y-m-d',strtotime($this->data['AccountsBill']['initiated']));
						$save->data['AccountsNewalert']['ending_on'] = date('Y-m-d',strtotime($this->data['AccountsBill']['ending']));
						$save->data['AccountsNewalert']['frequency_month'] = $this->data['AccountsBill']['pay_every'];
						$save->data['AccountsNewalert']['due_day'] = $this->data['AccountsBill']['due_on'];
						$save->data['AccountsNewalert']['accounts_bills_id'] = $id;
						$save->data['AccountsNewalert']['accounts_billalerts_id'] = $alert_id;
						
						if($new_alert)
						{
								$this->request->data['AccountsNewalert']['id'] = $new_alert;
						}
						$this->AccountsNewalert->save($save->data);
						//debug($this->AccountsBill->save($this->request->data));
						$this->AccountsBillalert->save($save->data);
						//debug($this->AccountsBillalert->save($this->request->data));
					}
				
					if($this->data['AccountsBill']['set_alert'] == "No")
					{
						debug($alert_id);
						$save->data = null;
						$save->data['AccountsBill']['accounts_account_id'] = $this->data['accounts_account_id'];
			//			$save->data['AccountsBill']['accounts_regularvendor_id'] = $this->data['AccountsBill']['accounts_regularvendor_id'];
						$save->data['AccountsBill']['invoice_no'] = $this->data['AccountsBill']['invoice_no'];
						$save->data['AccountsBill']['voucher_no'] = $this->data['AccountsBill']['voucher_no'];
				//		$save->data['AccountsBill']['bill_fileuploadpath'] = $this->data['AccountsBill']['bill_fileuploadpath'];
						$save->data['AccountsBill']['bill_recieveddate'] = date('Y-m-d',strtotime($this->data['AccountsBill']['billrecieveddate']));
						$save->data['AccountsBill']['last_date'] = date('Y-m-d',strtotime($this->data['AccountsBill']['lastdate']));
						$save->data['AccountsBill']['amount'] = $this->data['AccountsBill']['amount'];
						$save->data['AccountsBill']['paid_status'] = $this->data['AccountsBill']['paid_status'];
						$save->data['AccountsBill']['set_alert'] = $this->data['AccountsBill']['set_alert'];
						$this->AccountsBillalert->delete($alert_id);
						$this->AccountsNewalert->delete($new_alert);
						if($this->data['AccountsBill']['bill_fileuploadpath'])
				   		{
					    	
					   		$this->Uploader->uploadDir = 'files/uploads/vendors';
					//		debug($this->Uploader->uploadAll(array('photo')));
							$data = $this->Uploader->uploadAll(array('bill_fileuploadpath'));
							debug($this->Uploader->uploadAll());
							debug($this->Uploader->upload(array('bill_fileuploadpath')));
							debug($data);
							if($data)
							{
								$save->data['AccountsBill']['bill_fileuploadpath_url'] = 'files/uploads/vendors';
								$save->data['AccountsBill']['bill_fileuploadpath'] = $data['bill_fileuploadpath']['name'];
							}
				    	}
						debug($this->AccountsBill->save($save->data));
					}
				
					$this->AccountsBill->save($save->data);
					$this->Session->setFlash(__('<div class="flashMessageSucess">The accounts bill has been saved</div>'));
					$yes= 1;
					debug($this->request->data);
				$this->redirect(array('action' => 'index',$flag,$yes));
			} 
			else {
				$this->Session->setFlash(__('<div class="flashMessageError">The accounts bill could not be saved. Please, try again.</div>'));
			}
		}
	}
	else {
		$this->request->data = $this->AccountsBill->read(null, $id);
	}
/*	$accountsAccounts = $this->AccountsBill->AccountsAccount->find('list');
	$accountsRegularvendors = $this->AccountsBill->AccountsRegularvendor->find('list');
*/	$this->set(compact('accountsAccounts', 'accountsRegularvendors', 'accountsBillalerts','id','frequency','due_day','flag','initiated_on2','ending_on2'));
}


	function paybill($id = null,$flag=null) {
		//Configure::write('debug',2);
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		if($this->data) {
			if(($this->data['Payment']['payable_amount'] && $this->data['group1'])) {
				//saving and transaction
				$details = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
				$account_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$details['AccountsBill']['accounts_account_id'])));
				$acc_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Payment']['accountid'])));
				$minus = $acc_details['AccountsAccount']['opening_balance'];
				$add = $acc_details['AccountsAccount']['opening_balance'];
				$vendor_details = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$details['AccountsBill']['accounts_regularvendor_id'])));
				$ven_name = $vendor_details['AccountsRegularvendor']['company_name'];
				$totamount = $details['AccountsBill']['amount'];
				$amount_paid = $details['AccountsBill']['billamount'];
				$rcvd_date = $details['AccountsBill']['bill_recieveddate'];
				$last_date = $details['AccountsBill']['last_date'];
				$invoice_no = $details['AccountsBill']['invoice_no'];
				$bal_amount = $details['AccountsBill']['billamount'];
				$this->set(compact('ven_name','bal_amount','rcvd_date','last_date','invoice_no','totamount'));
				$a = $details['AccountsBill']['amount']-$this->data['Payment']['payable_amount'];
				$dateee = date('Y-m-d',strtotime($this->data['Payment']['paidonn_date']));
				if(!empty($ven_name)) {
					$vendor_name_forflashmsg = $ven_name;
				} else {
					$vendor_name_forflashmsg = 'Unknown vendor!';
				}
				
				 
				if($this->data['group1'] == "Cash") {
					$debit_accountdetail = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Payment']['accountid']),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));			
					if($debit_accountdetail['AccountsAccount']['closing_balance'] < $this->data['Payment']['payable_amount']){
						$this->Session->setFlash(__('<div class="flashMessageError">The selected account don\'t have enough balance for this transaction.</div>'));
						$this->redirect(array('action'=>'paybill',$id));
					}
					$save->data = null;
					$this->AccountsLedger->create();
					$save->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
					$save->data['AccountsLedger']['date'] = $dateee; 
					$save->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					$save->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$save->data['AccountsLedger']['approved_by'] = $this->data['Payment']['approved_by'];
					$save->data['AccountsLedger']['recieved_by'] = $this->data['Payment']['recieved_by'];
					$save->data['AccountsLedger']['cheque_no'] = "Bill #".$details['AccountsBill']['id']." paid to ".$vendor_name_forflashmsg." towards ".$account_name['AccountsAccount']['account_name'];
					$save->data['AccountsLedger']['debit'] = $this->data['Payment']['payable_amount'];
					$save->data['AccountsLedger']['credit'] = "0";
					$this->AccountsLedger->save($save->data);
					$insertId = $this->AccountsLedger->getLastInsertId();
					
					//For Debit entry..
					if($insertId) {
						$savet->data = null;
						$savet->data['AccountsLedger']['transaction_id'] = $insertId;
						$savet->data['AccountsLedger']['id'] = $insertId;
					}
					$this->AccountsLedger->save($savet->data);
					$save_ClosingBalance['AccountsAccount']['id'] = $debit_accountdetail['AccountsAccount']['id'];
					$save_ClosingBalance['AccountsAccount']['closing_balance'] = $debit_accountdetail['AccountsAccount']['closing_balance']-$this->data['Payment']['payable_amount']; 
					$this->AccountsAccount->save($save_ClosingBalance);
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save->data['AccountsLedger']['accounts_account_id'],0,$save->data['AccountsLedger']['debit'],$debit_accountdetail['AccountsAccount']['closing_balance'],$save_ClosingBalance['AccountsAccount']['closing_balance'],$insertId,$save->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','Pay from Bank/Cash'));
					/**Log Code**/
					
					//For Credit entry... 
					$expense_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$details['AccountsBill']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));      
					$expense_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$details['AccountsBill']['accounts_account_id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
					$expense_balance_amount = null;
					$expense_balance_amount = $expense_accountdetails['AccountsAccount']['closing_balance'];
					$savecredit->data = null;
					$this->AccountsLedger->create();
					$savecredit->data['AccountsLedger']['accounts_account_id'] = $details['AccountsBill']['accounts_account_id'];
					$savecredit->data['AccountsLedger']['date'] = $dateee;
					$savecredit->data['AccountsLedger']['payment_description'] = "Amount Credited!";
					$savecredit->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$savecredit->data['AccountsLedger']['approved_by'] = $this->data['Payment']['approved_by'];
					$savecredit->data['AccountsLedger']['recieved_by'] = $this->data['Payment']['recieved_by'];
					$savecredit->data['AccountsLedger']['cheque_no'] = "Bill #".$details['AccountsBill']['id']." paid to ".$vendor_name_forflashmsg." towards ".$acc_details['AccountsAccount']['account_name'];
					$savecredit->data['AccountsLedger']['debit'] = "0";
					$savecredit->data['AccountsLedger']['credit'] =$this->data['Payment']['payable_amount'];
					$savecredit->data['AccountsLedger']['transaction_id'] = $insertId;
					$this->AccountsLedger->save($savecredit->data);
					$expenseLedgerLastInsertIDDD = $this->AccountsLedger->getLastInsertId();
					$saveClosingBalance['AccountsAccount']['id'] =  $expense_accountdetails['AccountsAccount']['id'];
					$saveClosingBalance['AccountsAccount']['closing_balance'] = $expense_balance_amount+$this->data['Payment']['payable_amount'];
					$this->AccountsAccount->save($saveClosingBalance);
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$savecredit->data['AccountsLedger']['accounts_account_id'],$savecredit->data['AccountsLedger']['credit'],0,$expense_balance_amount,$saveClosingBalance['AccountsAccount']['closing_balance'],$expenseLedgerLastInsertIDDD,$savecredit->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','Pay bill increase expense account'));
					/**Log Code**/
					
					//Accounts Payable 
					$expense_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
					$expense_balance_amount = $expense_accountdetails['AccountsAccount']['closing_balance'];
					$savecredit->data = null;
					$this->AccountsLedger->create();
					$savecredit->data['AccountsLedger']['is_neutral'] = 'Y';
					$savecredit->data['AccountsLedger']['accounts_account_id'] = $expense_accountdetails['AccountsAccount']['id'];
					$savecredit->data['AccountsLedger']['date'] = $dateee;
					$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					$savecredit->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$savecredit->data['AccountsLedger']['cheque_no'] = "Bill #".$details['AccountsBill']['id']." paid to ".$vendor_name_forflashmsg." towards ".$account_name['AccountsAccount']['account_name'];
					$savecredit->data['AccountsLedger']['credit'] = "0";
					$savecredit->data['AccountsLedger']['debit'] =$this->data['Payment']['payable_amount'];
					$this->AccountsLedger->save($savecredit->data);
					$acc_payable = $this->AccountsLedger->getLastInsertId();
					$save_transac_id['AccountsLedger']['id'] = $acc_payable;
					$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
					$this->AccountsLedger->save($save_transac_id);
					$saveClosingBalance1['AccountsAccount']['id'] = $expense_accountdetails['AccountsAccount']['id'];
					$saveClosingBalance1['AccountsAccount']['closing_balance'] = ($expense_balance_amount - $this->data['Payment']['payable_amount']);
					$this->AccountsAccount->save($saveClosingBalance1);
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$savecredit->data['AccountsLedger']['accounts_account_id'],0,$savecredit->data['AccountsLedger']['debit'],$expense_balance_amount,$saveClosingBalance1['AccountsAccount']['closing_balance'],$acc_payable,$savecredit->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','Pay bill decrease accounts payable'));
					/**Log Code**/
					
					
					//For saving Accounts bills . .
					if($details['AccountsBill']['amount'] == ($this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'])) {
						$save2->data = null;
						$save2->data['AccountsBill']['id'] = $id;
						$save2->data['AccountsBill']['paid_status'] = 'Y';
						$save2->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$save2->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
						$this->AccountsBill->save($save2->data);
					} else {
						$saven->data = null;
						$saven->data['AccountsBill']['id'] = $id;
						$saven->data['AccountsBill']['paid_status'] = 'N';
						$saven->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$saven->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
						$this->AccountsBill->save($saven->data);
					}
					$yes= null;
					$this->Session->setFlash(__('<div class="flashMessageSuccess">The bill is successfully paid.</div>'));
					$yes= 1;	
					$this->redirect(array('action' => 'index',0,$yes));
				} elseif($this->data['group1'] == "Cheque") {
					$saveClientpayment = null;
					$this->loadModel('ChequePaymentdetail');
					$saveClientpayment['ChequePaymentdetail']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$saveClientpayment['ChequePaymentdetail']['accounts_account_id'] = $this->data['Payment']['accountid'];
					$saveClientpayment['ChequePaymentdetail']['amount'] = $this->data['Payment']['payable_amount'];
					$saveClientpayment['ChequePaymentdetail']['details'] = "Bill #".$details['AccountsBill']['id']." paid to ".$vendor_name_forflashmsg." towards ".$account_name['AccountsAccount']['account_name']." through cheque #".$this->data['Payment']['cheque_no'];
					$saveClientpayment['ChequePaymentdetail']['cheque_in_favour'] = $this->data['Payment']['cheque_infavourof'];
					$saveClientpayment['ChequePaymentdetail']['cheque_dated'] = date('Y-m-d',strtotime($this->data['Payment']['cheque_dated']));
					$saveClientpayment['ChequePaymentdetail']['paid'] = 'N';
					$saveClientpayment['ChequePaymentdetail']['approved_by'] = $this->data['Payment']['approved_by'];
					$saveClientpayment['ChequePaymentdetail']['recieved_by'] = $this->data['Payment']['recieved_by'];
					debug($saveClientpayment);
					$this->ChequePaymentdetail->create();
					if($this->ChequePaymentdetail->save($saveClientpayment)) {
						$save4->data = null;
						$save4->data['AccountsBill']['id'] = $id;
						$save4->data['AccountsBill']['ledger_due'] = 'Y';
						$save4->data['AccountsBill']['paid_status'] = 'N';
						$save4->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$save4->data['AccountsBill']['billamount'] = $this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'];
						$this->AccountsBill->save($save4->data);
						$yes= null;
						$this->Session->setFlash(__('<div class="flashMessageSuccess">The bill is successfully paid! This bill needs to be reconciled!</div>'));
						$yes= 1;	
						$this->redirect(array('action' => 'index',0,$yes));
					}
				}
		
				elseif($this->data['group1'] == "Card") {
					$card->data = null;
					$debit_accountdetail = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Payment']['accountid']),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
					$acc_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$debit_accountdetail['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
					$golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$acc_type['AccountType']['accounts_goldenrule_id'])));
					$balance_amount = null;
					$balance_amount = $debit_accountdetail['AccountsAccount']['closing_balance'];
					if($golden_rule['AccountsGoldenrule']['decrease'] == 'Debit') {
						if($balance_amount < $this->data['Payment']['payable_amount']) {
							$this->Session->setFlash(__('<div class="flashMessageError">The selected account don\'t have enough balance for this transaction.</div>'));
							$this->redirect(array('action'=>'paybill',$id));
						}
					}
					
					if($golden_rule['AccountsGoldenrule']['decrease'] == 'Debit') {
						$saveClosingBalance5['AccountsAccount']['closing_balance'] = $balance_amount - $this->data['Payment']['payable_amount'];
						$card->data['AccountsLedger']['debit'] = $this->data['Payment']['payable_amount'];
						$card->data['AccountsLedger']['credit'] = "0";
						$card->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					} else {
						$saveClosingBalance5['AccountsAccount']['closing_balance'] = $balance_amount + $this->data['Payment']['payable_amount'];
						$card->data['AccountsLedger']['credit'] = $this->data['Payment']['payable_amount'];
						$card->data['AccountsLedger']['debit'] = "0";
						$card->data['AccountsLedger']['payment_description'] = "Amount Credited!";
					}	
					$card->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
					$card->data['AccountsLedger']['date'] = $dateee;
					$card->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($card->data);	
					$insertId2c = $this->AccountsLedger->getLastInsertId();
					if($insertId2c) {
						$savet33->data = null;
						$savet33->data['AccountsLedger']['transaction_id'] = $insertId2c;
						$savet33->data['AccountsLedger']['id'] = $insertId2c;
					}
					$this->AccountsLedger->save($savet33->data);
					
					$saveClosingBalance5['AccountsAccount']['id'] = $debit_accountdetail['AccountsAccount']['id'];
					$this->AccountsAccount->save($saveClosingBalance5);
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$card->data['AccountsLedger']['accounts_account_id'],$card->data['AccountsLedger']['credit'],$card->data['AccountsLedger']['debit'],$balance_amount,$saveClosingBalance5['AccountsAccount']['closing_balance'],$insertId2c,$card->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','Pay bill by credit card'));
					/**Log Code**/
						
					//For Credit entry..
					$card2->data = null;
					$expense_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$details['AccountsBill']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
					$expense_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$details['AccountsBill']['accounts_account_id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
					$expense_balance_amount = null;
					$expense_balance_amount = $expense_accountdetails['AccountsAccount']['closing_balance'];
					
					$card2->data['AccountsLedger']['debit'] = "0";
					$card2->data['AccountsLedger']['credit'] = $this->data['Payment']['payable_amount'];
					$card2->data['AccountsLedger']['accounts_account_id'] = $expense_accountdetails['AccountsAccount']['id'];
					$card2->data['AccountsLedger']['date'] = $dateee; 
					$card2->data['AccountsLedger']['payment_description'] = "Amount Credited!";
					$card2->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					
					$card2->data['AccountsLedger']['transaction_id'] = $insertId2c;
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($card2->data);
					$ccLedgerlastInsertId = $this->AccountsLedger->getLastInsertId();
					$saveClosingBalance6['AccountsAccount']['id'] = $expense_accountdetails['AccountsAccount']['id'];
					$saveClosingBalance6['AccountsAccount']['closing_balance'] = $expense_balance_amount + $this->data['Payment']['payable_amount'];
					$this->AccountsAccount->save($saveClosingBalance6);
					
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$card2->data['AccountsLedger']['accounts_account_id'],$card2->data['AccountsLedger']['credit'],0,$expense_balance_amount,$saveClosingBalance6['AccountsAccount']['closing_balance'],$ccLedgerlastInsertId,$card2->data['AccountsLedger']['accounts_account_id'],0,'Pay Bill','Pay bill by credit card -> Expense increase'));
					/**Log Code**/
					
					
					
					//Accounts Payable
					$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
					$accountsPayable_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
					$expenseAcc_past_entries = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accountsPayable_accountdetails['AccountsAccount']['id'],'AccountsLedger.date >'=> $dateee),'order'=>array('AccountsLedger.date ASC','AccountsLedger.id ASC')));		
					$accountsPayable_balance_amount = null;$savecredit->data = null;
					$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['closing_balance'];
					$this->AccountsLedger->create();
					$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
					$savecredit->data['AccountsLedger']['date'] = $dateee;
					$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
					$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					$savecredit->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$savecredit->data['AccountsLedger']['cheque_no'] = "Bill #".$details['AccountsBill']['id']." to ".$vendor_name_forflashmsg." towards ".$account_name['AccountsAccount']['account_name'];
					$savecredit->data['AccountsLedger']['credit'] = "0";
					$savecredit->data['AccountsLedger']['debit'] =$this->data['Payment']['payable_amount'];
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($savecredit->data);
					$acc_payable = $this->AccountsLedger->getLastInsertId();
					$save_transac_id['AccountsLedger']['id'] = $acc_payable;
					$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
					$this->AccountsLedger->save($save_transac_id);
					
					$saveClosingBalance7['AccountsAccount']['id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
					$saveClosingBalance7['AccountsAccount']['closing_balance'] = $accountsPayable_balance_amount - $this->data['Payment']['payable_amount'];
					$this->AccountsAccount->save($saveClosingBalance7);
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$savecredit->data['AccountsLedger']['accounts_account_id'],0,$savecredit->data['AccountsLedger']['debit'],$accountsPayable_balance_amount,$saveClosingBalance7['AccountsAccount']['closing_balance'],$acc_payable,$savecredit->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','Pay bill by credit card -> Accounts Payable decrease'));
					/**Log Code**/
					
						
					//For saving Account bills . . 	
					if($details['AccountsBill']['amount'] == ($this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'])) {
						$saveb->data = null;
						$saveb->data['AccountsBill']['id'] = $id;
						$saveb->data['AccountsBill']['paid_status'] = 'Y';
						$saveb->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$saveb->data['AccountsBill']['billamount'] = $this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'];
						$this->AccountsBill->save($saveb->data);
					} else {
						$saveb2->data = null;
						$saveb2->data['AccountsBill']['id'] = $id;
						$saveb2->data['AccountsBill']['paid_status'] = 'N';
						$saveb2->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$saveb2->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
						$this->AccountsBill->save($saveb2->data);
					}
					$yes= null;
					$this->Session->setFlash(__('<div class="flashMessageSuccess">The bill is successfully paid.</div>'));
					$yes= 1;	
					$this->redirect(array('action' => 'index',0,$yes));
				}
				elseif($this->data['group1'] == "Tax") {
					
					//TDS Account Increase
					$debit_accountdetail = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Payment']['accounts_Accounts_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
					
					$balance_amount1 = null;
					$balance_amount1 = $debit_accountdetail['AccountsAccount']['closing_balance'];
					$acc_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$debit_accountdetail['AccountsAccount']['account_type_id']),'fields'=>array('AccountType.accounts_goldenrule_id')));
					$golden_rule = $this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$acc_type['AccountType']['accounts_goldenrule_id'])));
					$save3->data = null;
					$this->AccountsLedger->create();
					$save3->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accounts_Accounts_id'];
					$save3->data['AccountsLedger']['date'] = $dateee;
					$save3->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					$save3->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$save3->data['AccountsLedger']['cheque_no'] = "Bill #".$details['AccountsBill']['id']." to ".$vendor_name_forflashmsg." towards ".$account_name['AccountsAccount']['account_name'];
					$save3->data['AccountsLedger']['debit'] = "0";
					$save3->data['AccountsLedger']['credit'] =$this->data['Payment']['payable_amount'];
					$this->AccountsLedger->save($save3->data);
					$insertId2 = $this->AccountsLedger->getLastInsertId();
					if($insertId2) {
						$savet3->data = null;
						$savet3->data['AccountsLedger']['transaction_id'] = $insertId2;
						$savet3->data['AccountsLedger']['id'] = $insertId2;
					}
					$this->AccountsLedger->save($savet3->data);
					
					$saveClosingBalance8['AccountsAccount']['id'] = $debit_accountdetail['AccountsAccount']['id'];
					$saveClosingBalance8['AccountsAccount']['closing_balance'] = $balance_amount1 + $this->data['Payment']['payable_amount'];
					$this->AccountsAccount->save($saveClosingBalance8);
					
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$save3->data['AccountsLedger']['accounts_account_id'],$save3->data['AccountsLedger']['credit'],0,$balance_amount1,$saveClosingBalance8['AccountsAccount']['closing_balance'],$insertId2,$save3->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','TDS'));
					/**Log Code**/
					
					
					//Expense Account Increase 
					$card2->data = null;
					$expense_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$details['AccountsBill']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
					$expense_ledgerdetails = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$details['AccountsBill']['accounts_account_id']),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
					$expense_balance_amount = null;
					$expense_balance_amount = $expense_accountdetails['AccountsAccount']['closing_balance'];
					$card2->data['AccountsLedger']['debit'] = "0";
					$card2->data['AccountsLedger']['credit'] = $this->data['Payment']['payable_amount'];
					$card2->data['AccountsLedger']['accounts_account_id'] = $expense_accountdetails['AccountsAccount']['id'];
					$card2->data['AccountsLedger']['date'] = $dateee;
					$card2->data['AccountsLedger']['cheque_no'] = "Bill #".$details['AccountsBill']['id']." paid to ".$vendor_name_forflashmsg." towards ".$account_name['AccountsAccount']['account_name'];
					$card2->data['AccountsLedger']['payment_description'] = "Amount Credited!";
					$card2->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$card2->data['AccountsLedger']['transaction_id'] = $insertId2;
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($card2->data);
					$ExpeseLedgerLastInsertedId = $this->AccountsLedger->getLastInsertId();
					$saveClosingBalance9['AccountsAccount']['id'] = $expense_accountdetails['AccountsAccount']['id'];
					$saveClosingBalance9['AccountsAccount']['closing_balance'] = $expense_balance_amount + $this->data['Payment']['payable_amount']; 
					$this->AccountsAccount->save($saveClosingBalance9);
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$card2->data['AccountsLedger']['accounts_account_id'],$card2->data['AccountsLedger']['credit'],0,$expense_balance_amount,$saveClosingBalance9['AccountsAccount']['closing_balance'],$ExpeseLedgerLastInsertedId,$card2->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','TDS -> Expense Increase'));
					/**Log Code**/
					
					
					
					//Accounts Payable Debit entry
					$tax_acc_payable = null;
					$accountsPayable_accountdetails = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.opening_balance','AccountsAccount.account_type_id','AccountsAccount.closing_balance')));
				
					$accountsPayable_balance_amount = $accountsPayable_accountdetails['AccountsAccount']['closing_balance'];
					$savecredit->data = null;
					$this->AccountsLedger->create();
					$savecredit->data['AccountsLedger']['accounts_account_id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
					$savecredit->data['AccountsLedger']['date'] = $dateee;
					$savecredit->data['AccountsLedger']['is_neutral'] = 'Y'; 
					$savecredit->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					$savecredit->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$savecredit->data['AccountsLedger']['cheque_no'] = "Bill #".$details['AccountsBill']['id']." paid to ".$account_name['AccountsAccount']['account_name'];
					$savecredit->data['AccountsLedger']['credit'] = "0";
					$savecredit->data['AccountsLedger']['debit'] =$this->data['Payment']['payable_amount'];
					$this->AccountsLedger->create();
					$this->AccountsLedger->save($savecredit->data);
					$acc_payable = $this->AccountsLedger->getLastInsertId();
					$save_transac_id['AccountsLedger']['id'] = $acc_payable;
					$save_transac_id['AccountsLedger']['transaction_id'] = $acc_payable;
					$this->AccountsLedger->save($save_transac_id);
					
					$saveClosingBalance10['AccountsAccount']['id'] = $accountsPayable_accountdetails['AccountsAccount']['id'];
					$saveClosingBalance10['AccountsAccount']['closing_balance'] = $accountsPayable_balance_amount - $this->data['Payment']['payable_amount'];
					$this->AccountsAccount->save($saveClosingBalance10);
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$savecredit->data['AccountsLedger']['accounts_account_id'],0,$savecredit->data['AccountsLedger']['debit'],$accountsPayable_balance_amount,$saveClosingBalance10['AccountsAccount']['closing_balance'],$acc_payable,$savecredit->data['AccountsLedger']['accounts_bill_id'],0,'Pay Bill','TDS -> Accounts Payable Decrease'));
					/**Log Code**/
					
					//For saving Accounts bills . .
					if($details['AccountsBill']['amount'] == ($this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'])) {
						$save2->data = null;
						$save2->data['AccountsBill']['id'] = $id;
						$save2->data['AccountsBill']['paid_status'] = 'Y';
						$save2->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$save2->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
						$this->AccountsBill->save($save2->data);						
					} else {
						$saven->data = null;
						$saven->data['AccountsBill']['id'] = $id;
						$saven->data['AccountsBill']['paid_status'] = 'N';
						$saven->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$saven->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
						$this->AccountsBill->save($saven->data);
					}
					$yes= null;
					$this->Session->setFlash(__('<div class="flashMessageSuccess">The bill is successfully paid.</div>'));
					$yes = 1;	
					$this->redirect(array('action' => 'index',0,$yes));
				}
			}
			else {
				//list + error
				$details = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
				$acc_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Payment']['accountid'])));
				$minus = $acc_details['AccountsAccount']['opening_balance'];
				$add = $acc_details['AccountsAccount']['opening_balance'];
				$vendor_details = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$details['AccountsBill']['accounts_regularvendor_id'])));
				$ven_name = $vendor_details['AccountsRegularvendor']['company_name'];
				$totamount = $details['AccountsBill']['amount'];
				$amount_paid = $details['AccountsBill']['billamount'];
				$rcvd_date = $details['AccountsBill']['bill_recieveddate'];
				$last_date = $details['AccountsBill']['last_date'];
				$invoice_no = $details['AccountsBill']['invoice_no'];
				$bal_amount = $details['AccountsBill']['billamount'];
				$this->set(compact('ven_name','bal_amount','rcvd_date','last_date','invoice_no','totamount'));
				$a = $details['AccountsBill']['amount']-$this->data['Payment']['payable_amount'];
				if(!$this->data['Payment']['payable_amount']) {
					$this->Session->setFlash(__('<div class="flashMessageError">Please enter a valid amount</div>'));
				} elseif(!$this->data['group1']) {
					$this->Session->setFlash(__('<div class="flashMessageError">Please select any one mode of payment</div>'));
				}
			}
		}
		
		else {
			//list	
			$details = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
			$acc_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Payment']['accountid'])));
			$minus = $acc_details['AccountsAccount']['opening_balance'];
			$add = $acc_details['AccountsAccount']['opening_balance'];
			
			$vendor_details = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$details['AccountsBill']['accounts_regularvendor_id'])));
	
			$ven_name = $vendor_details['AccountsRegularvendor']['company_name'];
			$totamount = $details['AccountsBill']['amount'];
			$amount_paid = $details['AccountsBill']['billamount'];
			$rcvd_date = $details['AccountsBill']['bill_recieveddate'];
			$last_date = $details['AccountsBill']['last_date'];
			$invoice_no = $details['AccountsBill']['invoice_no'];
			//$bal_amount = $totamount - $amount_paid;
			$bal_amount = $details['AccountsBill']['billamount'];
			$this->set(compact('ven_name','bal_amount','rcvd_date','last_date','invoice_no','totamount'));
			$a = $details['AccountsBill']['amount']-$this->data['Payment']['payable_amount'];
			
			/*******************************************************************************
			 ******************************View Section Code********************************
			 *******************************************************************************/
			$this->loadModel('AccountsAccount');
			$this->loadModel('AccountsRegularvendor');
			$this->loadModel('AccountsBillalert');
			$this->loadModel('AccountsLedger');
			$this->AccountsBill->id = $id;
			if (!$this->AccountsBill->exists())
			 {
				throw new NotFoundException(__('Invalid bill'));
			 }
			$this->set('accountsBill', $this->AccountsBill->read(null, $id));
			$accountsBill = $this->AccountsBill->read(null, $id);
			$acc_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$accountsBill['AccountsBill']['accounts_account_id'])));
			$acc_name2 = $acc_name['AccountsAccount']['account_name'];
			$vendor_name = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$accountsBill['AccountsBill']['accounts_regularvendor_id'])));
			$photo_url = $vendor_name['AccountsRegularvendor']['photo_url'];
			$photo = $vendor_name['AccountsRegularvendor']['photo'];
			$vendor_name2 = $vendor_name['AccountsRegularvendor']['company_name'];
			$bill_alertdeatils = $this->AccountsBillalert->find('first',array('conditions'=>array('AccountsBillalert.accounts_bills_id'=>$id)));
			$initiated_on = $bill_alertdeatils['AccountsBillalert']['initiated_on'];
			$ending_on = $bill_alertdeatils['AccountsBillalert']['ending_on'];
			$frequency = $bill_alertdeatils['AccountsBillalert']['frequency_month'];
			$due_day =  $bill_alertdeatils['AccountsBillalert']['due_day'];
			$ledger_details = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_bill_id'=>$id),'order'=>'AccountsLedger.date DESC'));
			
			foreach($ledger_details as $key => $value) {
				$paid_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$value['AccountsLedger']['accounts_account_id'])));
				foreach($paid_details as $key2 => $value2) {
					if($value['AccountsLedger']['credit'] == 0) {
						$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['amount'] =  $value['AccountsLedger']['debit'];
					}
					if($value['AccountsLedger']['debit'] == 0) {
						$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['amount'] =  $value['AccountsLedger']['credit'];
					}
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_on'] =  date('d M Y',strtotime($value['AccountsLedger']['date']));
					// For Cash
					if( ($value2['asset_type'] == "Cash" ) || ($value2['asset_type'] == "cash")) {
							$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Cash";
							$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
							$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
							$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] = $value['AccountsLedger']['id'];
					}
					//For Cheque
					if( ($value2['asset_type'] == "Bank" ) || ($value2['asset_type'] == "bank")) {
							$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Cheque";
							$final_cheque[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
							$final_cheque[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
					}
					//For Card
					if( ($value2['liability_type'] == "Credit Card" ) || ($value2['liability_type'] == "Credit Card")) {
							$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Card";
							$final_card[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
							$final_card[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
					}	
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['approved_by'] = $value['AccountsLedger']['approved_by'];
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] = $value['AccountsLedger']['id'];
				}
			}
			$this->set(compact('acc_name2','vendor_name2','flag','id','photo_url','photo','initiated_on','ending_on','frequency','due_day','final_details'));
			$this->set(compact('final_cash','final_cheque','final_card'));
		}
		$this->set(compact('id'));
	}

	function payable_amount_check($balanceam = null)
	{
		//Configure::write('debug',2);
		debug($this->data);
		if($this->data['Payment']['payable_amount'] > $balanceam)
		{
			$validatesame = 1;
		}
		
		if(($this->data['Payment']['payable_amount'] <= 0) || (!is_numeric($this->data['Payment']['payable_amount'])))
		{
			$validatesame = 2;
		}
		
		$this->set(compact('validatesame'));
	}
	
	function paybillold($id = null,$flag=null)
	{
	//	Configure::write('debug',2);
		debug($this->data);
		$this->loadModel('AccountsRegularvendor');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		debug($id);
		$details = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
		debug($details);
		$acc_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['Payment']['accountid'])));
		debug($acc_details);
		$minus = $acc_details['AccountsAccount']['opening_balance'];
		debug($minus);
		$add = $acc_details['AccountsAccount']['opening_balance'];
		
		$vendor_details = $this->AccountsRegularvendor->find('first',array('conditions'=>array('AccountsRegularvendor.id'=>$details['AccountsBill']['accounts_regularvendor_id'])));
	//	debug($vendor_details);
		$ven_name = $vendor_details['AccountsRegularvendor']['company_name'];
		$totamount = $details['AccountsBill']['amount'];
		$amount_paid = $details['AccountsBill']['billamount'];
		$rcvd_date = $details['AccountsBill']['bill_recieveddate'];
		$last_date = $details['AccountsBill']['last_date'];
		$invoice_no = $details['AccountsBill']['invoice_no'];
		//$bal_amount = $totamount - $amount_paid;
		$bal_amount = $details['AccountsBill']['billamount'];
		$this->set(compact('ven_name','bal_amount','rcvd_date','last_date','invoice_no','totamount'));
		$a = $details['AccountsBill']['amount']-$this->data['Payment']['payable_amount'];
		debug($details['AccountsBill']['amount']-$this->data['Payment']['payable_amount']);
		
		if(!empty($this->data))
		{
			if($this->data['group1'] == "Cash")
			{
				//For Debit entry . . 
				$save->data = null;
				$this->AccountsLedger->create();
				$save->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
				$save->data['AccountsLedger']['date'] = date('Y-m-d'); 
				$save->data['AccountsLedger']['payment_description'] = "Amount Debited!";
				$save->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
				$save->data['AccountsLedger']['approved_by'] = $this->data['Payment']['approved_by'];
				$save->data['AccountsLedger']['recieved_by'] = $this->data['Payment']['recieved_by'];
				
				$save->data['AccountsLedger']['debit'] = $this->data['Payment']['payable_amount'];
				$save->data['AccountsLedger']['credit'] = "0";
				$save->data['AccountsLedger']['balance'] = ($minus-$this->data['Payment']['payable_amount']);
				debug($save->data);
				$this->AccountsLedger->save($save->data);
				$insertId = $this->AccountsLedger->getLastInsertId();
				debug($insertId);
				if($insertId)
				{
					$savet->data = null;
					$savet->data['AccountsLedger']['transaction_id'] = $insertId;
					$savet->data['AccountsLedger']['id'] = $insertId;
				}
				debug($savet->data);
				$this->AccountsLedger->save($savet->data);
				
				
				//For Credit entry . . 
				$savecredit->data = null;
				$this->AccountsLedger->create();
				debug($insertId);
				$savecredit->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
				$savecredit->data['AccountsLedger']['date'] = date('Y-m-d'); 
				$savecredit->data['AccountsLedger']['payment_description'] = "Amount Credited!";
				$savecredit->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
				$savecredit->data['AccountsLedger']['approved_by'] = $this->data['Payment']['approved_by'];
				$savecredit->data['AccountsLedger']['recieved_by'] = $this->data['Payment']['recieved_by'];
				
				$savecredit->data['AccountsLedger']['debit'] = "0";
				$savecredit->data['AccountsLedger']['credit'] =$this->data['Payment']['payable_amount'];
				$savecredit->data['AccountsLedger']['balance'] = ($add+$this->data['Payment']['payable_amount']);
				$savecredit->data['AccountsLedger']['transaction_id'] = $insertId;
				debug($savecredit->data);
				$this->AccountsLedger->save($savecredit->data);
				
				//For saving Accounts bills . .
				if($details['AccountsBill']['amount'] == ($this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount']))
				{
					$save2->data = null;
					$save2->data['AccountsBill']['id'] = $id;
					$save2->data['AccountsBill']['paid_status'] = 'Y';
					$save2->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
					$save2->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
					
					$this->AccountsBill->save($save2->data);
					debug($save2->data);
					
				}
				
				else
				{
					debug($details['AccountsBill']['billamount']);
					debug($this->data['Payment']['payable_amount']);
					$saven->data = null;
					$saven->data['AccountsBill']['id'] = $id;
					$saven->data['AccountsBill']['paid_status'] = 'N';
					$saven->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
					$saven->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
					
					debug($saven->data);
					$this->AccountsBill->save($saven->data);
				}
			
				
				
				$yes= null;
				$this->Session->setFlash(__('<div class="flashMessageSuccess">The accounts bill is paid</div>'));
				$yes= 1;	
				$this->redirect(array('action' => 'index',0,$yes));
			}
			
			elseif($this->data['group1'] == "Cheque")
			{
				/*if(empty($this->data['cheque_no']))
				{
					$this->Session->setFlash(__('<font color = "red">Please enter the cheque number</font>'));
					$this->redirect(array('action' => 'paybill',$id,$flag));
				}
				
				else
				{*/
					$save3->data = null;
					$this->AccountsLedger->create();
					$save3->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
					$save3->data['AccountsLedger']['date'] = date('Y-m-d'); 
					$save3->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					$save3->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$save3->data['AccountsLedger']['approved_by'] = $this->data['Payment']['approved_by'];
					$save3->data['AccountsLedger']['recieved_by'] = $this->data['Payment']['recieved_by'];
					$save3->data['AccountsLedger']['cheque_no'] = $this->data['Payment']['cheque_no'];
					$save3->data['AccountsLedger']['cheque_infavourof'] = $this->data['Payment']['cheque_infavourof'];
					$save3->data['AccountsLedger']['cheque_dated'] = date('Y-m-d',strtotime($this->data['Payment']['cheque_dated']));
					$save3->data['AccountsLedger']['debit'] = $this->data['Payment']['payable_amount'];
					$save3->data['AccountsLedger']['credit'] = "0";
					$save3->data['AccountsLedger']['balance'] = $minus-$this->data['Payment']['payable_amount'];
					debug($save3->data);
					$this->AccountsLedger->save($save3->data);
					$insertId2 = $this->AccountsLedger->getLastInsertId();
					debug($insertId2);
					if($insertId2)
					{
						$savet3->data = null;
						$savet3->data['AccountsLedger']['transaction_id'] = $insertId2;
						$savet3->data['AccountsLedger']['id'] = $insertId2;
					}
					debug($savet3->data);
					$this->AccountsLedger->save($savet3->data);
					
					
					//For Credit entry . . 
					$savecredit3->data = null;
					$this->AccountsLedger->create();
					debug($insertId2);
					$savecredit3->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
					$savecredit3->data['AccountsLedger']['date'] = date('Y-m-d'); 
					$savecredit3->data['AccountsLedger']['payment_description'] = "Amount Credited!";
					$savecredit3->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$savecredit3->data['AccountsLedger']['approved_by'] = $this->data['Payment']['approved_by'];
					$savecredit3->data['AccountsLedger']['recieved_by'] = $this->data['Payment']['recieved_by'];
					$savecredit3->data['AccountsLedger']['cheque_no'] = $this->data['Payment']['cheque_no'];
					$savecredit3->data['AccountsLedger']['cheque_infavourof'] = $this->data['Payment']['cheque_infavourof'];
					$savecredit3->data['AccountsLedger']['cheque_dated'] = date('Y-m-d',strtotime($this->data['Payment']['cheque_dated']));
					
					$savecredit3->data['AccountsLedger']['debit'] = "0";
					$savecredit3->data['AccountsLedger']['credit'] = $this->data['Payment']['payable_amount'];
					$savecredit3->data['AccountsLedger']['balance'] = $add+$this->data['Payment']['payable_amount'];
					$savecredit3->data['AccountsLedger']['transaction_id'] = $insertId2;
					$this->AccountsLedger->save($savecredit3->data);
					debug($savecredit3->data);
				
					
					
					
					
					//For saving Account bills . . 	
					
					
					
					if($details['AccountsBill']['amount'] == ($this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount']))
					{
						$save4->data = null;
						$save4->data['AccountsBill']['id'] = $id;
						$save4->data['AccountsBill']['paid_status'] = 'Y';
						$save4->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$save4->data['AccountsBill']['billamount'] = $this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'];
						debug($save4->data);
					
						$this->AccountsBill->save($save4->data);
					}
					else
					{
						$saven->data = null;
						$saven->data['AccountsBill']['id'] = $id;
						$saven->data['AccountsBill']['paid_status'] = 'N';
						$saven->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$saven->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
					
						debug($saven->data);
						$this->AccountsBill->save($saven->data);
					}
			
					$yes= null;
					$this->Session->setFlash(__('<div class="flashMessageSuccess">The accounts bill is paid</div>'));
					$yes= 1;	
					$this->redirect(array('action' => 'index',$flag,$yes));
			//	}
			}
	
			elseif($this->data['group1'] == "Card")
			{
				// DEBIT ENTRY 
					$card->data = null;
					$this->AccountsLedger->create();
					$card->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
					$card->data['AccountsLedger']['date'] = date('Y-m-d'); 
					$card->data['AccountsLedger']['payment_description'] = "Amount Debited!";
					$card->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
					$card->data['AccountsLedger']['debit'] = $this->data['Payment']['payable_amount'];
					$card->data['AccountsLedger']['credit'] = "0";
					$card->data['AccountsLedger']['balance'] = $minus-$this->data['Payment']['payable_amount'];
					debug($card->data);
					$this->AccountsLedger->save($card->data);
					$insertId2c = $this->AccountsLedger->getLastInsertId();
					debug($insertId2c);
					if($insertId2c)
					{
						$savet33->data = null;
						$savet33->data['AccountsLedger']['transaction_id'] = $insertId2c;
						$savet33->data['AccountsLedger']['id'] = $insertId2c;
					}
					debug($savet33->data);
					$this->AccountsLedger->save($savet33->data);
					
					
					//For Credit entry . . 
					$card2->data = null;
					$this->AccountsLedger->create();
					
					$card2->data['AccountsLedger']['accounts_account_id'] = $this->data['Payment']['accountid'];
					$card2->data['AccountsLedger']['date'] = date('Y-m-d'); 
					$card2->data['AccountsLedger']['payment_description'] = "Amount Credited!";
					$card2->data['AccountsLedger']['accounts_bill_id'] = $details['AccountsBill']['id'];
						
					$card2->data['AccountsLedger']['debit'] = "0";
					$card2->data['AccountsLedger']['credit'] = $this->data['Payment']['payable_amount'];
					$card2->data['AccountsLedger']['balance'] = $add+$this->data['Payment']['payable_amount'];
					$card2->data['AccountsLedger']['transaction_id'] = $insertId2c;
					$this->AccountsLedger->save($card2->data);
					debug($savecredit3->data);
				
					
					
					
					
					//For saving Account bills . . 	
					
					if($details['AccountsBill']['amount'] == ($this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'])) {
						$saveb->data = null;
						$saveb->data['AccountsBill']['id'] = $id;
						$saveb->data['AccountsBill']['paid_status'] = 'Y';
						$saveb->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$saveb->data['AccountsBill']['billamount'] = $this->data['Payment']['payable_amount'] + $details['AccountsBill']['billamount'];
						debug($saveb->data);
					
						$this->AccountsBill->save($saveb->data);
					} else {
						$saveb2->data = null;
						$saveb2->data['AccountsBill']['id'] = $id;
						$saveb2->data['AccountsBill']['paid_status'] = 'N';
						$saveb2->data['AccountsBill']['receipt_no'] = $this->data['Payment']['receipt_no'];
						$saveb2->data['AccountsBill']['billamount'] = ($details['AccountsBill']['billamount']+$this->data['Payment']['payable_amount']) ;
					
						debug($saveb2->data);
						$this->AccountsBill->save($saveb2->data);
					}
			
					$yes= null;
					$this->Session->setFlash(__('<div class="flashMessageSuccess">The bill is successfully paid.</div>'));
					$yes= 1;	
					$this->redirect(array('action' => 'index',$flag,$yes));
			//	}
	
			}
			
		}
		
		$this->set(compact('id'));
		
		
	}
	
	
	function paybill2()
	{
	//	Configure::write('debug',2);
		debug($this->data);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		$account_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name' => 'Assets'),'fields'=>array('AccountType.id')));
		if($this->data['group1'] == "Cheque")
		{
			$flag_cheque = 1;
			$bank_account = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.asset_type'=>"Bank",'AccountsAccount.account_type_id'=>$account_type['AccountType']['id']))));
			
			foreach($bank_account as $bank_account1)
			{
				$bankacc[$bank_account1['AccountsAccount']['id']] = $bank_account1['AccountsAccount']['account_name'];
			}
		}
		if($this->data['group1'] == "Cash")
		{
			$flag_cash = 1;
			$cash_account = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.asset_type'=>"Cash",'AccountsAccount.account_type_id'=>$account_type['AccountType']['id']),'NOT'=>array('AccountsAccount.account_name'=>'Accounts Receivable'))));
			foreach($cash_account as $cash_account1)
			{
				$cashacc[$cash_account1['AccountsAccount']['id']] = $cash_account1['AccountsAccount']['account_name'];
			}
		}
		
		if($this->data['group1'] == "Card")
		{
			$account_type = $this->AccountType->find('first',array('conditions'=>array('AccountType.type_name' => 'Liabilities'),'fields'=>array('AccountType.id')));
			$flag_card = 1;
			$card_account = $this->AccountsAccount->find('all',array('conditions'=>array('AND'=>array('AccountsAccount.liability_type'=>"Credit Card",'AccountsAccount.account_type_id'=>$account_type['AccountType']['id']),'NOT'=>array('AccountsAccount.account_name'=>'Accounts Payable'))));
			foreach($card_account as $card_account1)
			{
				$cardacc[$card_account1['AccountsAccount']['id']] = $card_account1['AccountsAccount']['account_name'];
			}
		}
		
		
		if($this->data['group1'] == "Tax")
		{
			$flag_tax = 1;
			$top_accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AccountsAccount.active'=>"Y",'AccountsAccount.level'=>1,'NOT'=>array('AccountsAccount.account_name'=>array('Accounts Payable','Accounts Receivable')))));
			foreach($top_accounts as $top_account)
			{
				$acc_tree[$top_account['AccountsAccount']['id']] = $top_account['AccountsAccount']['account_name'];
				$child_accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AccountsAccount.parent_id'=>$top_account['AccountsAccount']['id']),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name')));
				foreach($child_accounts as $child_account ) {
					$acc_tree[$child_account['AccountsAccount']['id']] = '|--'.$child_account['AccountsAccount']['account_name'];
					$grand_child_accounts = $this->AccountsAccount->find('all',array('conditions'=>array('AccountsAccount.parent_id'=>$child_account['AccountsAccount']['id']),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name')));
					foreach($grand_child_accounts as $grand_child_account) {
						$acc_tree[$grand_child_account['AccountsAccount']['id']] = '|----'.$grand_child_account['AccountsAccount']['account_name'];
					}
				}
			}
		}
		$this->set(compact('cashacc','bankacc','cardacc','acc_tree'));
		$this->set(compact('flag_cheque','flag_cash','flag_card','flag_tax'));
	}
/** 
 * delete method
 *
 * @param string $id
 * @return void
 */
	/*public function delete($id = null) 
	{
		if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->AccountsBill->id = $id;
		if (!$this->AccountsBill->exists()) {
			throw new NotFoundException(__('Invalid accounts bill'));
		}
		if ($this->AccountsBill->delete()) {
			$this->Session->setFlash(__('Accounts bill deleted'));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Accounts bill was not deleted'));
		$this->redirect(array('action' => 'index'));
	}*/
	/**
	 * @Method Deletes a bill associated ledger entries and updates corresponding account closing balances!!!!
	 * @author Ganesh
	 * */
	public function delete($id = null,$flag= null) {
		$this->layout = 'blank';
		$paid = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$id)));
			$this->loadModel('AccountsLedger');
			$this->loadModel('AccountsAccount');
			$ledger = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_bill_id'=>$id,'AccountsLedger.is_neutral'=>'N')));
			if(!empty($ledger)) {
				foreach($ledger as $vaal ) {
					$saveClosingBalance = NULL;
					$account_account = $this->AccountsAccount->findById($vaal['AccountsLedger']['accounts_account_id'],array('AccountsAccount.id','AccountsAccount.closing_balance'));
					if($vaal['AccountsLedger']['credit'] > 0) {
						$saveClosingBalance['AccountsAccount']['id'] = $account_account['AccountsAccount']['id'];
						$saveClosingBalance['AccountsAccount']['closing_balance'] = $account_account['AccountsAccount']['closing_balance'] - $vaal['AccountsLedger']['credit'];
					} else {
						$saveClosingBalance['AccountsAccount']['id'] = $account_account['AccountsAccount']['id'];
						$saveClosingBalance['AccountsAccount']['closing_balance'] = $account_account['AccountsAccount']['closing_balance'] + $vaal['AccountsLedger']['debit'];
					}
					
					$this->AccountsAccount->save($saveClosingBalance);
					$this->AccountsAccount->cacheQueries = FALSE;
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$vaal['AccountsLedger']['accounts_account_id'],$vaal['AccountsLedger']['debit'],$vaal['AccountsLedger']['credit'],$account_account['AccountsAccount']['closing_balance'],$saveClosingBalance['AccountsAccount']['closing_balance'] ,$vaal['AccountsLedger']['id'],$id,0,'Delete Bill','Delete Bill'));
					/**Log Code**/
					$this->AccountsLedger->delete($vaal['AccountsLedger']['id']);
				}
				
			}
			$accountsPayableLedgers = $this->AccountsLedger->find('all',array(
				'conditions' => array('AccountsLedger.accounts_bill_id'=>$id,'AccountsLedger.is_neutral'=>'Y')
			));
			if(!empty($accountsPayableLedgers)) {
				foreach($accountsPayableLedgers as $accountsPayableLedger) {
					$saveClosingBalance = NULL;
					$accountsPayableAccount = $this->AccountsAccount->findById($accountsPayableLedger['AccountsLedger']['accounts_account_id'],array('AccountsAccount.id','AccountsAccount.closing_balance'));
					if($accountsPayableLedger['AccountsLedger']['credit'] > 0) {
						$saveClosingBalance['AccountsAccount']['id'] = $accountsPayableAccount['AccountsAccount']['id'];
						$saveClosingBalance['AccountsAccount']['closing_balance'] = $accountsPayableAccount['AccountsAccount']['closing_balance'] - $accountsPayableLedger['AccountsLedger']['credit'];
					} else {
						$saveClosingBalance['AccountsAccount']['id'] = $accountsPayableAccount['AccountsAccount']['id'];
						$saveClosingBalance['AccountsAccount']['closing_balance'] = $accountsPayableAccount['AccountsAccount']['closing_balance'] + $accountsPayableLedger['AccountsLedger']['debit'];
					}
					$this->AccountsAccount->save($saveClosingBalance);
					$this->AccountsAccount->cacheQueries = FALSE;
					
					/**Log Code**/
					$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$accountsPayableLedger['AccountsLedger']['accounts_account_id'],$accountsPayableLedger['AccountsLedger']['debit'],$accountsPayableLedger['AccountsLedger']['credit'],$accountsPayableAccount['AccountsAccount']['closing_balance'],$saveClosingBalance['AccountsAccount']['closing_balance'] ,$accountsPayableLedger['AccountsLedger']['id'],$id,0,'Delete Bill','Delete Bill'));
					/**Log Code**/
					
					$this->AccountsLedger->delete($accountsPayableLedger['AccountsLedger']['id']);
				}
			}
			$this->AccountsBill->delete($id);
			$this->Session->setFlash(__('<div class="flashMessageSuccess">The bill is successfully deleted.</div>'));
		$this->redirect(array('action' => 'index'.'/'.$flag));
	}
	
	function overlay($id = null, $paidby= null) {
		//Configure::write('debug',2);
		if(is_numeric($id)){
			$this->loadModel('AccountsLedger');
			$this->loadModel('AccountsAccount');
			$overlay_deatils = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$id)));
			$accountName = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$overlay_deatils['AccountsLedger']['accounts_account_id'])));
		} else{
			$this->loadModel('ChequePaymentdetail');
			$id_got = explode('-',$id);
			$this->ChequePaymentdetail->recursive = 0;
			$cheque_details = $this->ChequePaymentdetail->find('first',array('conditions'=>array('ChequePaymentdetail.id'=>$id_got[0])));
			$accountName['AccountsAccount']['account_name'] = $cheque_details['AccountsAccount']['account_name'];
			$overlay_deatils['AccountsLedger']['cheque_infavourof'] = $cheque_details['ChequePaymentdetail']['cheque_in_favour'];
			$overlay_deatils['AccountsLedger']['cheque_dated'] = $cheque_details['ChequePaymentdetail']['cheque_dated'];
			$overlay_deatils['AccountsLedger']['recieved_by'] = $cheque_details['ChequePaymentdetail']['recieved_by'];
			$overlay_deatils['AccountsLedger']['cheque_no'] = $cheque_details['ChequePaymentdetail']['details'];
			$paidby = 'cheque';
		}
		$this->set(compact('overlay_deatils','accountName','paidby'));
	}
	
	
	public function paid_status() {
		//Configure::write('debug',2);
		debug($this->data);
		$data = $this->data['AccountsBill']['paid_status'];
		$this->loadModel('AccountsAccount');
		$accounts = $this->AccountsAccount->find('list',array('conditions'=>array('AccountsAccount.asset_type'=>'Cash','AccountsAccount.account_name !='=>'Accounts Receivable'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name')));
		$this->set(compact('data','accounts'));
	}
	
	/*public function add($id=null){
	//	Configure::Write('debug',2);
		$this->loadModel('AccountsLedger');
		$bill_id = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_bill_id'=>$id)));
		debug($bill_id);
	}*/
	
	
	public function update_closing_balance($id){
		//Configure::write('debug',2);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		$account_id = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$id)));
		debug($account_id);
	}
	
	public function change_date($id=null,$ledger_id=null) {
		//Configure::write('debug',2);
		debug($this->data);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		$accountsBill = $this->AccountsBill->read(null, $id);
		$acc_name = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$accountsBill['AccountsBill']['accounts_account_id'])));
		$ledger_details = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id !='=>$acc_name['AccountsAccount']['id'],'AccountsLedger.accounts_bill_id'=>$id,'AccountsLedger.is_neutral'=>'N'),'order'=>array('AccountsLedger.date DESC','AccountsLedger.id DESC')));
		foreach($ledger_details as $key => $value) {
			$paid_details = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$value['AccountsLedger']['accounts_account_id'])));
			foreach($paid_details as $key2 => $value2) {
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] =  $value['AccountsLedger']['id'];
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['date'] =  $value['AccountsLedger']['date'];
				if($value['AccountsLedger']['credit'] == 0) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['debit'] =  $value['AccountsLedger']['debit'];
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['amount'] =  $value['AccountsLedger']['debit'];
				}
				if($value['AccountsLedger']['debit'] == 0) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['credit'] =  $value['AccountsLedger']['credit'];
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['amount'] =  $value['AccountsLedger']['credit'];
				}
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_on'] =  date('d M Y',strtotime($value['AccountsLedger']['date']));
				// For Cash
				if( ($value2['asset_type'] == "Cash" ) || ($value2['asset_type'] == "cash")) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Cash";
					$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
					$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
					$final_cash[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] = $value['AccountsLedger']['id'];
				
				}
				//For Cheque
				if( ($value2['asset_type'] == "Bank" ) || ($value2['asset_type'] == "bank")) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Cheque";
					$final_cheque[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
					$final_cheque[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
					
				}
				//For Card
				if( ($value2['liability_type'] == "Credit Card" ) || ($value2['liability_type'] == "Credit Card")) {
					$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['paid_by'] = "Card";
					$final_card[$value['AccountsLedger']['transaction_id']][$value2['id']]['account_name'] = $value2['account_name'];
					$final_card[$value['AccountsLedger']['transaction_id']][$value2['id']]['recieved_by'] = $value['AccountsLedger']['recieved_by'];
				}	
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['approved_by'] = $value['AccountsLedger']['approved_by'];
				$final_details[$value['AccountsLedger']['transaction_id']][$value2['id']]['id'] = $value['AccountsLedger']['id'];
			}
		}
		$this->set(compact('acc_name2','vendor_name2','flag','id','photo_url','photo','initiated_on','ending_on','frequency','due_day','final_details'));
		$this->set(compact('final_cash','final_cheque','final_card'));
		
		if(!empty($this->data)) {
			$flag = $ledger_id;
			foreach($this->data['amount'] as $ledger_id => $values) {
				$ledger = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id'=>$ledger_id)));
				$ledger1 = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.id !='=>$ledger['AccountsLedger']['id'],'AccountsLedger.transaction_id'=>$ledger['AccountsLedger']['transaction_id'],'AccountsLedger.is_neutral '=>'N')));
				$acc_closingBalance = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$ledger['AccountsLedger']['accounts_account_id'])));
				$acc_closingBalance1 = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$ledger1['AccountsLedger']['accounts_account_id'])));
				$acc_payable = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable')));
				if($ledger1['AccountsLedger']['credit'] > 0 ){
					$acc_payableLedger = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable['AccountsAccount']['id'],'AccountsLedger.accounts_bill_id'=>$id,'AccountsLedger.date'=>$ledger1['AccountsLedger']['date'],'AccountsLedger.debit'=>$ledger1['AccountsLedger']['credit'])));
				} else {
					$acc_payableLedger = $this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$acc_payable['AccountsAccount']['id'],'AccountsLedger.accounts_bill_id'=>$id,'AccountsLedger.date'=>$ledger1['AccountsLedger']['date'],'AccountsLedger.credit'=>$ledger1['AccountsLedger']['debit'])));
				}
				$UpdateLedger= null;$UpdateLedger1=null;
				/*if($ledger['AccountsLedger']['credit'] > 0) {
					$amount = $ledger['AccountsLedger']['credit'];
					$amount1 = $ledger1['AccountsLedger']['debit'];
					
					$UpdateLedger['AccountsLedger']['credit'] = $values;
				} else {
					$amount = $ledger['AccountsLedger']['debit'];
					$amount1 = $ledger1['AccountsLedger']['credit'];
					$UpdateLedger['AccountsLedger']['id'] = $ledger_id;
					$UpdateLedger['AccountsLedger']['debit'] = $values;
				}
				if($ledger1['AccountsLedger']['credit'] > 0) {
					
					$UpdateLedger1['AccountsLedger']['credit'] = $values;
				} else {
					$UpdateLedger1['AccountsLedger']['id'] = $ledger1['AccountsLedger']['id'];
					$UpdateLedger1['AccountsLedger']['debit'] = $values;
				}
				
				if($acc_payableLedger['AccountsLedger']['credit'] > 0) {
					$update_Accpayable['AccountsLedger']['id'] = $acc_payableLedger['AccountsLedger']['id'];
					$update_Accpayable['AccountsLedger']['credit'] = $values;
				} else {
					$update_Accpayable['AccountsLedger']['id'] = $acc_payableLedger['AccountsLedger']['id'];
					$update_Accpayable['AccountsLedger']['debit'] = $values;
				}*/
				$UpdateLedger['AccountsLedger']['id'] = $ledger_id;
				$UpdateLedger['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['paid_date'][$ledger_id]));
				
				$UpdateLedger1['AccountsLedger']['id'] = $ledger1['AccountsLedger']['id'];
				$UpdateLedger1['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['paid_date'][$ledger_id]));
				
				$update_Accpayable['AccountsLedger']['id'] = $acc_payableLedger['AccountsLedger']['id'];
				$update_Accpayable['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['paid_date'][$ledger_id]));
				
				$this->AccountsLedger->save($UpdateLedger);
				$this->AccountsLedger->save($UpdateLedger1);
				$this->AccountsLedger->save($update_Accpayable);
				/*if($amount > $values) {
					$closing_balance = $acc_closingBalance['AccountsAccount']['closing_balance'] - $values;
					$closing_balance1 = $acc_closingBalance1['AccountsAccount']['closing_balance'] - $values;
					$acc_payable_closingBal = $acc_payable['AccountsAccount']['closing_balance'] - $values;
				}
				if($amount < $values) {
					$closing_balance = $acc_closingBalance['AccountsAccount']['closing_balance'] + $values;
					$closing_balance1 = $acc_closingBalance1['AccountsAccount']['closing_balance'] + $values;
					$acc_payable_closingBal = $acc_payable['AccountsAccount']['closing_balance'] + $values;
				}
				if(!empty($closing_balance)) {
					$save1['AccountsAccount']['id'] = $acc_closingBalance['AccountsAccount']['id'];
					$save1['AccountsAccount']['closing_balance'] = $closing_balance;
					$this->AccountsAccount->save($save1);
				}
				if(!empty($closing_balance1)) {
					$save2['AccountsAccount']['id'] = $acc_closingBalance1['AccountsAccount']['id'];
					$save2['AccountsAccount']['closing_balance'] = $closing_balance1;
					$this->AccountsAccount->save($save2);
				}
				if(!empty($acc_payable_closingBal)) {
					$save_payable['AccountsAccount']['id'] = $acc_closingBalance1['AccountsAccount']['id'];
					$save_payable['AccountsAccount']['closing_balance'] = $acc_payable_closingBal;
					$this->AccountsAccount->save($save_payable);
				}*/
				$this->redirect(array('action'=>'view',$id,$flag));
			}
		}
	}
	
	
	public function ledgerDuePayment($billId = null,$chequeDetailID = null,$page = null) {
		//Configure::write('debug',2);
		$this->loadModel('ChequePaymentdetail');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountsBill');
		if(!$page) $page = 1;
		$this->ChequePaymentdetail -> recursive = 0;
		$LedgerDueDetails = $this->ChequePaymentdetail->find('first',array('conditions'=>array('ChequePaymentdetail.id'=>$chequeDetailID)));
		$ExpenseAccount = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$LedgerDueDetails['AccountsBill']['accounts_account_id']),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
		$accountsPayable = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable'),'fields'=>array('AccountsAccount.id','AccountsAccount.closing_balance')));
		$updateExpenseLedger = null;
		
		if($LedgerDueDetails['ChequePaymentdetail']['amount'] > $LedgerDueDetails['AccountsAccount']['closing_balance']) {
			$this->Session->setFlash(__('<div class="flashMessageError">The '.$LedgerDueDetails['AccountsAccount']['account_name'].' don\'t have enough amount to pay!</div>'));
			$this->redirect(array('controller'=>'accounts_bills','action'=>'index/3/'.'page:'.$page));
		}
		
		$updateBankAcc['AccountsAccount']['id'] = $LedgerDueDetails['AccountsAccount']['id'];
		$updateBankAcc['AccountsAccount']['closing_balance'] = $LedgerDueDetails['AccountsAccount']['closing_balance'] - $LedgerDueDetails['ChequePaymentdetail']['amount'];
		$this->AccountsAccount->save($updateBankAcc);
		
		$updateExpenseAcc['AccountsAccount']['id'] = $ExpenseAccount['AccountsAccount']['id'];
		$updateExpenseAcc['AccountsAccount']['closing_balance'] = $ExpenseAccount['AccountsAccount']['closing_balance'] + $LedgerDueDetails['ChequePaymentdetail']['amount'];
		$this->AccountsAccount->save($updateExpenseAcc);
		
		$updatePayableAcc['AccountsAccount']['id'] = $accountsPayable['AccountsAccount']['id']; 
		$updatePayableAcc['AccountsAccount']['closing_balance'] = $accountsPayable['AccountsAccount']['closing_balance'] - $LedgerDueDetails['ChequePaymentdetail']['amount'];
		$this->AccountsAccount->save($updatePayableAcc);
		
		$BankLedger['AccountsLedger']['accounts_account_id'] = $LedgerDueDetails['AccountsAccount']['id'];
		$BankLedger['AccountsLedger']['date'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_dated'];
		$BankLedger['AccountsLedger']['debit'] = $LedgerDueDetails['ChequePaymentdetail']['amount'];
		$BankLedger['AccountsLedger']['credit'] = 0;
		$BankLedger['AccountsLedger']['accounts_bill_id'] = $LedgerDueDetails['AccountsBill']['id'];
		$BankLedger['AccountsLedger']['cheque_no'] = $LedgerDueDetails['ChequePaymentdetail']['details'];
		$BankLedger['AccountsLedger']['cheque_dated'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_dated'];
		$BankLedger['AccountsLedger']['cheque_infavourof'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_in_favour'];
		$BankLedger['AccountsLedger']['approved_by'] = $LedgerDueDetails['ChequePaymentdetail']['approved_by'];
		$BankLedger['AccountsLedger']['recieved_by'] = $LedgerDueDetails['ChequePaymentdetail']['recieved_by'];
		$BankLedger['AccountsLedger']['is_neutral'] = 'N';
		$this->AccountsLedger->create();
		$this->AccountsLedger->save($BankLedger);
		$transactionId = $this->AccountsLedger->getLastInsertId();
		
		/**Log Code**/
		$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$BankLedger['AccountsLedger']['accounts_account_id'],0,$BankLedger['AccountsLedger']['debit'],$LedgerDueDetails['AccountsAccount']['closing_balance'],$updateBankAcc['AccountsAccount']['closing_balance'],$transactionId,$BankLedger['AccountsLedger']['accounts_bill_id'],0,'Cheque reconcile Bill','Renconcile cheque bank account decrease'));
		/**Log Code**/
		
		
		
		$ExpenseLedger['AccountsLedger']['accounts_account_id'] = $ExpenseAccount['AccountsAccount']['id'];
		$ExpenseLedger['AccountsLedger']['date'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_dated'];
		$ExpenseLedger['AccountsLedger']['debit'] = 0;
		$ExpenseLedger['AccountsLedger']['credit'] = $LedgerDueDetails['ChequePaymentdetail']['amount'];
		$ExpenseLedger['AccountsLedger']['accounts_bill_id'] = $LedgerDueDetails['AccountsBill']['id'];
		$ExpenseLedger['AccountsLedger']['cheque_no'] = $LedgerDueDetails['ChequePaymentdetail']['details'];
		$ExpenseLedger['AccountsLedger']['cheque_dated'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_dated'];
		$ExpenseLedger['AccountsLedger']['cheque_infavourof'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_in_favour'];
		$ExpenseLedger['AccountsLedger']['approved_by'] = $LedgerDueDetails['ChequePaymentdetail']['approved_by'];
		$ExpenseLedger['AccountsLedger']['recieved_by'] = $LedgerDueDetails['ChequePaymentdetail']['recieved_by'];
		$ExpenseLedger['AccountsLedger']['is_neutral'] = 'N';
		$this->AccountsLedger->create();
		$this->AccountsLedger->save($ExpenseLedger);
		$trnasactId = $this->AccountsLedger->getLastInsertId();
		
		$saveTransactionId['AccountsLedger']['id'] = $transactionId;
		$saveTransactionId['AccountsLedger']['transaction_id'] = $transactionId;
		$this->AccountsLedger->save($saveTransactionId);
		
		$saveTransactionId1['AccountsLedger']['id'] = $trnasactId;
		$saveTransactionId1['AccountsLedger']['transaction_id'] = $transactionId;
		$this->AccountsLedger->save($saveTransactionId1);
		
		
		
		/**Log Code**/
		$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$ExpenseLedger['AccountsLedger']['accounts_account_id'],$ExpenseLedger['AccountsLedger']['credit'],0,$ExpenseAccount['AccountsAccount']['closing_balance'],$updateExpenseAcc['AccountsAccount']['closing_balance'],$trnasactId,$ExpenseLedger['AccountsLedger']['accounts_bill_id'],0,'Cheque reconcile Bill','Renconcile cheque Expense account increase'));
		/**Log Code**/
		
		
		$PayableLedger['AccountsLedger']['accounts_account_id'] = $accountsPayable['AccountsAccount']['id'];
		$PayableLedger['AccountsLedger']['date'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_dated'];
		$PayableLedger['AccountsLedger']['debit'] = $LedgerDueDetails['ChequePaymentdetail']['amount'];
		$PayableLedger['AccountsLedger']['credit'] = 0;
		$PayableLedger['AccountsLedger']['accounts_bill_id'] = $LedgerDueDetails['AccountsBill']['id'];
		$PayableLedger['AccountsLedger']['cheque_no'] = $LedgerDueDetails['ChequePaymentdetail']['details'];
		$PayableLedger['AccountsLedger']['cheque_dated'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_dated'];
		$PayableLedger['AccountsLedger']['cheque_infavourof'] = $LedgerDueDetails['ChequePaymentdetail']['cheque_in_favour'];
		$PayableLedger['AccountsLedger']['approved_by'] = $LedgerDueDetails['ChequePaymentdetail']['approved_by'];
		$PayableLedger['AccountsLedger']['recieved_by'] = $LedgerDueDetails['ChequePaymentdetail']['recieved_by'];
		$PayableLedger['AccountsLedger']['is_neutral'] = 'Y';
		$this->AccountsLedger->create();
		$this->AccountsLedger->save($PayableLedger);
		$accountsPayableLastInsertIDDD = $this->AccountsLedger->getLastInsertId();
		
		
		/**Log Code**/
		$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$PayableLedger['AccountsLedger']['accounts_account_id'],0,$PayableLedger['AccountsLedger']['debit'],$accountsPayable['AccountsAccount']['closing_balance'],$updatePayableAcc['AccountsAccount']['closing_balance'],$accountsPayableLastInsertIDDD,$PayableLedger['AccountsLedger']['accounts_bill_id'],0,'Cheque reconcile Bill','Renconcile cheque Accounts Payable account decrease'));
		/**Log Code**/
		
		
		$PayableTransactId = $this->AccountsLedger->getLastInsertId();
		$PayableTransactionId['AccountsLedger']['id'] = $PayableTransactId;
		$PayableTransactionId['AccountsLedger']['transaction_id'] = $PayableTransactId;
		$this->AccountsLedger->save($PayableTransactionId);
		$updateChequePaymentdetail['ChequePaymentdetail']['id'] = $LedgerDueDetails['ChequePaymentdetail']['id'];
		$updateChequePaymentdetail['ChequePaymentdetail']['paid'] = 'Y';
		if($this->ChequePaymentdetail->save($updateChequePaymentdetail)){
			$records_in_chequepayment = $this->ChequePaymentdetail->find('all',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$LedgerDueDetails['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N'),'fields'=>array('ChequePaymentdetail.id')));
			if(empty($records_in_chequepayment)) {
				$updateBill['AccountsBill']['id'] = $LedgerDueDetails['AccountsBill']['id'];
				$updateBill['AccountsBill']['ledger_due'] = 'N';
				$this->AccountsBill->save($updateBill);
			}
			
			$Chequedetails = $this->ChequePaymentdetail->find('first',array('conditions'=>array('ChequePaymentdetail.accounts_bill_id'=>$LedgerDueDetails['AccountsBill']['id'],'ChequePaymentdetail.paid'=>'N'),'fields'=>array('ChequePaymentdetail.id')));
			debug($Chequedetails);
			$billDetails = $this->AccountsBill->findById($billId);
			if(($billDetails['AccountsBill']['amount'] == $billDetails['AccountsBill']['billamount']) && (empty($Chequedetails))) {
				$accountsBill['AccountsBill']['id'] = $billDetails['AccountsBill']['id'];
				$accountsBill['AccountsBill']['paid_status'] = 'Y';
				$this->AccountsBill->save($accountsBill);
			}
			
			$this->Session->setFlash(__('<div class="flashMessageSuccess">The accounts ledger has been updated!</div>'));
			if($page == 'ViewRedirect') {
				$this->redirect(array('controller'=>'accounts_bills','action'=>'view',$billId));
			} else {
				$this->redirect(array('controller'=>'accounts_bills','action'=>'index/3/page:'.$page));
			}
			
		}
		$this->set(compact('LedgerDueDetails'));
		
	}



	public function deleteMissedLedgers() {
		$this->autoRender = FALSE;
		Configure::write('debug',2);
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountsAccount');
		$cashAccountId = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Cash Account')));
		$Accounts = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$cashAccountId['AccountsAccount']['id'],'AccountsLedger.accounts_bill_id IS NOT NULL')));
		$totalAmountDebit = 0;$totalAmountCredit = 0;
		foreach($Accounts as $Account) {
			$bill = $this->AccountsBill->find('first',array('conditions'=>array('AccountsBill.id'=>$Account['AccountsLedger']['accounts_bill_id'])));
			if(empty($bill)) {
				$billIds[$Account['AccountsLedger']['accounts_bill_id']] = $Account['AccountsLedger']['accounts_bill_id'];
				$totalAmountDebit += $Account['AccountsLedger']['debit'];
				$totalAmountCredit += $Account['AccountsLedger']['credit'];
				$this->AccountsLedger->delete($Account['AccountsLedger']['id']);
			}
		}
		$updateValue = $totalAmountDebit - $totalAmountCredit;
		
		$updateCashAcc['AccountsAccount']['id'] = $cashAccountId['AccountsAccount']['id'];
		$updateCashAcc['AccountsAccount']['closing_balance'] = $cashAccountId['AccountsAccount']['closing_balance'] + $updateValue;
		$this->AccountsAccount->save($updateCashAcc);
		
		$finalLedgers = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_bill_id'=>$billIds)));
		$totalAmountDebit = 0;$totalAmountCredit = 0;
		foreach ($finalLedgers as $value) {
			$updateOtherAcc = NULL;$currentAcc = NULL;
			$currentAcc = $this->AccountsAccount->findById($value['AccountsLedger']['accounts_account_id']);
			if($value['AccountsLedger']['credit'] > 0) {
				$updateOtherAcc['AccountsAccount']['id'] = $value['AccountsLedger']['accounts_account_id'];
				$updateOtherAcc['AccountsAccount']['closing_balance'] = $currentAcc['AccountsAccount']['closing_balance'] - $value['AccountsLedger']['credit'];
				$this->AccountsAccount->save($updateOtherAcc);
			}
			if($value['AccountsLedger']['debit'] > 0) {
				$updateOtherAcc['AccountsAccount']['id'] = $value['AccountsLedger']['accounts_account_id'];
				$updateOtherAcc['AccountsAccount']['closing_balance'] = $currentAcc['AccountsAccount']['closing_balance'] + $value['AccountsLedger']['credit'];
				$this->AccountsAccount->save($updateOtherAcc);
			}
			$this->AccountsLedger->delete($value['AccountsLedger']['id']);
		}
		echo 'Completed!';
		
	}
}