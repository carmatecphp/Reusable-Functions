<?php
App::uses('AppController', 'Controller');
/**
 * AccountsCompanyloandetails Controller
 *
 * @property AccountsCompanyloandetail $AccountsCompanyloandetail
 */
class AccountsCompanyloandetailsController extends AppController {

	public $components = array('RequestHandler');

    function beforeFilter()    {  
		   $this->Auth->allow('index','rest');
		   parent::beforeFilter();
	}	



/**
 * index method
 *
 * @return void
 */
 
    public function index(){
    	$this->layout='rest';
    	
    	//Configure::write('debug',2);
    	
		debug($this->request->query);
		debug($this->params);
    	debug($this->params->query['username']);
    	debug($this->params->query['password']);
    	debug($this->data);
        
        $this->Auth->authorize = array('model'=>'Client');
    	$this->loadModel('Client');
    	
    	
    	$client_present=$this->Client->find('first',array('conditions'=>array('Client.visioncarma_clientid'=>$this->data['secretkey'])));
    	debug($client_present);
    	
    	//if($this->data['secretkey']=='xyz'){
    	if($client_present){
    		$this->Auth->authorize = array('model'=>'AccountsClientinvoice');
    		$this->loadModel('AccountsClientinvoice');
    		$user_yes=null;
    		$open=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.client_id'=>$client_present['Client']['id'],'AccountsClientinvoice.status'=>'open')));
    		debug($open);
    		$closed=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.client_id'=>$client_present['Client']['id'],'AccountsClientinvoice.status'=>'closed')));
    		debug($closed);
    		$overdue=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.client_id'=>$client_present['Client']['id'],'AccountsClientinvoice.status'=>'overdue')));
    		debug($overdue);
    		$user_yes['open']=$open;
    		$user_yes['closed']=$closed;
    		$user_yes['overdue']=$overdue;
    		$display=$this->array2xml($user_yes);
        	debug($display);
    		$this->set(compact('display'));
    		$this->set('_serialize', array('display'));
    	}
        
        /*$display=$this->array2xml($user_yes);
        debug($display);
        $this->set(compact('display'));
        $this->set('_serialize', array('display'));*/
        
       
    	
    }
  
    function rest(){
    	
    	$this->layout=null;
    	
    	Configure::write('debug',2);
    	
    	$this->Auth->authorize = array('model'=>'User');
    	$this->loadModel('User');
    	$recipes=$this->User->find('all');
    	//debug($user_yes);
    	
    	$this->set(array('recipes' => $recipes));
    	
    	
    }
    
 
	public function index123() {
		
		
		
		$this->AccountsCompanyloandetail->recursive = 0;
		$this->set('accountsCompanyloandetails', $this->paginate());
		/*$this->layout='rest';
		$recipes = $this->AccountsCompanyloandetail->find('all');
		$this->set(array(
            'recipes' => $recipes
        ));
        
       //$recipes123=$this->array2xml($recipes);
       //debug($recipes123);
       
       return $recipes;*/
       //$this->set(compact('recipes123'));
        
	}
	
	
	public function array2xml($array, $xml = false){
	    if($xml === false){
	        $xml = new SimpleXMLElement('<root/>');
	    }
	    foreach($array as $key => $value){
	        if(is_array($value)){
	            $this->array2xml($value, $xml->addChild($key));
	        }else{
	            $xml->addChild($key, $value);
	        }
	    }
	    return $xml->asXML();
   }

/**
 * view method
 *
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		$this->AccountsCompanyloandetail->id = $id;
		if (!$this->AccountsCompanyloandetail->exists()) {
			throw new NotFoundException(__('Invalid accounts companyloandetail'));
		}
		$this->set('accountsCompanyloandetail', $this->AccountsCompanyloandetail->read(null, $id));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->AccountsCompanyloandetail->create();
			if ($this->AccountsCompanyloandetail->save($this->request->data)) {
				$this->Session->setFlash(__('The accounts companyloandetail has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The accounts companyloandetail could not be saved. Please, try again.'));
			}
		}
		$accountsAccounts = $this->AccountsCompanyloandetail->AccountsAccount->find('list');
		$this->set(compact('accountsAccounts'));
	}

/**
 * edit method
 *
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		$this->AccountsCompanyloandetail->id = $id;
		if (!$this->AccountsCompanyloandetail->exists()) {
			throw new NotFoundException(__('Invalid accounts companyloandetail'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->AccountsCompanyloandetail->save($this->request->data)) {
				$this->Session->setFlash(__('The accounts companyloandetail has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The accounts companyloandetail could not be saved. Please, try again.'));
			}
		} else {
			$this->request->data = $this->AccountsCompanyloandetail->read(null, $id);
		}
		$accountsAccounts = $this->AccountsCompanyloandetail->AccountsAccount->find('list');
		$this->set(compact('accountsAccounts'));
	}

/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->AccountsCompanyloandetail->id = $id;
		if (!$this->AccountsCompanyloandetail->exists()) {
			throw new NotFoundException(__('Invalid accounts companyloandetail'));
		}
		if ($this->AccountsCompanyloandetail->delete()) {
			$this->Session->setFlash(__('Accounts companyloandetail deleted'));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Accounts companyloandetail was not deleted'));
		$this->redirect(array('action' => 'index'));
	}
	
	public function test(){
		
	}
	
}
