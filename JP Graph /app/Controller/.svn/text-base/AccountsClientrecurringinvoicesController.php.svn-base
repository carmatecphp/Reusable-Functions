<?php
App::uses('AppController', 'Controller');
/**
 * AccountsClientrecurringinvoices Controller
 *
 * @property AccountsClientrecurringinvoice $AccountsClientrecurringinvoice
 */
class AccountsClientrecurringinvoicesController extends AppController {


/**
 * index method
 *
 * @return void
 */
	public function index($flag=null,$sortbybrandid=null,$sortbystatus = null) {
		
		
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		if($this->data['DeleteInvoiceData']['pages'])
		{
			$limit = $this->data['DeleteInvoiceData']['pages'];
		}
		if($this->data['DeleteInvoiceData']['selectedid'])
		{
			if($flag==1){	
				foreach($this->data['DeleteInvoiceData']['selectedid'] as $key =>$v){
						if($v==1){
								debug($key);
								$recurringvoid->data = null;
								$recurringvoid->data['AccountsClientrecurringinvoice']['id'] = $key;
								$recurringvoid->data['AccountsClientrecurringinvoice']['status'] = 'inactive';
								if($this->AccountsClientrecurringinvoice->save($recurringvoid->data)){
									$void->data = null ; 
									$invoiceId = $this->AccountsClientrecurringinvoice->find('first',array('conditions'=>array('AccountsClientrecurringinvoice.id'=>$key)));
									$void->data['AccountsClientinvoice']['id']=$invoiceId['AccountsClientrecurringinvoice']['accounts_clientinvoice_id'];
									$void->data['AccountsClientinvoice']['void']='Y';
									if($this->AccountsClientinvoice->save($void->data)){
										$this->Session->setFlash(__('<div class="flashMessageSuccess">Accounts clientinvoice changed to void</div>'));
										$this->redirect(array('action'=>'index'));
									}
								}
						}
				}
		   }
			
			if($flag==2)
			{
				foreach($this->data['DeleteInvoiceData']['selectedid'] as $key1 =>$v1)
					{
						if($v1==1)
							{
								$recurringvoid->data = null;
								$recurringvoid->data['AccountsClientrecurringinvoice']['id'] = $key;
								$recurringvoid->data['AccountsClientrecurringinvoice']['status'] = 'inactive';
								if($this->AccountsClientrecurringinvoice->save($recurringvoid->data)){
									$this->Session->setFlash(__('<div class="flashMessageSuccess"> Status Changed To Invalid</div>'));
									$this->redirect(array('action' => 'index'));
								}
							}
					}
				
			}
			
		}
		$currencysymbolindex = $this->Currency->find('list',array('fields'=>array('Currency.id','Currency.symbol')));
		$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
		$allbrand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		$openinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.status'=>'open','AccountsClientinvoice.due_date >=' =>date('Y-m-d'),'AccountsClientinvoice.void'=>'N')));
		$overdueinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array(/*'AccountsClientinvoice.status'=>'overdue',*/'AccountsClientinvoice.due_date <' =>date('Y-m-d'),'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N')));
		$closedinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.status'=>'closed','AccountsClientinvoice.void'=>'N')));
		if(($this->data['DeleteInvoiceData']['sortbybrand']) || ($this->data['DeleteInvoiceData']['sortbystatus'])){
			if(!$sortbybrandid){
				if($this->data['DeleteInvoiceData']['sortbystatus']){
					$sortbystatus = $this->data['DeleteInvoiceData']['sortbystatus'];
					$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.status'=>$this->data['DeleteInvoiceData']['sortbystatus']);
				}else{
					$sortbybrandid = $this->data['DeleteInvoiceData']['sortbybrand'];
					$sortbystatus = $this->data['DeleteInvoiceData']['sortbystatus'];
					$this->set(compact('sortbybrandid','sortbystatus'));
					$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.brand_id'=>$this->data['DeleteInvoiceData']['sortbybrand']);
				}
			}elseif($this->data['DeleteInvoiceData']['sortbystatus']){
				$sortbystatus = $this->data['DeleteInvoiceData']['sortbystatus'];
				if($this->data['DeleteInvoiceData']['sortbystatus'] == 'void'){
					if($sortbybrandid){
						$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.void'=>'Y');
					}else{
						$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientinvoice.void'=>'Y');
					}
				}else{
					if($sortbybrandid){
						$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.brand_id'=>$sortbybrandid,'AccountsClientrecurringinvoice.status'=>$this->data['DeleteInvoiceData']['sortbystatus']);
					}else{
						$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.brand_id'=>$sortbybrandid,'AccountsClientrecurringinvoice.status'=>$this->data['DeleteInvoiceData']['sortbystatus']);
					}
				}
			}
			$this->set(compact('sortbybrandid','sortbystatus'));
		}elseif($limit && ($sortbybrandid || $sortbystatus)){
			if($sortbybrandid && !$sortbystatus){
				$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.brand_id'=>$sortbybrandid);
			}elseif($sortbystatus && !$sortbybrandid){
				$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.status'=>$sortbystatus);
			}else{
				$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y','AccountsClientrecurringinvoice.brand_id'=>$sortbybrandid,'AccountsClientrecurringinvoice.status'=>$sortbystatus);
			}
		}
		else{
			$conditions = array('AccountsClientrecurringinvoice.valid'=>'Y');
		}
		$this->AccountsClientrecurringinvoice->recursive = 0;
		if($limit){
			$this->paginate = array('conditions'=>$conditions,'order'=>'AccountsClientrecurringinvoice.id DESC','limit'=>$limit);
		}else{
			$this->paginate = array('conditions'=>$conditions,'order'=>'AccountsClientrecurringinvoice.id DESC');
		}
		$this->set('accountsClientrecurringinvoices', $this->paginate());
		$this->set(compact('currencysymbolindex','allclients','allbrand','openinvoices','overdueinvoices','closedinvoices','accountsClientinvoices','allclients','allbrand','openinvoices','closedinvoices','overdueinvoices','openoverdueinvoices'));
	}

/**
 * view method
 *
 * @param string $id
 * @return void
 */
	public function view($id = null,$flag=null,$recurringid=null) {
		$this->loadModel('AccountsClientinvoice');
		$this->AccountsClientrecurringinvoice->id = $recurringid;
		if (!$this->AccountsClientrecurringinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientrecurringinvoice'));
		}
		$this->set('accountsClientrecurringinvoice', $this->AccountsClientrecurringinvoice->read(null, $recurringid));
		
		
		//configure::write('debug',2);
		debug($flag);
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('Currency');
		
		$this->AccountsClientinvoicedetail->recursive=0;
		
		$this->AccountsClientinvoice->id = $id;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		
		$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		
		$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
		$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
		$currency=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
		$symbol=$currency['Currency']['symbol'];
		$latefee=$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		$brandid=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
		//debug($brandid);
		$icon_imagepath_url=$brandid['Brand']['icon_imagepath'];
		$icon_imagepath=$brandid['Brand']['icon_imagepath_url'];
		//debug($icon_imagepath_url);
	//	debug($icon_imagepath);
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
		foreach($invoicedetails as $invdeta)
		{
			if($invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])
			{
				$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])));
			}
			elseif($invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
			{
				$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
			}
			if($invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])
			{
				
				$taxarray[$invdeta['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['name'];
				$percent=$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['percent'];
				$taxableamount_view=($percent*$invdeta['AccountsClientinvoicedetail']['totalcost'])/100;
				$taxarray[$invdeta['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxarray[$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['id']]['value']+$taxableamount_view;
				debug($taxarray);
			}
			elseif($invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
			{
				$this->loadModel('AccountsTaxgroupmapping');
				if($taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTaxgroup']['compounded']=='Y')
				{
					
					$findgroup=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>'AccountsTaxgroupmapping.priority ASC'));
					$taxableamount_view=0;
					foreach($findgroup as $kgroup=>$vgroup)
					{
						
						$accountstax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vgroup['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=$accountstax['AccountsTax']['percent']/100;
						if((!$taxableamount_view) || ($taxableamount_view==0))
						{
							$taxableamount_view=$invdeta['AccountsClientinvoicedetail']['totalcost'];
						}
						$taxarray[$accountstax['AccountsTax']['id']]['name']=$accountstax['AccountsTax']['name'];
						$taxarray[$accountstax['AccountsTax']['id']]['value']=$taxarray[$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['id']]['value']+(($taxableamount_view*$percent));
						$taxableamount_view=$taxableamount_view+($taxableamount_view*$percent);
					debug($taxarray);
					}
				}
				else
				{
					$findgroup=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>'AccountsTaxgroupmapping.priority ASC'));
					$taxableamount_view=0;
					foreach($findgroup as $kgroup=>$vgroup)
					{
						$accountstax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vgroup['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=$accountstax['AccountsTax']['percent']/100;
						
						$taxableamount_view=$invdeta['AccountsClientinvoicedetail']['totalcost'];
						
						$taxarray[$accountstax['AccountsTax']['id']]['name']=$accountstax['AccountsTax']['name'];
						$taxarray[$accountstax['AccountsTax']['id']]['value']=$taxarray[$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['id']]['value']+(($taxableamount_view*$percent));
						debug($taxarray);
					}
				}
			}
			
		}
		debug($taxarray);
		//debug($invoicedetails);
		debug($accountsClientinvoice);
	//	debug($clientdetails);
		$this->set(compact('symbol','taxarray','latefee','icon_imagepath_url','icon_imagepath','brands','invoicedetails','accountsClientinvoice','clientdetails','flag','taxdetail'));
		//$this->set('accountsClientinvoice', $this->AccountsClientinvoice->read(null, $id));
	
	if($flag==4)
	{
		
		
		$this->loadModel('ClientEmailtype');
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('Staff');
		$emailrecords=$this->ClientsEmailhistory->find('all',array('conditions'=>array('ClientsEmailhistory.accounts_clientinvoice_id'=>$id)));
		debug($emailrecords);
		foreach($emailrecords as $ke=>$ve)
		{
			
			$staffdetails=$this->Staff->find('first',array('conditions'=>array('Staff.id'=>$ve['ClientsEmailhistory']['staff_id'])));
			$staffemail[$ve['ClientsEmailhistory']['id']]=$staffdetails['Staff']['email1'];
			$emailtype=$this->ClientEmailtype->find('first',array('conditions'=>array('ClientEmailtype.id'=>$ve['ClientsEmailhistory']['client_emailtype_id'])));
			
			$emailtypes[$ve['ClientsEmailhistory']['id']]=$emailtype['ClientEmailtype']['email_type'];
			
		}
		$this->set(compact('emailrecords','staffemail','emailtypes'));
	}
	if($flag==3)
	{
		
		$this->loadModel('ClientsCommenthistory');
		$this->loadModel('Staff');
		$final_comments=$this->ClientsCommenthistory->find('all',array('conditions'=>array('ClientsCommenthistory.accounts_clientinvoice_id'=>$id)));
		foreach($final_comments as $ke=>$ve)
		{
			$staffdetails=$this->Staff->find('first',array('conditions'=>array('Staff.id'=>$ve['ClientsCommenthistory']['staff_id'])));
			$staffemail[$ve['ClientsCommenthistory']['id']]=$staffdetails['Staff']['email1'];
			
			
		}
	}
		
		
		
		
		
		
	}
/**
 * urgent add method
 */
 public function urgentAdd($client_id = null ,$invoice_id = null,$recurringInvoiceId = null){
 	$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		$this->loadModel('Currency');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
 		$unittype    = null;
		$servicetype = null;
		$packagetyp  = null;
		if ($this->request->is('post')) {
			debug($this->data);
				$clientNameForLedger = $this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
				$this->AccountsClientinvoice->create();
				$savearray->data=null;
				$savearray->data['AccountsClientinvoice']['client_id']					= $this->data['AccountsClientinvoice']['client'];
				$savearray->data['AccountsClientinvoice']['brand_id']					= $this->data['AccountsClientinvoice']['brand'];
				$savearray->data['AccountsClientinvoice']['invoice_details']			= $this->data['AccountsClientinvoice']['invoiceDetail'];
				$savearray->data['AccountsClientinvoice']['invoiced_date']				= date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
			    $savearray->data['AccountsClientinvoice']['service_startdate']			= date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
				if($this->data['due_date']){
					$savearray->data['AccountsClientinvoice']['due_date']				= date('Y-m-d',strtotime($this->data['due_date']));
				}else{
					$savearray->data['AccountsClientinvoice']['due_date']				= date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date']));
				}
				$savearray->data['AccountsClientinvoice']['late_feedetails']			= $this->data['AccountsClientinvoice']['latefee'];
				$savearray->data['AccountsClientinvoice']['paymentdue_term']			= $this->data['AccountsClientinvoice']['term'];
				$savearray->data['AccountsClientinvoice']['client_notes']				= $this->data['AccountsClientinvoice']['notes'];
				$savearray->data['AccountsClientinvoice']['client_termsandcondition']	= $this->data['AccountsClientinvoice']['t&c'];
				if($this->data['AccountsClientinvoice']['currency']){
					$savearray->data['AccountsClientinvoice']['currency_id']			= $this->data['AccountsClientinvoice']['currency'];
				}else{
					$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client']),'fields'=>array('Client.currency_id')));
					$savearray->data['AccountsClientinvoice']['currency_id']			= $clientInfo['Client']['currency_id'];
				}
				//to decide the status of the invoice
				$invoiced_date = strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
				if($this->data['due_date']){
					$due_date = strtotime(date('Y-m-d',strtotime($this->data['due_date'])));
				}else{
					$due_date = strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date'])));
				}
				if($this->data['draft'] == 'Yes'){
					$status = "draft";
				}else{
					$current_date=strtotime(date('Y-m-d'));
					if($current_date<=$due_date){
						$status="open";
					}if($current_date>$due_date){
						$status="overdue";
					}
				}
				$savearray->data['AccountsClientinvoice']['status']=$status;
				//ends here
				//Calculation For final Amount and final discount
				/*$payabletotal=$this->numberconversion($this->data['total'])+$this->numberconversion($this->data['total1']);
				foreach($this->data['total2'] as $key1=>$val1){
						foreach($val1 as $keyval1=>$vals1){
							$payabletotal=$payabletotal+$this->numberconversion($vals1);
						}
				}
				$nettotal=$this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1'])+$this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']);
				foreach($this->data['price_unit'] as $key=>$val){
					$nettotal=$nettotal+($this->data['quantity_unit'][$key]*$this->numberconversion($val));
				}
				$discountavailed=$nettotal-$payabletotal;
				$discountpercent=($discountavailed/$nettotal)*100;
				foreach($this->data['service_tax'] as $keyservice=>$valservice){
							$alltaxessum=$alltaxessum+$valservice;
				}*/
				if($this->data['service_tax']){
					foreach($this->data['service_tax'] as $keyservice=>$valservice){
							$alltaxessum=$alltaxessum+$valservice;
					}
				}else{
					foreach($this->data['AccountsClientinvoice']['service_tax'] as $keyservice=>$valservice){
							$alltaxessum=$alltaxessum+$valservice;
					}
				}
				
				foreach($this->data['price_unit'] as $key=>$val){
					$nettotal=$nettotal+($this->data['quantity_unit'][$key]*$this->numberconversion($val));
				}
				$payabletotal = $this->data['AccountsClientinvoice']['subtotal'];
				$discountavailed=$nettotal-$payabletotal;
				$discountpercent=($discountavailed/$nettotal)*100;
				$finalamount=$this->data['AccountsClientinvoice']['total'];
				$savearray->data['AccountsClientinvoice']['invoice_amount']=$finalamount;
				if($this->data['Type']=='Yes'){
						if($finalamount>$this->data['creditNote']){
								$creditApplied = $this->numberconversion($this->data['creditNote']);
								$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount']=$finalamount-$this->numberconversion($this->data['creditNote']);
						}else{
								$creditApplied = $this->numberconversion($this->data['creditNote']) - $finalamount;
								$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = 0;
						}
						$savearray->data['AccountsClientinvoice']['credit_note']='Y';
				}else{
						$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount']=$finalamount;
				}
				$savearray->data['AccountsClientinvoice']['discounts']=$discountpercent;
				//ends here
				if ($this->AccountsClientinvoice->save($savearray->data)) {
						if($this->data['Type']=='Yes'){
								$this->loadModel('ClientCreditnote');
								$creditNoteUpdate=$this->ClientCreditnote->find('first',array('conditions'=>array('ClientCreditnote.id'=>$this->data['creditNoteId'])));
								$updatenote->data=null;
								$updatenote->data['ClientCreditnote']['id']=$this->data['creditNoteId'];
								if($finalamount>$this->data['creditNote']){
									$updatenote->data['ClientCreditnote']['amount']=$creditNoteUpdate['ClientCreditnote']['amount'] - $this->numberconversion($this->data['creditNote']);
									$ledgerEntry=$this->numberconversion($this->data['creditNote']);
								}else{
									$updatenote->data['ClientCreditnote']['amount']= $creditApplied;
									$ledgerEntry=$creditApplied;
								}
								$updatenote->data['ClientCreditnote']['datemodified'] = strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date'])));;
								if($this->ClientCreditnote->save($updatenote->data)){
									/**************************************************************************************************************
									**********************************Spot Conversion Logic ****************************************************** 
									***************************************************************************************************************
									*/
									$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
									$clientCurency=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($billingcurrency['Currency']['id']!=$clientCurency['Client']['currency_id']))){
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
											$from=$fromcur['Currency']['name'];
											$to=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) {
												$result = fgets($handle, 4096);
												fclose($handle);
											}
											$allData = explode(',',$result);  //Get all the contents to an array 
											$ledgeramountPay=$ledgerEntry*$allData['1'];
									}else{
											$ledgeramountPay=$ledgerEntry;
									}
									/**************************************************************************************************************
									**********************************Spot Conversion Logic ****************************************************** 
									***************************************************************************************************************
									*/
									$last1=$this->AccountsClientinvoice->getLastInsertID();
									$this->AccountsLedger->create();
									$ledgerPay->data=null;
									$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable')));
									$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
									if(!empty($accountbal)){
									$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
									}else{
										$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
									}
									$ledgerPay->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
									$ledgerPay->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
									$ledgerPay->data['AccountsLedger']['payment_description']='Debit Amount';
									$ledgerPay->data['AccountsLedger']['cheque_no']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
									$ledgerPay->data['AccountsLedger']['debit']=$ledgeramountPay;
									$ledgerPay->data['AccountsLedger']['is_neutral']='Y';
									if($this->AccountsLedger->save($ledgerPay->data)){
										/* To Insert a proper transaction id code change wrt to latest ledger entry*/
											$ledgerLastEntry = $this->AccountsLedger->getLastInsertID();
											$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry;
											$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
											$this->AccountsLedger->save($ledgerPay->data);
										/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
											$closingBalance->data = null;
											$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
											$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramountPay;;
											$this->AccountsAccount->save($closingBalance->data);
											$last1=$this->AccountsClientinvoice->getLastInsertID();
											$this->AccountsLedger->create();
											$ledgerrcv->data=null;
											$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
											$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
											if(!empty($accountbal)){
													$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
											}else{
													$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
											}
											$ledgerrcv->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
											$ledgerrcv->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
											$ledgerrcv->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
											$ledgerrcv->data['AccountsLedger']['payment_description']='Credit Amount';
											$ledgerrcv->data['AccountsLedger']['cheque_no']='Amount Credited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for'.$clientNameForLedger['Client']['client_companyname'];
											$ledgerrcv->data['AccountsLedger']['is_neutral']='Y';
											$ledgerrcv->data['AccountsLedger']['credit']=$ledgeramountPay;
											$this->AccountsLedger->save($ledgerrcv->data);
											/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
											$closingBalance->data = null;
											$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
											$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramountPay;;
											$this->AccountsAccount->save($closingBalance->data);
									}
							}
					}
					/**************************************************************************************************************
					**********************************Spot Conversion Logic ****************************************************** 
					***************************************************************************************************************
					*/
					$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
					$clientCurency=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
					if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($billingcurrency['Currency']['id']!=$clientCurency['Client']['currency_id']))){
							$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
							$from=$fromcur['Currency']['name'];
							$to=$billingcurrency['Currency']['name'];
							$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
							$handle = @fopen($url, 'r');
							if ($handle){
								$result = fgets($handle, 4096);
								fclose($handle);
							}
							$allData = explode(',',$result);  //Get all the contents to an array 
							$ledgeramount=$finalamount*$allData['1'];
							$symbol=$fromcur['Currency']['symbol'];
							$this->set(compact('symbol'));
					}else{
							$ledgeramount=$finalamount;
					}
					/**************************************************************************************************************
					**********************************Spot Conversion Logic ****************************************************** 
					***************************************************************************************************************
					*/
					$last1=$this->AccountsClientinvoice->getLastInsertID();
					if($this->data['draft'] == 'NO'){
						$this->AccountsLedger->create();
						$ledger->data=null;
						$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
						$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
						if(!empty($accountbal)){
							$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
						}else{
							$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
						}
						$ledger->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
						$ledger->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
						$ledger->data['AccountsLedger']['payment_description']='Credit Amount';
						$ledger->data['AccountsLedger']['cheque_no']='Amount Credited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
						$ledger->data['AccountsLedger']['is_neutral']='Y';
						$ledger->data['AccountsLedger']['accounts_clientinvoice_id']=$last1;
						$ledger->data['AccountsLedger']['credit']=$ledgeramount;
						if($this->AccountsLedger->save($ledger->data)){
							$ledgerLastEntry = $this->AccountsLedger->getLastInsertID();
							$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry;
							$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
							$this->AccountsLedger->save($ledgerPay->data);
							/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
							$closingBalance->data = null;
							$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
							$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance+$ledgeramountPay;
							$this->AccountsAccount->save($closingBalance->data);
							$this->AccountsLedger->create();
							$ledgerincome->data=null;
							$accounts_accounts_income=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Sales')));
							$accountbal_income = $accounts_accounts_income['AccountsAccount']['closing_balance'];
							if(!empty($accountbal_income)){
								$bbaalance_income = $accounts_accounts_income['AccountsAccount']['closing_balance'];
							}else{
								$bbaalance_income = $accounts_accounts_income['AccountsAccount']['opening_balance'];
							}
							$ledgerincome->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
							$accounttype_income=$this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accounts_accounts_income['AccountsAccount']['account_type_id'])));
							$ledgerincome->data['AccountsLedger']['accounts_account_id']=$accounts_accounts_income['AccountsAccount']['id'];
							$ledgerincome->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
							$ledgerincome->data['AccountsLedger']['payment_description']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
							$ledgerincome->data['AccountsLedger']['cheque_no']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for'.$clientNameForLedger['Client']['client_companyname'];
							$ledgerincome->data['AccountsLedger']['debit']=$ledgeramount;
							$ledgerincome->data['AccountsLedger']['accounts_clientinvoice_id']=$last1;
							$ledgerincome->data['AccountsLedger']['is_neutral']='Y';
							$this->AccountsLedger->save($ledgerincome->data);
							/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
							$closingBalance->data = null;
							$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts_income['AccountsAccount']['id'];
							$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramountPay;
							$this->AccountsAccount->save($closingBalance->data);
						}
					}
					
					foreach($this->data['AccountsClientinvoice']['unit_name'] as $unitkey =>$unitval){
						debug($unitkey);
						
						$this->AccountsClientinvoicedetail->create();
						$save1->data = null;
						$save1->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id'] = $last1;
						$save1->data['AccountsClientinvoicedetail']['unit_type'] = $this->data['AccountsClientinvoice']['type'][$unitkey];
						if($this->data['AccountsClientinvoice']['type'][$unitkey] == 'package'){
							$save1->data['AccountsClientinvoicedetail']['brands_package_id'] = $unitval;
						}
						if($this->data['AccountsClientinvoice']['type'][$unitkey] == 'service'){
							$save1->data['AccountsClientinvoicedetail']['brands_service_id'] = $unitval;
						}
						if($this->data['AccountsClientinvoice']['type'][$unitkey] == 'unit'){
							$save1->data['AccountsClientinvoicedetail']['billing_unit_id'] = $unitval;
						}
						$save1->data['AccountsClientinvoicedetail']['quantity'] = $this->data['AccountsClientinvoice']['quantity_unit'][$unitkey];
						if($this->data['AccountsClientinvoice']['addtax_recurring'][$unitkey]){
							$explodedata = explode('-',$this->data['AccountsClientinvoice']['addtax_recurring'][$unitkey]);
							if($explodedata[1]){
									$save1->data['AccountsClientinvoicedetail']['accounts_taxgroup_id'] = $explodedata[1];
							}else{
									$save1->data['AccountsClientinvoicedetail']['accounts_tax_id'] = $this->data['AccountsClientinvoice']['addtax_recurring'][$unitkey];
									$taxvalue1 = $this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax_recurring'][$unitkey])));
							}
						}
						if($this->data['AccountsClientinvoice']['discount'][$unitkey]){
							$save1->data['AccountsClientinvoicedetail']['discount']  = $this->data['AccountsClientinvoice']['discount'][$unitkey];
							$save1->data['AccountsClientinvoicedetail']['totalcost'] = $this->data['AccountsClientinvoice']['amount'][$unitkey];
						}else{
							$save1->data['AccountsClientinvoicedetail']['totalcost'] = $this->data['AccountsClientinvoice']['amount'][$unitkey];
						}
						$save1->data['AccountsClientinvoicedetail']['description'] = $this->data['AccountsClientinvoice']['description'][$unitkey];
						
						$save1->data['AccountsClientinvoicedetail']['netcost']     = $this->numberconversion($this->data['AccountsClientinvoice']['price_unit'][$unitkey]);
						debug($save1->data);
						$this->AccountsClientinvoicedetail->save($save1->data,array('validate'=>false));
					}					
					
					if($this->data['unit_name']){   
						foreach($this->data['unit_name'] as $k=>$v){
							$this->AccountsClientinvoicedetail->create();
							$save3->data=null;
							$save3->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
							$save3->data['AccountsClientinvoicedetail']['unit_type']=$this->data['type'][$k];
							if($this->data['type'][$k]=='package'){
								$save3->data['AccountsClientinvoicedetail']['brands_package_id']=$v;
							}
							if($this->data['type'][$k]=='service'){
								$save3->data['AccountsClientinvoicedetail']['brands_service_id']=$v;
							}
							if($this->data['type'][$k]=='unit'){
								$save3->data['AccountsClientinvoicedetail']['billing_unit_id']=$v;
							}
							$save3->data['AccountsClientinvoicedetail']['quantity']=$this->data['quantity_unit'][$k];
							if($this->data['addtax'][$k]){
								$eplodedata3=explode('-',$this->data['addtax'][$k]);
								if($eplodedata3[1])
									{
										$save3->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$eplodedata3[1];
									}
								else{
										$save3->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
										$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax'][$k])));
								}
							}if($this->data['discount'][$k]){
								$save3->data['AccountsClientinvoicedetail']['discount']=$this->data['discount'][$k];
								$discount[$k]=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))*$this->data['discount'][$k])/100;
								$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))-$discount[$k]);
							}else{
								$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k])));
							}
							$save3->data['AccountsClientinvoicedetail']['description']=$this->data['description'][$k];
							$save3->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit'][$k]);
							$this->AccountsClientinvoicedetail->save($save3->data,array('validate'=>false));
						}
					}
					$this->Session->setFlash(__('<div class="flashMessageSuccess">An Invoice Has Been Added</div>'));
					$this->redirect(array('controller'=>'accounts_clientinvoices','action' => 'view',$last1));
					$success=1;
					$this->set(compact('success'));
				}else{
					$fail=1;
					$this->Session->setFlash(__('<div class="flashMessageError">The accounts clientinvoice could not be saved. Please, try again.</div>',true));
					$this->set(compact('fail'));
					return;
				}
															
		}else{
			if($client_id && $invoice_id)
				{
				$frequencyType = array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
				$clients = $this->Client->find('list',array('conditions'=>array('Client.id'=>$client_id),'fields'=>array('Client.id','Client.client_companyname')));
				$accountsClientinvoice = $this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoice_id)));
				$latefee=$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
				$notes=$accountsClientinvoice['AccountsClientinvoice']['client_notes'];
				$termandcondition=$accountsClientinvoice['AccountsClientinvoice']['client_termsandcondition'];
				$instacarmaBrands = $this->Brand->find('list',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id']),'fields'=>array('Brand.id','Brand.brandname')));
				$term=$accountsClientinvoice['AccountsClientinvoice']['paymentdue_term'];
				$invoiced_date=$accountsClientinvoice['AccountsClientinvoice']['invoiced_date'];
				$serviceStartdate=date('Y-M-d',strtotime($accountsClientinvoice['AccountsClientinvoice']['service_startdate']));
				$dueDate=date('Y-M-d',strtotime($accountsClientinvoice['AccountsClientinvoice']['due_date']));
				$currencyList=$this->Currency->find('list',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
				$currency_symbol=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
				$symbol=$currency_symbol['Currency']['symbol'];
				$this->set(compact('symbol'));
				$accountClientinvoiceDetail=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$invoice_id)));
				foreach($accountClientinvoiceDetail as $k=>$v)
					{
						if($v['AccountsClientinvoicedetail']['unit_type']=='unit'){
							$unittype=1;
						}
						if($v['AccountsClientinvoicedetail']['unit_type']=='service'){
							$servicetype=1;
						}
						if($v['AccountsClientinvoicedetail']['unit_type']=='package'){
							$packagetype=1;
						}
						if($v['AccountsClientinvoicedetail']['accounts_tax_id']){
							$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsClientinvoicedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.percent','AccountsTax.name')));
							$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']]=$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']]+($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
							$tax[$v['AccountsClientinvoicedetail']['accounts_tax_id']]['total']=$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']];
							$tax[$v['AccountsClientinvoicedetail']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
						}
						if($v['AccountsClientinvoicedetail']['accounts_taxgroup_id']){
							$taxgroup_new=$this->AccountsTaxgroup->find('first', array ('conditions'=>array('AccountsTaxgroup.id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname','AccountsTaxgroup.compounded')));
							if($taxgroup_new['AccountsTaxgroup']['compounded']=='Y'){
								$compound_tax=1;
							}
							$defaulttaxdisplay[$v['AccountsClientinvoicedetail']['accounts_clientinvoice_id']]=$taxgroup_new['AccountsTaxgroup']['groupname'].'-'.$taxgroup_new['AccountsTaxgroup']['id'];
							$this->loadModel('AccountsTaxgroupmapping');
							$groupdet=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							if($compound_tax==1){
								$tax_compound_total=null;
								foreach($groupdet as $kdet=>$vdet){
											$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdet['AccountsTaxgroupmapping']['accounts_tax_id']),'fields'=>array('AccountsTax.percent','AccountsTax.name')));
											if($tax_compound_total){
													$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($tax_compound_total+$v['AccountsClientinvoicedetail']['totalcost']))/100;
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
													$tax_compound_total=$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
											}else{
													$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
													$tax_compound_total=$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
											}
									}
							}else{
								foreach($groupdet as $kdet=>$vdet){
													$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
								}
							}
					}
			}
			if($unittype==1){
				$unitlist=$this->BillingUnit->find('list',array('fields'=>array('BillingUnit.id','BillingUnit.name')));
			}
			if($servicetype==1){
				$servicelist=$this->BrandsService->find('list',array('fields'=>array('BrandsService.id','BrandsService.service_name')));
			}
			if($packagetype==1){
				$packagelist=$this->BrandsPackage->find('list',array('fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
			}
			//Tree For Taxes
		
			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($tax_mappings as $m1 => $m2)
								{
									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
									foreach($taxname as $name1 => $name2)
										{
											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										}
								}
						}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
			ksort($final_taxes);
			$this->set(compact('final_taxes'));
			$var = 0;		
			foreach($final_taxes as $f1 => $f2)
				{
						if(is_array($f2))
							{
								$name_exp = explode('-',$f1);
								$list[$f1] = $name_exp[0];
								foreach($f2 as $v1 => $v2)
									{
										debug($v2);
										foreach($v2 as $id1 => $name1)
											{
												//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
												$list[$f1.$id1]='|--'.$name1;
											}
									}
					  		 }
			
						else
							{
								$list[$f1] = $f2;
							}
		}
		$this->set(compact('list'));
		//Tree For Tax Types Ends Here
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
				foreach($currency as $key=>$val)
					{
						$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
					}
			$this->set(compact('month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist','defaulttaxdisplay'));
		}
		else
		{
			$clients = $this->Client->find('list',array('fields'=>array('Client.id','Client.client_companyname')));
		}
	//	$instacarmaServices = $this->AccountsClientrecurringinvoice->InstacarmaService->find('list');
		$this->set(compact('clients', 'instacarmaServices', 'instacarmaBrands'));
		}
 }
 
 
 
/**
 * add method
 *
 * @return void
 */
	public function add($invoice_id=null,$client_id=null) {
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('Currency');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		
		$unittype=null;
		$servicetype=null;
		$packagetyp=null;
		if ($this->request->is('post')) {
			if($this->data['AccountsClientinvoice']['frequency'])
				{
					
					$savearray1->data=null;
					$savearray1->data['AccountsClientinvoice']['id']=$this->data['AccountsClientinvoice']['invoice_id'];
					$savearray1->data['AccountsClientinvoice']['recurring']='Y';
					if($this->AccountsClientinvoice->save($savearray1->data)){
						$this->AccountsClientrecurringinvoice->create();
						$savearray->data=null;
						$savearray->data['AccountsClientrecurringinvoice']['client_id']=$this->data['AccountsClientinvoice']['client'];
						$savearray->data['AccountsClientrecurringinvoice']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
						$savearray->data['AccountsClientrecurringinvoice']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
						$savearray->data['AccountsClientrecurringinvoice']['invoice_day']=date('Y-m-d',$this->data['AccountsClientinvoice']['invoice_date']);
						$savearray->data['AccountsClientrecurringinvoice']['start_date']=$this->data['AccountsClientinvoice']['service_startdate'];
						if($this->data['AccountsClientinvoice']['end_date'])
							{
								$savearray->data['AccountsClientrecurringinvoice']['end_date']=date('Y-m-d',$this->data['AccountsClientinvoice']['due_date']);
							}
						if($this->data['end_date'])
							{
								$savearray->data['AccountsClientrecurringinvoice']['end_date']=date('y-m-d',$this->data['due_date']);
							}
							$savearray->data['AccountsClientrecurringinvoice']['accounts_clientinvoice_id']=$this->data['AccountsClientinvoice']['invoice_id'];
						$savearray->data['AccountsClientrecurringinvoice']['paymentdue_term']=$this->data['AccountsClientinvoice']['term'];
						$savearray->data['AccountsClientrecurringinvoice']['frequency_type']=$this->data['AccountsClientinvoice']['frequency_type'];
						$savearray->data['AccountsClientrecurringinvoice']['frequency']=$this->data['AccountsClientinvoice']['frequency'];
						foreach($this->data['AccountsClientinvoice']['addtax_recurring'] as $k=>$v)
							{
								$totalamount=$totalamount+$this->data['AccountsClientinvoice']['amount'.$k]+$this->data['AccountsClientinvoice']['service_tax'][$k];
							}
						$savearray->data['AccountsClientrecurringinvoice']['invoice_amount']=$totalamount+$this->data['AccountsClientinvoice']['latefee'];
						if ($this->AccountsClientrecurringinvoice->save($savearray->data)) {
							$this->Session->setFlash(__('<div class="flashMessageSuccess">Invoice Id '. $this->data['AccountsClientinvoice']['invoice_id'].' has been changed to Recurring Invoice'));
							$this->redirect(array('controller'=>'accounts_clientinvoices','action' => 'view',$this->data['AccountsClientinvoice']['invoice_id']));
						} else {
							$this->Session->setFlash(__('The accounts clientrecurringinvoice could not be saved. Please, try again.'));
						}
					}
				//	$savearray->data['AccountsClientrecurringinvoice']['due_day']=$this->data['AccountsClientinvoice'][''];
				}
			else
				{
							$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
							$clients = $this->Client->find('list',array('conditions'=>array('Client.id'=>$client_id),'fields'=>array('Client.id','Client.client_companyname')));
							$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoice_id)));
							$latefee=$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
							$notes=$accountsClientinvoice['AccountsClientinvoice']['client_notes'];
							$termandcondition=$accountsClientinvoice['AccountsClientinvoice']['client_termsandcondition'];
							$instacarmaBrands = $this->Brand->find('list',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id']),'fields'=>array('Brand.id','Brand.brandname')));
							$term=$accountsClientinvoice['AccountsClientinvoice']['paymentdue_term'];
							$invoiced_date=$accountsClientinvoice['AccountsClientinvoice']['invoiced_date'];
							$serviceStartdate=date('Y-M-d',strtotime($accountsClientinvoice['AccountsClientinvoice']['service_startdate']));
							$dueDate=date('Y-M-d',strtotime($accountsClientinvoice['AccountsClientinvoice']['due_date']));
							$currencyList=$this->Currency->find('list',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
							$currency_symbol=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
							$symbol=$currency_symbol['Currency']['symbol'];
							$this->set(compact('symbol'));
							$accountClientinvoiceDetail=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$invoice_id)));
							foreach($accountClientinvoiceDetail as $k=>$v)
							{
								if($v['AccountsClientinvoicedetail']['unit_type']=='unit')
								{
									$unittype=1;
								}
								if($v['AccountsClientinvoicedetail']['unit_type']=='service')
								{
									$servicetype=1;
								}
								if($v['AccountsClientinvoicedetail']['unit_type']=='package')
								{
									$packagetype=1;
								}
								if($v['AccountsClientinvoicedetail']['accounts_tax_id'])
									{
										$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsClientinvoicedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.percent','AccountsTax.name')));
										$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']]=$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']]+($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
										$tax[$v['AccountsClientinvoicedetail']['accounts_tax_id']]['total']=$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']];
										$tax[$v['AccountsClientinvoicedetail']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
									}
								if($v['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
									{
										$taxgroup_new=$this->AccountsTaxgroup->find('first', array ('conditions'=>array('AccountsTaxgroup.id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname','AccountsTaxgroup.compounded')));
										
										if($taxgroup_new['AccountsTaxgroup']['compounded']=='Y')
											{
												
												$compound_tax=1;
												debug($compound_tax);
											}
										$defaulttaxdisplay[$v['AccountsClientinvoicedetail']['accounts_clientinvoice_id']]=$taxgroup_new['AccountsTaxgroup']['groupname'].'-'.$taxgroup_new['AccountsTaxgroup']['id'];
										$this->loadModel('AccountsTaxgroupmapping');
										$groupdet=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
										if($compound_tax==1)
											{
												
												$tax_compound_total=null;
												foreach($groupdet as $kdet=>$vdet)
													{
															
															$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdet['AccountsTaxgroupmapping']['accounts_tax_id']),'fields'=>array('AccountsTax.percent','AccountsTax.name')));
															if($tax_compound_total)
																{
																	
																	$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($tax_compound_total+$v['AccountsClientinvoicedetail']['totalcost']))/100;
																	debug($taxtotal);
																	$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
																	$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
																	$tax_compound_total=$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
																	
																}
															else
																{
																	
																	$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
																	$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
																	$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
																	$tax_compound_total=$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
																	
																}
															
													}
											}
										else
											{
												foreach($groupdet as $kdet=>$vdet)
													{
																	$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
																	$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
																	$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
																	
													}
												
											}
										
									}
								
							}
							debug($tax);
							if($unittype==1)
							{
								$unitlist=$this->BillingUnit->find('list',array('fields'=>array('BillingUnit.id','BillingUnit.name')));
							}
							if($servicetype==1)
							{
								$servicelist=$this->BrandsService->find('list',array('fields'=>array('BrandsService.id','BrandsService.service_name')));
							}
							if($packagetype==1)
							{
								$packagelist=$this->BrandsPackage->find('list',array('fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
							}
							//Tree For Taxes
						
							$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
							if($tax_groups_details){
									foreach ($tax_groups_details as $t1 => $t2) 
										{
											$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
											foreach($tax_mappings as $m1 => $m2)
												{
													$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
													foreach($taxname as $name1 => $name2)
														{
															$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
															$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
															$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																		
														}
												}
										}
							}else{
								$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
							}
							ksort($final_taxes);
							
							$this->set(compact('final_taxes'));
						
							$var = 0;		
						
							foreach($final_taxes as $f1 => $f2)
								{
										if(is_array($f2))
											{
												$name_exp = explode('-',$f1);
												$list[$f1] = $name_exp[0];
												foreach($f2 as $v1 => $v2)
													{
														debug($v2);
														foreach($v2 as $id1 => $name1)
															{
																//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																$list[$f1.$id1]='|--'.$name1;
															}
													}
									  		 }
							
										else
											{
												$list[$f1] = $f2;
											}
											
							
							
						}
						
						
						
						debug($list);
						$this->set(compact('list'));
						
						
						
						//Tree For Tax Types Ends Here
							
							$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
								foreach($currency as $key=>$val)
									{
										$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
									}
							
							
							
							$this->set(compact('month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist','defaulttaxdisplay'));
						}
						
						
						
						
					//	$instacarmaServices = $this->AccountsClientrecurringinvoice->InstacarmaService->find('list');
						
						$this->set(compact('clients', 'instacarmaServices', 'instacarmaBrands'));
				$fail=1;
				$this->set(compact('fail'));
				$this->Session->setFlash(__('<div class="flashMessageError">Frequency Cannot be empty</div>'));
				return;
			
		}
		if($client_id && $invoice_id)
		{
			$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
			$clients = $this->Client->find('list',array('conditions'=>array('Client.id'=>$client_id),'fields'=>array('Client.id','Client.client_companyname')));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoice_id)));
			$latefee=$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
			$notes=$accountsClientinvoice['AccountsClientinvoice']['client_notes'];
			$termandcondition=$accountsClientinvoice['AccountsClientinvoice']['client_termsandcondition'];
			$instacarmaBrands = $this->Brand->find('list',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id']),'fields'=>array('Brand.id','Brand.brandname')));
			$term=$accountsClientinvoice['AccountsClientinvoice']['paymentdue_term'];
			$invoiced_date=$accountsClientinvoice['AccountsClientinvoice']['invoiced_date'];
			$serviceStartdate=date('Y-M-d',strtotime($accountsClientinvoice['AccountsClientinvoice']['service_startdate']));
			$dueDate=date('Y-M-d',strtotime($accountsClientinvoice['AccountsClientinvoice']['due_date']));
			$currencyList=$this->Currency->find('list',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$currency_symbol=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$symbol=$currency_symbol['Currency']['symbol'];
			$this->set(compact('symbol'));
			
			
			$accountClientinvoiceDetail=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$invoice_id)));
		
		
		
		
			foreach($accountClientinvoiceDetail as $k=>$v)
			{
				if($v['AccountsClientinvoicedetail']['unit_type']=='unit')
				{
					$unittype=1;
				}
				if($v['AccountsClientinvoicedetail']['unit_type']=='service')
				{
					$servicetype=1;
				}
				if($v['AccountsClientinvoicedetail']['unit_type']=='package')
				{
					$packagetype=1;
				}
				if($v['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsClientinvoicedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.percent','AccountsTax.name')));
						$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']]=$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']]+($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
						$tax[$v['AccountsClientinvoicedetail']['accounts_tax_id']]['total']=$taxtotal[$v['AccountsClientinvoicedetail']['accounts_tax_id']];
						$tax[$v['AccountsClientinvoicedetail']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
					}
				if($v['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						$taxgroup_new=$this->AccountsTaxgroup->find('first', array ('conditions'=>array('AccountsTaxgroup.id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname','AccountsTaxgroup.compounded')));
						
						if($taxgroup_new['AccountsTaxgroup']['compounded']=='Y')
							{
								
								$compound_tax=1;
								debug($compound_tax);
							}
						$defaulttaxdisplay[$v['AccountsClientinvoicedetail']['accounts_clientinvoice_id']]=$taxgroup_new['AccountsTaxgroup']['groupname'].'-'.$taxgroup_new['AccountsTaxgroup']['id'];
						$this->loadModel('AccountsTaxgroupmapping');
						$groupdet=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						if($compound_tax==1)
							{
								
								$tax_compound_total=null;
								foreach($groupdet as $kdet=>$vdet)
									{
											
											$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdet['AccountsTaxgroupmapping']['accounts_tax_id']),'fields'=>array('AccountsTax.percent','AccountsTax.name')));
											if($tax_compound_total)
												{
													
													$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($tax_compound_total+$v['AccountsClientinvoicedetail']['totalcost']))/100;
													debug($taxtotal);
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
													$tax_compound_total=$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													
												}
											else
												{
													
													$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
													$tax_compound_total=$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													
												}
											
									}
							}
						else
							{
								foreach($groupdet as $kdet=>$vdet)
									{
													$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]=($taxtype['AccountsTax']['percent']*($v['AccountsClientinvoicedetail']['totalcost']))/100;
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxtotal[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']];
													$tax[$vdet['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxtype['AccountsTax']['name'];
													
									}
								
							}
						
					}
				
			}
			debug($tax);
			if($unittype==1)
			{
				$unitlist=$this->BillingUnit->find('list',array('fields'=>array('BillingUnit.id','BillingUnit.name')));
			}
			if($servicetype==1)
			{
				$servicelist=$this->BrandsService->find('list',array('fields'=>array('BrandsService.id','BrandsService.service_name')));
			}
			if($packagetype==1)
			{
				$packagelist=$this->BrandsPackage->find('list',array('fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
			}
			
			
			//Tree For Taxes
		
			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($tax_mappings as $m1 => $m2)
								{
									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
									foreach($taxname as $name1 => $name2)
										{
											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										}
								}
						}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
			ksort($final_taxes);
			
			$this->set(compact('final_taxes'));
		
			$var = 0;		
		
			foreach($final_taxes as $f1 => $f2)
				{
						if(is_array($f2))
							{
								$name_exp = explode('-',$f1);
								$list[$f1] = $name_exp[0];
								foreach($f2 as $v1 => $v2)
									{
										debug($v2);
										foreach($v2 as $id1 => $name1)
											{
												//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
												$list[$f1.$id1]='|--'.$name1;
											}
									}
					  		 }
			
						else
							{
								$list[$f1] = $f2;
							}
							
			
			
		}
		
		
		
		debug($list);
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
				foreach($currency as $key=>$val)
					{
						$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
					}
			
			
			
			$this->set(compact('month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist','defaulttaxdisplay'));
		}
		else
		{
			$clients = $this->Client->find('list',array('fields'=>array('Client.id','Client.client_companyname')));
		}
		
	//	$instacarmaServices = $this->AccountsClientrecurringinvoice->InstacarmaService->find('list');
		
		$this->set(compact('clients', 'instacarmaServices', 'instacarmaBrands'));
	}

/**
 * edit method
 *
 * @param string $id
 * @return void
 */
	public function edit($id = null,$invoiceid=null) {
		/*configure::write('debug',2);
		debug($this->data);*/
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('Currency');
		$this->loadModel('ClientDetail');
		$this->AccountsClientinvoicedetail->recursive=0;
		$this->AccountsClientinvoice->id = $id;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			
			
			/*****************************************************************************************************************************************
		 ***************************************************Validating client,term and invoice date*********************************************** 
		 *****************************************************************************************************************************************
		*/
			
			if((!$this->data['AccountsClientinvoice']['client']) && (!$this->data['client'])){
			
			$this->loadModel('ClientDetail');
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						//
						debug($vdetail['AccountsClientinvoicedetail']['accounts_tax_id']);
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
						
						debug($taxvalue);
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
							
							
						}
						else
						{	
							
							
							$taxableamount=0;
							
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								
								
								if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}
								
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
							
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
							}
						}
					}
				
			}
			debug($taxvalue);
			debug($servicetaxid);
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'],'Client.status'=>'Y')));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			//$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
		//	$taxtypes=$this->AccountsTax->find('list',array('fields'=>array('AccountsTax.id','AccountsTax.name')));
			
			
				//Tree For Taxes
		
			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
								foreach($tax_mappings as $m1 => $m2)
									{
										$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
										foreach($taxname as $name1 => $name2)
											{
												$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
												$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
												$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											}
									}
						}
					}else{
						$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
					}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
			
									else
										{
											$list[$f1] = $f2;
										}
							
			
			
							}
		
		
		
		$taxtypes=$list;
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$this->set(compact('currencyprint','brandName','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
			
			$this->Session->setFlash(__('<div class="flashMessageError">Select A Client.</div>',true));
			return;
		}
			if((!$this->data['AccountsClientinvoice']['term'])){
			
			$this->loadModel('ClientDetail');
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						//
						debug($vdetail['AccountsClientinvoicedetail']['accounts_tax_id']);
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
						
						debug($taxvalue);
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
							
							
						}
						else
						{	
							
							
							$taxableamount=0;
							
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								
								
								if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}
								
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
							
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
							}
						}
					}
				
			}
			debug($taxvalue);
			debug($servicetaxid);
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'],'Client.status'=>'Y')));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			//$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
		//	$taxtypes=$this->AccountsTax->find('list',array('fields'=>array('AccountsTax.id','AccountsTax.name')));
			
			
				//Tree For Taxes
		
			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($tax_mappings as $m1 => $m2)
								{
									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
									foreach($taxname as $name1 => $name2)
										{
											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																		
										}
								}
						}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
			
									else
										{
											$list[$f1] = $f2;
										}
							
			
			
							}
		
		
		
		$taxtypes=$list;
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$this->set(compact('currencyprint','brandName','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
			
			$this->Session->setFlash(__('<div class="flashMessageError">Select Term.</div>',true));
			return;
		}
		
		
		
		if((!$this->data['AccountsClientinvoice']['invoice_date'])){
			
			$this->loadModel('ClientDetail');
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						//
						debug($vdetail['AccountsClientinvoicedetail']['accounts_tax_id']);
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
						
						debug($taxvalue);
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
							
							
						}
						else
						{	
							
							
							$taxableamount=0;
							
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								
								
								if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}
								
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
							
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
							}
						}
					}
				
			}
			debug($taxvalue);
			debug($servicetaxid);
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'],'Client.status'=>'Y')));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			//$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
		//	$taxtypes=$this->AccountsTax->find('list',array('fields'=>array('AccountsTax.id','AccountsTax.name')));
			
			
				//Tree For Taxes
		
			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($tax_mappings as $m1 => $m2)
								{
									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
									foreach($taxname as $name1 => $name2)
										{
											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
															$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
															$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																		
										}
								}
						}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
			
									else
										{
											$list[$f1] = $f2;
										}
							
			
			
							}
		
		
		
		$taxtypes=$list;
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$this->set(compact('currencyprint','brandName','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
			
			$this->Session->setFlash(__('<div class="flashMessageError">Select A Invoice Date.</div>',true));
			return;
		}
		
		/*****************************************************************************************************************************************
		 ***************************************************End Of validation ******************************************************************** 
		 *****************************************************************************************************************************************
		*/
			
			
			
			
			
			$savearray->data=null;
			
			$savearray->data['AccountsClientinvoice']['id']=$id;
			if($this->data['AccountsClientinvoice']['client'])
				{
					$savearray->data['AccountsClientinvoice']['client_id']=$this->data['AccountsClientinvoice']['client'];
				}
			else
				{
					$savearray->data['AccountsClientinvoice']['client_id']=$this->data['client'];
				}
			if($this->data['AccountsClientinvoice']['invoiceDetail'])
				{
					$savearray->data['AccountsClientinvoice']['invoice_details'] = $this->data['AccountsClientinvoice']['invoiceDetail'];
				}
			$savearray->data['AccountsClientinvoice']['invoiced_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
			$savearray->data['AccountsClientinvoice']['service_startdate']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
			if($this->data['AccountsClientinvoice']['term']=='net10')
			{
				$due_date=date('Y-m-d', strtotime('+10 day', strtotime($this->data['AccountsClientinvoice']['service_startdate'])));
				$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d', strtotime('+10 day', strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
			}
			if($this->data['AccountsClientinvoice']['term']=='net15')
			{
				$due_date=date('Y-m-d', strtotime('+15 day', strtotime($this->data['AccountsClientinvoice']['service_startdate'])));
				$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d', strtotime('+15 day', strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
			}
			
			/*if($this->data['AccountsClientinvoice']['due_date1'])
			{
				$savearray->data['AccountsClientinvoice']['due_date1']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date1']));
			}
			if($this->data['due_date1'])
			{
				$savearray->data['AccountsClientinvoice']['due_date1']=date('Y-m-d',strtotime($this->data['due_date1']));
			}*/
			if($this->data['AccountsClientinvoice']['brand'])
			{
				$savearray->data['AccountsClientinvoice']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
			}
			if($this->data['brand'])
			{
				$savearray->data['AccountsClientinvoice']['brand_id']=$this->data['brand'];
			}
			$savearray->data['AccountsClientinvoice']['late_feedetails']=$this->data['AccountsClientinvoice']['latefee'];
			$savearray->data['AccountsClientinvoice']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
			
			foreach($this->data['total2'] as $k=>$v)
			{
				foreach($v as $kv=>$vv)
					{
						$totalinvoiceamount=$totalinvoiceamount+$this->numberconversion($vv);
					}
				
			}
			foreach($this->data['AccountsClientinvoice']['amount'] as $k=>$v)
			{
				$totalinvoiceamt=$totalinvoiceamt+$this->numberconversion($v);
			}
			foreach($this->data['service_tax'] as $ks=>$vs)
				{
					if(is_array($vs))
						{
							foreach($vs as $ks11=>$vs11)
								{
									$totalservicetax=$totalservicetax+$vs11;
								}
						}
					else
						{
								$totalservicetax=$totalservicetax+$vs;
						}
				}
			foreach($this->data['AccountsClientinvoice']['service_tax'] as $ld=>$vd)
				{
					$datatax=$datatax+$vd;
				}
			
			$savearray->data['AccountsClientinvoice']['invoice_amount']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
			$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
			debug($savearray->data['AccountsClientinvoice']['invoice_amount']);
			if($this->data['AccountsClientinvoice']['term']=='net10')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Net 10';
			}
			if($this->data['AccountsClientinvoice']['term']=='net15')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Net 15';
			}
			if($this->data['AccountsClientinvoice']['term']=='receipt')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Due On Receipt';
			}
			if($this->data['AccountsClientinvoice']['term']=='date')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Due On Specified Date';
			}
			
			//$savearray->data['AccountsClientinvoice']['status']=$this->data['AccountsClientinvoice'][''];
			$savearray->data['AccountsClientinvoice']['client_notes']=$this->data['AccountsClientinvoice']['notes'];
			$savearray->data['AccountsClientinvoice']['client_termsandcondition']=$this->data['AccountsClientinvoice']['t&c'];
		//	$savearray->data['AccountsClientinvoice']['']=$this->data['AccountsClientinvoice'][''];
		//	$savearray->data['AccountsClientinvoice']['']=$this->data['AccountsClientinvoice'][''];
			debug($savearray->data);
			if ($this->AccountsClientinvoice->save($savearray->data)) {
				
				$recurringinfo=$this->AccountsClientrecurringinvoice->find('first',array('conditions'=>array('AccountsClientrecurringinvoice.accounts_clientinvoice_id'=>$id)));
				
				$savearrayrecurring->data=null;
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['id']=$recurringinfo['AccountsClientrecurringinvoice']['id'];
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['client_id']=$this->data['AccountsClientinvoice']['client'];
				
				if($this->data['AccountsClientinvoice']['brand'])
					{
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
					}
				if($this->data['brand'])
					{
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['brand_id']=$this->data['brand'];
					}
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['invoice_amount']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
				if($this->data['AccountsClientinvoice']['currency'])
					{
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
					}
				else
					{
						$clientinfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['AccountsClientinvoice']['client'])));
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['currency_id']=$clientinfo['Client']['currency_id'];
					}
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['invoice_day']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
				if($this->data['AccountsClientinvoice']['due_date1'])
						{
							debug(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date1'])));
							$savearrayrecurring->data['AccountsClientrecurringinvoice']['end_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date1']));
						}
				/*if($this->data['due_date1'])
						{
							$savearrayrecurring->data['AccountsClientrecurringinvoice']['due_day']=date('Y-m-d',strtotime($this->data['due_date1']));
						}*/
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['valid']='Y';
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['start_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
				if($this->data['AccountsClientinvoice']['due_date1'])
						{
							$savearrayrecurring->data['AccountsClientrecurringinvoice']['end_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date1']));
						}
				if($this->data['due_date1'])
						{
							$savearrayrecurring->data['AccountsClientrecurringinvoice']['end_date']=date('Y-m-d',strtotime($this->data['due_date1']));
						}
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['accounts_clientinvoice_id']=$id;
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['status']=$recurringinfo['AccountsClientrecurringinvoice']['status'];
				if($this->data['AccountsClientinvoice']['term']=='net10')
					{
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['paymentdue_term']='Net 10';
					}
				if($this->data['AccountsClientinvoice']['term']=='net15')
					{
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['paymentdue_term']='Net 15';
					}
				if($this->data['AccountsClientinvoice']['term']=='receipt')
					{
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['paymentdue_term']='Due On Receipt';
					}
				if($this->data['AccountsClientinvoice']['term']=='date')
					{
						$savearrayrecurring->data['AccountsClientrecurringinvoice']['paymentdue_term']='Due On Specified Date';
					}
				
				
				
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['paymentdue_term']=$recurringinfo['AccountsClientrecurringinvoice']['id'];
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['frequency_type']=$this->data['AccountsClientinvoice']['frequency_type'];
				$savearrayrecurring->data['AccountsClientrecurringinvoice']['frequency']=$this->data['AccountsClientinvoice']['frequency'];
				$this->AccountsClientrecurringinvoice->save($savearrayrecurring->data);
				
				$payment_edit=$this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$id)));
				$savepayment->data=null;
				$savepayment->data['AccountsClientpaymentdetail']['id']=$payment_edit['AccountsClientpaymentdetail']['id'];
				$savepayment->data['AccountsClientpaymentdetail']['client_id']=$this->data['AccountsClientinvoice']['client'];
				$savepayment->data['AccountsClientpaymentdetail']['accounts_clientinvoice_id']=$payment_edit['AccountsClientpaymentdetail']['id'];
				$savepayment->data['AccountsClientpaymentdetail']['paid_amount']=$payment_edit['AccountsClientpaymentdetail']['paid_amount'];
				$savepayment->data['AccountsClientpaymentdetail']['paid']=$payment_edit['AccountsClientpaymentdetail']['paid'];
				$savepayment->data['AccountsClientpaymentdetail']['invoiced_amount']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
				if($payment_edit['AccountsClientpaymentdetail']['paid_amount'] == 0)
					{
						$savepayment->data['AccountsClientpaymentdetail']['due'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
					}
				else
					{
						$savepayment->data['AccountsClientpaymentdetail']['due']=($totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax)-($payment_edit['AccountsClientpaymentdetail']['id']);
					}
				
				$savepayment->data['AccountsClientpaymentdetail']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
				if($this->data['AccountsClientinvoice']['brand'])
					{
						$savepayment->data['AccountsClientpaymentdetail']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
					}
				if($this->data['brand'])
					{
						$savepayment->data['AccountsClientpaymentdetail']['brand_id']=$this->data['brand'];
					}
				
				
				
				
				$savepayment->data['AccountsClientpaymentdetail']['paymode']=$payment_edit['AccountsClientpaymentdetail']['paymode'];
				$savepayment->data['AccountsClientpaymentdetail']['received_date']=$payment_edit['AccountsClientpaymentdetail']['received_date'];
				$this->AccountsClientpaymentdetail->save($savepayment->data);
				
				foreach($this->data['AccountsClientinvoice']['detailid'] as $k=>$v)
				{
					$savearraydetails->data=null;
					
					$savearraydetails->data['AccountsClientinvoicedetail']['id']=$v;
					$savearraydetails->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$id;
					$savearraydetails->data['AccountsClientinvoicedetail']['unit_type']=$this->data['AccountsClientinvoice']['type'][$k];
					if($this->data['AccountsClientinvoice']['type'][$k]=='unit')
					{
						if($this->data['AccountsClientinvoice']['unit_name'][$k])
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['AccountsClientinvoice']['unit_name'][$k];
						}
						else
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['unit_name'][$k];
						}
						
					}
					if($this->data['AccountsClientinvoice']['type'][$k]=='service')
					{
						if($this->data['AccountsClientinvoice']['unit_name'][$k])
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['AccountsClientinvoice']['unit_name'][$k];
						}
						else
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['unit_name'][$k];
						}
						
					}
					if($this->data['AccountsClientinvoice']['type'][$k]=='package')
					{
						if($this->data['AccountsClientinvoice']['unit_name'][$k])
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['AccountsClientinvoice']['unit_name'][$k];
						}
						else
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['unit_name'][$k];
						}
						
					}
					
					
					
					$savearraydetails->data['AccountsClientinvoicedetail']['quantity']=$this->data['AccountsClientinvoice']['quantity_unit'.$k];
					
					if($this->data['AccountsClientinvoice']['amount'][$k])
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['totalcost']=$this->numberconversion($this->data['AccountsClientinvoice']['amount'][$k]);
					}
					else
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['totalcost']=$this->numberconversion($this->data['total'][$k]);
					}
					if($this->data['AccountsClientinvoice']['price_unit'.$k])
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['AccountsClientinvoice']['price_unit'.$k]);
					}
					else
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit'][$k]);
					}
					
					if($this->data['AccountsClientinvoice']['addtax_recurring'][$k])
					{
						debug($this->data['AccountsClientinvoice']['addtax_recurring'][$k]);
						$group=explode('-',$this->data['AccountsClientinvoice']['addtax_recurring'][$k]);
						debug($group);
						if($group[1])
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$group[1];
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']='0';
							}
						else
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']='0';
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['AccountsClientinvoice']['addtax_recurring'][$k];
							}
					}
					else
					{
						$group=explode('-',$this->data['addtax'][$k]);
						debug($group);
						if($group[1])
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$group[1];
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']='0';
							}
						else
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']='0';
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
							}
					}
					
					$savearraydetails->data['AccountsClientinvoicedetail']['description']=$this->data['AccountsClientinvoice']['description'][$k];
					$savearraydetails->data['AccountsClientinvoicedetail']['discount']=$this->data['AccountsClientinvoice']['discount'.$k];
					debug($savearraydetails->data);
					$this->AccountsClientinvoicedetail->save($savearraydetails->data);
					
				}
				if($this->data['unit_name'])
						 	{
						 		foreach($this->data['unit_name'] as $k=>$v)
						 		{
						 			$this->AccountsClientinvoicedetail->create();
						 			$save3->data=null;
						 			$last1=$id;
						 			$save3->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
						 			
						 			$save3->data['AccountsClientinvoicedetail']['unit_type']=$this->data['type'][$k];
						 			if($this->data['type'][$k]=='package')
								 		{
								 			
								 			$save3->data['AccountsClientinvoicedetail']['brands_package_id']=$v;
								 		}
						 			
						 			
								 		
								 	if($this->data['type'][$k]=='service')
								 		{
								 			
								 			$save3->data['AccountsClientinvoicedetail']['brands_service_id']=$v;
								 		}
								 	if($this->data['type'][$k]=='unit')
								 		{
								 			
								 			$save3->data['AccountsClientinvoicedetail']['billing_unit_id']=$v;
								 		}
						 			$save3->data['AccountsClientinvoicedetail']['quantity']=$this->data['quantity_unit'][$k];
						 		
						 		
						 		
						 				
								 	if($this->data['addtax'][$k])
						 				{
						 					$expnewaadtax=explode('-',$this->data['addtax'][$k]);
						 					if($expnewaadtax[1])
						 					{
						 						$save3->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$expnewaadtax[1];
						 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['addtax'][$k])));
						 					}
						 					else
						 					{
						 						$save3->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
						 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax'][$k])));
						 					}
						 					
						 			
						 				}
						 			if($this->data['discount'][$k])
						 				{
						 					$save3->data['AccountsClientinvoicedetail']['discount']=$this->data['discount'][$k];
						 					$discount[$k]=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))*$this->data['discount'][$k])/100;
						 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))-$discount[$k]);
						 				}
						 			else
						 				{
						 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k])));
						 				}
						 		
								$save3->data['AccountsClientinvoicedetail']['description']=$this->data['description'][$k];
						 		$save3->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
						 		$save3->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit'][$k]);
						 		debug($save3->data);
						 		$this->AccountsClientinvoicedetail->save($save3->data);
						 		}
						 	
						 	}
				$success=1;
				$this->Session->setFlash(__('<div class="flashMessageSuccess">The Invoice has been saved</div>'));
				$this->redirect(array('controller'=>'accounts_clientinvoices','action' => 'index'));
				$this->set(compact('success'));
			} else {
				$fail=1;
				$this->set(compact('fail'));
				$this->Session->setFlash(__('<div class="flashMessageError">The accounts clientinvoice could not be saved. Please, try again.</div>'));
			}
		} else {
			
			
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						//configure::write('debug',2);
						debug($vdetail['AccountsClientinvoicedetail']['accounts_tax_id']);
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
							
							
						}
						else
						{	
							
							
							$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];;
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								
								
								/*if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}*/
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
							}
						}
					}
				
			}
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'],'Client.status'=>'Y')));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			//$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
		//	$taxtypes=$this->AccountsTax->find('list',array('fields'=>array('AccountsTax.id','AccountsTax.name')));
			
			
				//Tree For Taxes
		
			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($tax_mappings as $m1 => $m2)
								{
									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
									foreach($taxname as $name1 => $name2)
										{
											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										}
								}
						}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												foreach($v2 as $id1 => $name1)
													{
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
			
									else
										{
											$list[$f1] = $f2;
										}
							
			
			
							}
		
		
		
		$taxtypes=$list;
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$recuringInvoice=$this->AccountsClientrecurringinvoice->find('first',array('conditions'=>array('AccountsClientrecurringinvoice.accounts_clientinvoice_id'=>$id)));
			$frequencyType['Day']='Day';
			$frequencyType['Week']='Week';
			$frequencyType['Month']='Month';
			$frequencyType['Year']='Year';
			$this->set(compact('brandName','currencyprint','recuringInvoice','frequencyType','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
		}	
	}
	
	
	public function addnew()
	{
		
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('Currency');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		$this->loadModel('Client');
		
		if($this->data)
		{
			if($this->data['AccountsClientinvoice']['service_startdate'])
				{
					if($this->data['AccountsClientinvoice']['invoice_date'])
						{
							if($this->data['client'] && $this->data['AccountsClientinvoice']['brand'])
								{
									if(($this->data['price_unit1'] || $this->data['price_unit2'])  && ($this->data['AccountsClientinvoice']['quantity_unit1']  || $this->data['AccountsClientinvoice']['quantity_unit2']) && ($this->data['updateunit_name1'] || $this->data['updateunit_name2']) )
										{
											
											if(is_numeric($this->data['AccountsClientinvoice']['frequency']) && ($this->data['AccountsClientinvoice']['frequency']!=null))
												{
													if($this->data['AccountsClientinvoice']['term']!=null)
														{
															if ($this->request->is('post')) 
																{
																//debug($this->data);
																$this->AccountsClientinvoice->create();
																$savearray->data=null;
																$savearray->data['AccountsClientinvoice']['client_id']=$this->data['client'];
																$savearray->data['AccountsClientinvoice']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
																$savearray->data['AccountsClientinvoice']['invoice_details']=$this->data['AccountsClientinvoice']['invoiceDetail'];
																$savearray->data['AccountsClientinvoice']['invoiced_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
																$savearray->data['AccountsClientinvoice']['service_startdate']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
																if($this->data['AccountsClientinvoice']['term']=="Net 10")
																{
																	$due_date=date('Y-m-d', strtotime('+10 day', strtotime($this->data['AccountsClientinvoice']['service_startdate'])));
																	$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d', strtotime('+10 day', strtotime($this->data['AccountsClientinvoice']['service_startdate'])));
																	
																}
																if($this->data['AccountsClientinvoice']['term']=="Net 15")
																{
																	$due_date=date('Y-m-d', strtotime('+15 day', strtotime($this->data['AccountsClientinvoice']['service_startdate'])));
																	$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d', strtotime('+15 day', strtotime($this->data['AccountsClientinvoice']['service_startdate'])));
																}
																
																
																$savearray->data['AccountsClientinvoice']['late_feedetails']=$this->data['AccountsClientinvoice']['latefee'];
																$savearray->data['AccountsClientinvoice']['paymentdue_term']=$this->data['AccountsClientinvoice']['term'];
																$savearray->data['AccountsClientinvoice']['recurring']='Y';
																$savearray->data['AccountsClientinvoice']['client_notes']=$this->data['AccountsClientinvoice']['notes'];
																$savearray->data['AccountsClientinvoice']['client_termsandcondition']=$this->data['AccountsClientinvoice']['t&c'];
																if($this->data['AccountsClientinvoice']['currency'])
																{
																	$savearray->data['AccountsClientinvoice']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
																}
																else
																{
																	$clientinfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
																	$savearray->data['AccountsClientinvoice']['currency_id']=$clientinfo['Client']['currency_id'];
																}
																
																
																
																
																//to decide the status of the invoice
																	$invoiced_date=strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
																	$due_date=strtotime(date('Y-m-d',strtotime($due_date)));
																
																	
																	$current_date=strtotime(date('Y-m-d'));
																	if($current_date<$due_date)
																	{
																		$status="open";
																		
																	}
																	if($current_date==$due_date)
																	{
																		$status="closed";
																		
																	}
																	if($current_date>$due_date)
																	{
																		$status="overdue";
																		
																	}
																	$savearray->data['AccountsClientinvoice']['status']=$status;
																//ends here
																//Calculation For final Amount and final discount
																	
																	
																	$payabletotal=$this->numberconversion($this->data['total'])+$this->numberconversion($this->data['total1']);
																	foreach($this->data['total2'] as $key1=>$val1)
																	{
																		foreach($val1 as $keyval1=>$vals1)
																		{
																			$payabletotal=$payabletotal+$this->numberconversion($vals1);
																		}
																		
																	}
																	$nettotal=$this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1'])+$this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']);
																	foreach($this->data['price_unit'] as $key=>$val)
																	{
																		$nettotal=$nettotal+($this->data['quantity_unit'][$key]*$this->numberconversion($val));
																	}
																	
																	$discountavailed=$nettotal-$payabletotal;
																	$discountpercent=($discountavailed/$nettotal)*100;
																	foreach($this->data['service_tax'] as $keyservice=>$valservice)
																	{
																		$alltaxessum=$alltaxessum+$valservice;
																	}
																	$finalamount=$payabletotal+$alltaxessum+$this->data['AccountsClientinvoice']['latefee'];
																	$savearray->data['AccountsClientinvoice']['invoice_amount']=$finalamount;
																	$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount']=$finalamount;
																	$savearray->data['AccountsClientinvoice']['discounts']=$discountpercent;
																//ends here
																
																if ($this->AccountsClientinvoice->save($savearray->data))
																	 {
																	 	/* Recurring Invoice Save Starts */
																	 	
																	 	$this->AccountsClientrecurringinvoice->create();
																		$saveinvoice->data=null;
																	 	$last1=$this->AccountsClientinvoice->getLastInsertID();
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['client_id'] = $this->data['client'];
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['brand_id'] = $this->data['AccountsClientinvoice']['brand'];
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['invoice_amount'] = $finalamount;
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['currency_id'] = $this->data['AccountsClientinvoice']['currency'];
																	 	
																	 	if($this->data['AccountsClientinvoice']['frequency_type']=='Week')
																	 		{
																	 			$saveinvoice->data['AccountsClientrecurringinvoice']['next_invoice_day'] =  date('Y-m-d', strtotime('+'.$this->data['AccountsClientinvoice']['frequency'].' week', strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
																	 		}
																	 	if($this->data['AccountsClientinvoice']['frequency_type']=='Month')
																	 		{
																	 			$saveinvoice->data['AccountsClientrecurringinvoice']['next_invoice_day'] =  date('Y-m-d', strtotime('+'.$this->data['AccountsClientinvoice']['frequency'].' month', strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
																	 		}
																	 	if($this->data['AccountsClientinvoice']['frequency_type']=='Year')
																	 		{
																	 			$saveinvoice->data['AccountsClientrecurringinvoice']['next_invoice_day'] =  date('Y-m-d', strtotime('+'.$this->data['AccountsClientinvoice']['frequency'].' year', strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
																	 		}
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['last_invoice_date'] =  date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
																	 	
																	 	
																	 
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['valid'] = 'Y';
																	 	
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['start_date'] = date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
																	 	if($this->data['AccountsClientinvoice']['due_date'])
																	 		{
																	 			$saveinvoice->data['AccountsClientrecurringinvoice']['end_date'] = date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date']));
																	 		}
																	 	
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['accounts_clientinvoice_id'] = $last1;
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['status'] = 'active';
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['paymentdue_term'] = $this->data['AccountsClientinvoice']['term'];
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['frequency_type'] = $this->data['AccountsClientinvoice']['frequency_type'];
																	 	$saveinvoice->data['AccountsClientrecurringinvoice']['frequency'] = $this->data['AccountsClientinvoice']['frequency'];
																	 	$this->AccountsClientrecurringinvoice->save($saveinvoice->data);
																	 	
																	 	/* Recurring Invoice Save Ends */
																	 	
																	 	
																	 	
																	 	/**************************************************************************************************************
																	 	 **********************************Spot Conversion Logic ****************************************************** 
																	 	***************************************************************************************************************
																	 	*/
																	 	
																	 	$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
																	 	if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
																			{
																				$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
																				$from=$fromcur['Currency']['name'];
																				$to=$billingcurrency['Currency']['name'];
																				
																				$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
																				$handle = @fopen($url, 'r');
											 									debug($handle);
																				if ($handle) 
																					{
											    											$result = fgets($handle, 4096);
											    											fclose($handle);
																					}
																				
																				$allData = explode(',',$result);  //Get all the contents to an array 
																				
																				$ledgeramount=$finalamount*$allData['1'];
																				$symbol=$fromcur['Currency']['symbol'];
																				$this->set(compact('symbol'));
																				
																			}
																			else
																			{
																				$ledgeramount=$finalamount;
																			}
																	 	
																	 	/**************************************************************************************************************
																	 	 **********************************Spot Conversion Logic ****************************************************** 
																	 	***************************************************************************************************************
																	 	*/
																	 	
																	 	
																	 	$last1=$this->AccountsClientinvoice->getLastInsertID();
																	 	$this->AccountsLedger->create();
																	 	$ledger->data=null;
																	 	$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
																	 	$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
																	 	
																	 	if(!empty($accountbal)){
																	 		$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
																	 	}else{
																	 		$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
																	 	}
																	 	$ledger->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
																	 	$ledger->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
																	 	$ledger->data['AccountsLedger']['payment_description']='Credit Amount';
																		$ledger->data['AccountsLedger']['is_neutral']='Y';
																		$ledger->data['AccountsLedger']['cheque_no']='Amount Credited For Invoice #'.$last1;
																		$ledger->data['AccountsLedger']['accounts_clientinvoice_id']=$last1;
																		$ledger->data['AccountsLedger']['credit']=$ledgeramount;
																		debug($ledger->data);
																	 if($this->AccountsLedger->save($ledger->data))
																	 {
																	 	$ledgerLastEntry = $this->AccountsLedger->getLastInsertID();
																		$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry;
																		$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
																		$this->AccountsLedger->save($ledgerPay->data);
																		/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
																		$closingBalance->data = null;
																		$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
																		$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance+$ledgeramount;
																		$this->AccountsAccount->save($closingBalance->data);
																	
																	 	$this->AccountsLedger->create();
																	 	$ledgerincome->data=null;
																	 	$ledgerincome->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
																	 	$accounts_accounts_income=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Sales')));
																	 	$accountbal_income = $accounts_accounts['AccountsAccount']['closing_balance'];
																	 	if(!empty($accountbal_income)){
																	 		$bbaalance_income = $accounts_accounts['AccountsAccount']['closing_balance'];
																	 	}else{
																	 		$bbaalance_income = $accounts_accounts_income['AccountsAccount']['opening_balance'];
																	 	}
																	 	$ledgerincome->data['AccountsLedger']['accounts_account_id']=$accounts_accounts_income['AccountsAccount']['id'];
																	 	$ledgerincome->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
																	 	$ledgerincome->data['AccountsLedger']['payment_description']='Amount Debited For Invoice '.$last1;
																	 	$ledgerincome->data['AccountsLedger']['debit']=$ledgeramount;
																	 	$ledgerincome->data['AccountsLedger']['is_neutral']='Y';
																		$ledgerincome->data['AccountsLedger']['cheque_no']='Amount Debited For Invoice #'.$last1;
																		$ledgerincome->data['AccountsLedger']['accounts_clientinvoice_id']=$last1;
																	 	if($this->AccountsLedger->save($ledgerincome->data))
																	 		{
																	 			/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
																				$closingBalance->data = null;
																				$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
																				$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramount;
																				$this->AccountsAccount->save($closingBalance->data);
																	 		}
																	 }
																	 
																	 		
																	 	
																	 	
																	 	
																	 	
																	 	if($this->data['updateunit_name1'])
																	 	{
																	 		debug($this->data);
																		 		$this->AccountsClientinvoicedetail->create();
																		 		$save1->data=null;
																		 		$save1->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
																	 		
																	 		
																	 		
																	 			$save1->data['AccountsClientinvoicedetail']['unit_type']=$this->data['AccountsClientinvoice']['type1'];
																	 			if($this->data['AccountsClientinvoice']['type1']=='package')
																			 		{
																			 			$save1->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['updateunit_name1'];
																			 		}
																	 			
																	 			if($this->data['AccountsClientinvoice']['type1']=='service')
																			 		{
																			 		
																			 			$save1->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['updateunit_name1'];
																			 		}
																			 	if($this->data['AccountsClientinvoice']['type1']=='unit')
																			 		{
																			 			$save1->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['updateunit_name1'];
																			 		}
																			 		
																	 		$save1->data['AccountsClientinvoicedetail']['quantity']=$this->data['AccountsClientinvoice']['quantity_unit1'];
																	 		
																	 		if($this->data['AccountsClientinvoice']['addtax1'])
																	 		{
																	 			$explodedata=explode('-',$this->data['AccountsClientinvoice']['addtax1']);
																	 			if($explodedata[1])
																	 			{
																	 				$save1->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$explodedata[1];
																	 			}
																	 			else
																	 			{
																	 				$save1->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['AccountsClientinvoice']['addtax1'];
																	 				$taxvalue1=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax1'])));
																	 			}
																	 			
																	 		  }
																	 		if($this->data['AccountsClientinvoice']['discount1'])
																			 		{
																			 			$save1->data['AccountsClientinvoicedetail']['discount']=$this->data['AccountsClientinvoice']['discount1'];
																			 			$discountone=(($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']))*$this->data['AccountsClientinvoice']['discount1'])/100;
																			 			$save1->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']))-$discountone);
																			 		}
																			 		else
																			 		{
																			 			$save1->data['AccountsClientinvoicedetail']['totalcost']=($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']));
																			 		}
																	 		$save1->data['AccountsClientinvoicedetail']['description']=$this->data['AccountsClientinvoice']['description1'];
																	 		$save1->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit1']);
																	 		$this->AccountsClientinvoicedetail->save($save1->data,array('validate'=>false));
																	 	  }
																	 	
																	 	
																	 	
																	 	if($this->data['updateunit_name2'])
																	 	{
																	 		$this->AccountsClientinvoicedetail->create();
																	 		$save2->data=null;
																	 		$save2->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
																	 			$save2->data['AccountsClientinvoicedetail']['unit_type']=$this->data['AccountsClientinvoice']['type2'];
																	 			if($this->data['AccountsClientinvoice']['type2']=='package')
																			 		{
																			 			
																			 			$save2->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['updateunit_name2'];
																			 		}
																	 			
																	 			
																			 		
																			 	if($this->data['AccountsClientinvoice']['type2']=='service')
																			 		{
																			 			
																			 			$save2->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['updateunit_name2'];
																			 		}
																			 	if($this->data['AccountsClientinvoice']['type2']=='unit')
																			 		{
																			 			
																			 			$save2->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['updateunit_name2'];
																			 		}
																			 		
																			 		
																			 		$save2->data['AccountsClientinvoicedetail']['quantity']=$this->data['AccountsClientinvoice']['quantity_unit2'];
																			 		
																			 	if($this->data['AccountsClientinvoice']['addtax2'])
																	 				{
																	 					$explodedata2=explode('-',$this->data['AccountsClientinvoice']['addtax2']);
																	 					if($explodedata2[1])
																	 					{
																	 						$save2->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$explodedata2[1];
																	 					}
																	 					else
																	 					{
																	 						$save2->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['AccountsClientinvoice']['addtax2'];
																	 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax2'])));
																	 					}
																	 					
																	 			
																	 				}
																	 			if($this->data['AccountsClientinvoice']['discount2'])
																	 				{
																	 					$save2->data['AccountsClientinvoicedetail']['discount']=$this->data['AccountsClientinvoice']['discount2'];
																	 					$discounttwo=(($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']))*$this->data['AccountsClientinvoice']['discount2'])/100;
																	 					$save2->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']))-$discounttwo);
																	 				}
																	 			else
																	 				{
																	 					$save2->data['AccountsClientinvoicedetail']['totalcost']=($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']));
																	 				}
																	 					$save2->data['AccountsClientinvoicedetail']['description']=$this->data['AccountsClientinvoice']['description2'];
																	 					$save2->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit2']);
																	 					$this->AccountsClientinvoicedetail->save($save2->data,array('validate'=>false));
																	 	}
																	 	
																	 	
																	 	if($this->data['unit_name'])
																	 	{   
																	 		foreach($this->data['unit_name'] as $k=>$v)
																	 		{
																	 			$this->AccountsClientinvoicedetail->create();
																	 			$save3->data=null;
																	 			$save3->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
																	 			
																	 			$save3->data['AccountsClientinvoicedetail']['unit_type']=$this->data['type'][$k];
																	 			if($this->data['type'][$k]=='package')
																			 		{
																			 			
																			 			$save3->data['AccountsClientinvoicedetail']['brands_package_id']=$v;
																			 		}
																	 				
																			 	if($this->data['type'][$k]=='service')
																			 		{
																			 			
																			 			$save3->data['AccountsClientinvoicedetail']['brands_service_id']=$v;
																			 		}
																			 	if($this->data['type'][$k]=='unit')
																			 		{
																			 			
																			 			$save3->data['AccountsClientinvoicedetail']['billing_unit_id']=$v;
																			 		}
																	 			$save3->data['AccountsClientinvoicedetail']['quantity']=$this->data['quantity_unit'][$k];
																	 		
																	 		
																	 		
																	 				
																			 	if($this->data['addtax'][$k])
																	 				{
																	 					$eplodedata3=explode('-',$this->data['addtax'][$k]);
																	 					if($eplodedata3[1])
																	 					{
																	 						$save3->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$eplodedata3[1];
																	 					}
																	 					else
																	 					{
																	 						$save3->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
																	 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax'][$k])));
																	 					}
																	 					
																	 			
																	 				}
																	 			if($this->data['discount'][$k])
																	 				{
																	 					$save3->data['AccountsClientinvoicedetail']['discount']=$this->data['discount'][$k];
																	 					$discount[$k]=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))*$this->data['discount'][$k])/100;
																	 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))-$discount[$k]);
																	 				}
																	 			else
																	 				{
																	 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k])));
																	 				}
																	 		
																			$save3->data['AccountsClientinvoicedetail']['description']=$this->data['description'][$k];
																	 		$save3->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit'][$k]);
																	 		$this->AccountsClientinvoicedetail->save($save3->data,array('validate'=>false));
																	 		}
																	 	}
																		$this->Session->setFlash(__('<div class="flashMessageSuccess"> Invoice #'.$last1.' has been added as recurring invoice</div>'));
																		$this->redirect(array('controller'=>'accounts_clientinvoices','action' => 'index'));
																		$success=1;
																		$this->set(compact('success'));
																	 } 
																else 
																	{
																		$fail=1;
																		$this->set(compact('fail'));
																		$this->Session->setFlash(__('<div class="flashMessageError"> Add Some Item.</div>'));
																		$this->loadModel('Client');
																		$this->loadModel('AccountsTax');
																		$this->loadModel('Brand');
																		$this->loadModel('Company');
																		$this->loadModel('Currency');
																		$this->loadModel('AccountsTaxgroup');
																		$this->loadModel('AccountsTaxgroupmapping');
																					//Recurring Details
																					
																					$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
																					$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																					$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																					$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
																					$this->set(compact('allclients'));
																					
																					
																					
																					//Recurring Details Ends 
																		
																					//Tree For Taxes
																				
																					$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																					if($tax_groups_details){
																						foreach ($tax_groups_details as $t1 => $t2) 
																							{
																								$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																								foreach($tax_mappings as $m1 => $m2)
																									{
																										$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																										foreach($taxname as $name1 => $name2)
																											{
																												$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																												$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																												$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																		
																											}
																									}
																							}
																					}else{
																						$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																					}
																						ksort($final_taxes);
																					
																						$this->set(compact('final_taxes'));
																							$var = 0;		
																				
																							foreach($final_taxes as $f1 => $f2)
																									{
																										if(is_array($f2))
																											{
																												$name_exp = explode('-',$f1);
																													$list[$f1] = $name_exp[0];
																												foreach($f2 as $v1 => $v2)
																													{
																														debug($v2);
																														foreach($v2 as $id1 => $name1)
																															{
																																//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																																$list[$f1.$id1]='|--'.$name1;
																															}
																													}
																							 		 		 }
																					
																											else
																												{
																													$list[$f1] = $f2;
																												}
																									
																					
																					
																									}
																				
																				
																				
																				
																				$this->set(compact('list'));
																				
																				
																				
																				//Tree For Tax Types Ends Here
																				$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																					foreach($currency as $key=>$val)
																						{
																							$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																						}
																					$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																					$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																					$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																					$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																					$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));	
																					
																					
																				
																		$fail=1;
																		$this->Session->setFlash(__('<div class="flashMessageError">The accounts clientinvoice could not be saved. Please, try again.</div>',true));
																		$this->set(compact('fail'));
																		return;
																	}
																}
														}
													else
														{
																$fail=1;
																$this->set(compact('fail'));
																$this->Session->setFlash(__('<div class="flashMessageError"> Select a term for payment</div>'));
																$this->loadModel('Client');
																$this->loadModel('AccountsTax');
																$this->loadModel('Brand');
																$this->loadModel('Company');
																$this->loadModel('Currency');
																$this->loadModel('AccountsTaxgroup');
																$this->loadModel('AccountsTaxgroupmapping');
																			//Recurring Details
																			
																		$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
																			$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																			$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																			$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
																			$this->set(compact('allclients'));
																			
																			
																			
																			//Recurring Details Ends 
																
																			//Tree For Taxes
																		
																			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																			if($tax_groups_details){
																					foreach ($tax_groups_details as $t1 => $t2) 
																						{
																							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																							foreach($tax_mappings as $m1 => $m2)
																								{
																									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																									foreach($taxname as $name1 => $name2)
																										{
																											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																											$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																											$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																														
																										}
																								}
																						}
																			}else{
																				$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																			}
																				ksort($final_taxes);
																			
																				$this->set(compact('final_taxes'));
																					$var = 0;		
																		
																					foreach($final_taxes as $f1 => $f2)
																							{
																								if(is_array($f2))
																									{
																										$name_exp = explode('-',$f1);
																											$list[$f1] = $name_exp[0];
																										foreach($f2 as $v1 => $v2)
																											{
																												debug($v2);
																												foreach($v2 as $id1 => $name1)
																													{
																														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																														$list[$f1.$id1]='|--'.$name1;
																													}
																											}
																					 		 		 }
																			
																									else
																										{
																											$list[$f1] = $f2;
																										}
																							
																			
																			
																							}
																		
																		
																		
																		
																		$this->set(compact('list'));
																		
																		
																		
																		//Tree For Tax Types Ends Here
																		$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																			foreach($currency as $key=>$val)
																				{
																					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																				}
																			$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																			$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																			$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																			$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																			$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));	
																			
																			
																			
																		
																
																return;
														}
													
													
												}
											else
												{
													$fail=1;
													$this->set(compact('fail'));
													$this->Session->setFlash(__('<div class="flashMessageError"> Enter the frequency for the invoice.</div>'));
													$this->loadModel('Client');
													$this->loadModel('AccountsTax');
													$this->loadModel('Brand');
													$this->loadModel('Company');
													$this->loadModel('Currency');
													$this->loadModel('AccountsTaxgroup');
													$this->loadModel('AccountsTaxgroupmapping');
																//Recurring Details
																
																$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
																$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
																$this->set(compact('allclients'));
																
																
																
																//Recurring Details Ends 
													
																//Tree For Taxes
															
																$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																	if($tax_groups_details){
																			foreach ($tax_groups_details as $t1 => $t2) 
																				{
																					$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																					foreach($tax_mappings as $m1 => $m2)
																						{
																							$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																							foreach($taxname as $name1 => $name2)
																								{
																									$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																									$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																									$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																												
																								}
																						}
																				}
																	}else{
																		$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																	}
																	ksort($final_taxes);
																
																	$this->set(compact('final_taxes'));
																		$var = 0;		
															
																		foreach($final_taxes as $f1 => $f2)
																				{
																					if(is_array($f2))
																						{
																							$name_exp = explode('-',$f1);
																								$list[$f1] = $name_exp[0];
																							foreach($f2 as $v1 => $v2)
																								{
																									debug($v2);
																									foreach($v2 as $id1 => $name1)
																										{
																											//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																											$list[$f1.$id1]='|--'.$name1;
																										}
																								}
																		 		 		 }
																
																						else
																							{
																								$list[$f1] = $f2;
																							}
																				
																
																
																				}
															
															
															
															
															$this->set(compact('list'));
															
															
															
															//Tree For Tax Types Ends Here
															$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																foreach($currency as $key=>$val)
																	{
																		$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																	}
																$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));	
																
																
																
															
													
													return;
												}
											
										}
									else
									{	
										
										$fail=1;
										$this->set(compact('fail'));
										$this->Session->setFlash(__('<div class="flashMessageError"> Add Some Item.</div>'));
										$this->loadModel('Client');
										$this->loadModel('AccountsTax');
										$this->loadModel('Brand');
										$this->loadModel('Company');
										$this->loadModel('Currency');
										$this->loadModel('AccountsTaxgroup');
										$this->loadModel('AccountsTaxgroupmapping');
													//Recurring Details
													
													$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
													$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
													$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
													$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
													$this->set(compact('allclients'));
													
													
													
													//Recurring Details Ends 
										
													//Tree For Taxes
												
													$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
													if($tax_groups_details){
															foreach ($tax_groups_details as $t1 => $t2) 
																{
																	$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																	foreach($tax_mappings as $m1 => $m2)
																		{
																			$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																			foreach($taxname as $name1 => $name2)
																				{
																					$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																					$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																					$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																								
																				}
																		}
																}
													}else{
														$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
													}
														ksort($final_taxes);
													
														$this->set(compact('final_taxes'));
															$var = 0;		
												
															foreach($final_taxes as $f1 => $f2)
																	{
																		if(is_array($f2))
																			{
																				$name_exp = explode('-',$f1);
																					$list[$f1] = $name_exp[0];
																				foreach($f2 as $v1 => $v2)
																					{
																						debug($v2);
																						foreach($v2 as $id1 => $name1)
																							{
																								//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																								$list[$f1.$id1]='|--'.$name1;
																							}
																					}
															 		 		 }
													
																			else
																				{
																					$list[$f1] = $f2;
																				}
																	
													
													
																	}
												
												
												
												
												$this->set(compact('list'));
												
												
												
												//Tree For Tax Types Ends Here
												$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
													foreach($currency as $key=>$val)
														{
															$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
														}
													$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
													$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
													$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
													$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
													$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));	
													
													
													
												
										$this->Session->setFlash(__('<div class="flashMessageError">Select some resources.Invoice cannot be Null</div>',true));
										return;
									}
								
							
										
									}
									else
										{
											$error=1;
											$this->set(compact('error'));
											$this->Session->setFlash(__('<div class="flashMessageError"> Select a client.</div>'));
											$this->loadModel('Client');
													$this->loadModel('AccountsTax');
													$this->loadModel('Brand');
													$this->loadModel('Company');
													$this->loadModel('Currency');
													$this->loadModel('AccountsTaxgroup');
													$this->loadModel('AccountsTaxgroupmapping');
													
													//Recurring Details
													
													$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
													$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
													$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
													$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
													$this->set(compact('allclients'));
													
													
													
													//Recurring Details Ends 
													//Tree For Taxes
												
													$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
													if($tax_groups_details){
															foreach ($tax_groups_details as $t1 => $t2) 
																{
																	$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																	foreach($tax_mappings as $m1 => $m2)
																		{
																			$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																			foreach($taxname as $name1 => $name2)
																				{
																					$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																					$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																					$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																								
																				}
																		}
																}
													}else{
														$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
													}
														ksort($final_taxes);
													
														$this->set(compact('final_taxes'));
												
														$var = 0;		
												
															foreach($final_taxes as $f1 => $f2)
																	{
																		if(is_array($f2))
																			{
																				$name_exp = explode('-',$f1);
																					$list[$f1] = $name_exp[0];
																				foreach($f2 as $v1 => $v2)
																					{
																						debug($v2);
																						foreach($v2 as $id1 => $name1)
																							{
																								//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																								$list[$f1.$id1]='|--'.$name1;
																							}
																					}
															 		 		 }
													
																			else
																				{
																					$list[$f1] = $f2;
																				}
																	
													
													
																	}
												
												
												
												
												$this->set(compact('list'));
												
												
												
												//Tree For Tax Types Ends Here
													
													
													
													
													$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
													foreach($currency as $key=>$val)
														{
															$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
														}
													$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
													$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
													$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
													$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
													$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));
										}
						}
					else
						{
							$error=1;
							$this->set(compact('error'));
							$this->Session->setFlash(__('<div class="flashMessageError"> Enter a Invoice Date</div>'));
							$this->loadModel('Client');
							$this->loadModel('AccountsTaxgroup');
							$this->loadModel('AccountsTaxgroupmapping');
							$this->loadModel('AccountsTax');
							$this->loadModel('Currency');
							$this->loadModel('Brand');
							$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
							$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
							$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
								//Tree For Taxes
							
								$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
									if($tax_groups_details){
											foreach ($tax_groups_details as $t1 => $t2) 
												{
													$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
													foreach($tax_mappings as $m1 => $m2)
														{
															$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
															foreach($taxname as $name1 => $name2)
																{
																	$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																	$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																	$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																				
																}
														}
												}
									}else{
										$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
									}
								ksort($final_taxes);
								
								$this->set(compact('final_taxes'));
							
								$var = 0;		
							
								foreach($final_taxes as $f1 => $f2)
									{
											if(is_array($f2))
												{
													$name_exp = explode('-',$f1);
													$list[$f1] = $name_exp[0];
													foreach($f2 as $v1 => $v2)
														{
															
															foreach($v2 as $id1 => $name1)
																{
																	//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																	$list[$f1.$id1]='|--'.$name1;
																}
														}
										  		 }
								
											else
												{
													$list[$f1] = $f2;
												}
												
								
								
							}
							
							
							
							
							$this->set(compact('list'));
							
							
							
							//Tree For Tax Types Ends Here
								
								$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
									foreach($currency as $key=>$val)
										{
											$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
										}
								
								
								
								$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
							
							$this->set(compact('allclients'));
						}
				}
			else
				{
					$error=1;
							$this->set(compact('error'));
							$this->Session->setFlash(__('<div class="flashMessageError"> Enter a Service Start Date</div>'));
							$this->loadModel('Client');
							$this->loadModel('AccountsTaxgroup');
							$this->loadModel('AccountsTaxgroupmapping');
							$this->loadModel('AccountsTax');
							$this->loadModel('Currency');
							$this->loadModel('Brand');
							$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
							$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
							$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
								//Tree For Taxes
							
								$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
								if($tax_groups_details){
										foreach ($tax_groups_details as $t1 => $t2) 
											{
												$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
												foreach($tax_mappings as $m1 => $m2)
													{
														$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
														foreach($taxname as $name1 => $name2)
															{
																$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
															}
													}
											}
								}else{
									$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
								}
								ksort($final_taxes);
								
								$this->set(compact('final_taxes'));
							
								$var = 0;		
							
								foreach($final_taxes as $f1 => $f2)
									{
											if(is_array($f2))
												{
													$name_exp = explode('-',$f1);
													$list[$f1] = $name_exp[0];
													foreach($f2 as $v1 => $v2)
														{
															
															foreach($v2 as $id1 => $name1)
																{
																	//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																	$list[$f1.$id1]='|--'.$name1;
																}
														}
										  		 }
								
											else
												{
													$list[$f1] = $f2;
												}
												
								
								
							}
							
							
							
							
							$this->set(compact('list'));
							
							
							
							//Tree For Tax Types Ends Here
								
								$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
									foreach($currency as $key=>$val)
										{
											$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
										}
								
								
								
								$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
							
							$this->set(compact('allclients'));
				}		
			
			
			
		}
		
		
		
		
		
		
		
		
		else
			{
				$this->loadModel('Client');
				$this->loadModel('AccountsTaxgroup');
				$this->loadModel('AccountsTaxgroupmapping');
				$this->loadModel('AccountsTax');
				$this->loadModel('Currency');
				$this->loadModel('Brand');
				$frequencyType=array('Week'=>'WEEK','Month'=>'MONTH','Year'=>'YEAR');
				$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
				$instacarmaBrands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
					//Tree For Taxes
				
					$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
							if($tax_groups_details){
									foreach ($tax_groups_details as $t1 => $t2) 
										{
											$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
											foreach($tax_mappings as $m1 => $m2)
												{
													$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
													foreach($taxname as $name1 => $name2)
														{
															$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
															$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
															$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																		
														}
												}
										}
							}else{
								$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
							}
					ksort($final_taxes);
					
					$this->set(compact('final_taxes'));
				
					$var = 0;		
				
					foreach($final_taxes as $f1 => $f2)
						{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
										$list[$f1] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
							  		 }
					
								else
									{
										$list[$f1] = $f2;
									}
									
					
					
				}
				
				
				
				
				$this->set(compact('list'));
				
				
				
				//Tree For Tax Types Ends Here
					
					$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
						foreach($currency as $key=>$val)
							{
								$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
							}
					
					
					
					$this->set(compact('instacarmaBrands','month','clients','instacarmaBrands','term','serviceStartdate','dueDate','currencyList','client_id','invoice_id','accountsClientinvoice','frequencyType','accountClientinvoiceDetail','unitlist','servicelist','packagelist','final_taxes','latefee','tax','notes','termandcondition','invoiced_date','currencylist'));
				
				$this->set(compact('allclients'));
			}
	}
	
	public function change_status($recurringInvoiceId = null){
		$saveStatus->data = null;
		$saveStatus->data['AccountsClientrecurringinvoice']['id'] = $recurringInvoiceId;
		$saveStatus->data['AccountsClientrecurringinvoice']['status'] = $this->data['DeleteInvoiceData']['status'][$recurringInvoiceId];
		if($this->AccountsClientrecurringinvoice->save($saveStatus->data)){
			$this->Session->setFlash(__('<div class="flashMessageSuccess"> Status of Invoice #'.$recurringInvoiceId.' has been changed to '.$this->data['DeleteInvoiceData']['status'][$recurringInvoiceId].'</div>'));
			$this->redirect(array('controller'=>'accounts_clientrecurringinvoices','action' => 'index'));
		}
	}
	public function deleteRecurringInvoice($id = null) {
		configure::write('debug',2);
		debug($this->data);
	}

/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		$this->autoRender = false;
		configure::write('debug',2);
		debug($this->data);
		
		/*if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->AccountsClientrecurringinvoice->id = $id;
		if (!$this->AccountsClientrecurringinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientrecurringinvoice'));
		}
		if ($this->AccountsClientrecurringinvoice->delete()) {
			$this->Session->setFlash(__('Accounts clientrecurringinvoice deleted'));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Accounts clientrecurringinvoice was not deleted'));
		$this->redirect(array('action' => 'index'));*/
	}
	
	public function numberconversion($data=null)
	{
		//$data='10,000.50';
		$numz=explode('.',$data);
		$base=explode(',',$numz[0]);
		$i=0;
		while($base[$i])
		{
			$i++;
		}
		
		$kbc=2*$i-1;
		$num=0;
		for($j=0;$j<=$i-1;$j++)
			{
				$mul=1;
				if($kbc != 1)
					{
						for($pow=1;$pow<=$kbc;$pow++)
							{
								$mul=$mul*10;
							}
					}
				else
					{
						$mul=$mul*1;
					}
				$num=$num+$base[$j]*$mul;
				$kbc=$kbc-2;
				
				
			}
			$dec=$numz[1]/100;
			
			$num1=$num+$dec;
		
		return $num1;
	}
	
	public function deleteinvoicedetails($id = null,$invoiceid=null,$recurringinvoiceid=null) {
		//configure::write('debug',2);
		debug($id);
		$this->loadModel('AccountsClientinvoicedetail');
		/*if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}*/
		$this->AccountsClientinvoicedetail->id = $id;
		if (!$this->AccountsClientinvoicedetail->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoicedetail'));
		}
		if ($this->AccountsClientinvoicedetail->delete()) {
			$this->Session->setFlash(__('Accounts clientinvoicedetail deleted'));
			$this->redirect(array('controller'=>'accounts_clientrecurringinvoices','action' => 'edit',$recurringinvoiceid,$invoiceid));
		}
		$this->Session->setFlash(__('Accounts clientinvoicedetail was not deleted'));
		//$this->redirect(array('controller'=>'accounts_clientinvoices','action' => 'edit',$invoiceid));
	}
	
}
