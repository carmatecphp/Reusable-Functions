<?php
App::uses('AppController', 'Controller');
/**
 * ClientContacts Controller
 *
 * @property ClientContact $ClientContact
 * @property AclComponent $Acl
 * @property SecurityComponent $Security
 * @property RequestHandlerComponent $RequestHandler
 */
class ClientContactsController extends AppController {

/**
 * Helpers
 *
 * @var array
 */
	var $helpers = array('Ajax', 'Javascript', 'Time');
/**
 * Components
 *
 * @var array
 */
	public $components = array('Acl', 'Security', 'RequestHandler');

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->ClientContact->recursive = 0;
		$this->set('clientContacts', $this->paginate());
	}

/**
 * view method
 *
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		$this->ClientContact->id = $id;
		if (!$this->ClientContact->exists()) {
			throw new NotFoundException(__('Invalid client contact'));
		}
		$this->set('clientContact', $this->ClientContact->read(null, $id));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->ClientContact->create();
			if ($this->ClientContact->save($this->request->data)) {
				$this->Session->setFlash(__('The client contact has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The client contact could not be saved. Please, try again.'));
			}
		}
		$clients = $this->ClientContact->Client->find('list');
		$this->set(compact('clients'));
	}

/**
 * edit method
 *
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		$this->ClientContact->id = $id;
		if (!$this->ClientContact->exists()) {
			throw new NotFoundException(__('Invalid client contact'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->ClientContact->save($this->request->data)) {
				$this->Session->setFlash(__('The client contact has been saved'));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The client contact could not be saved. Please, try again.'));
			}
		} else {
			$this->request->data = $this->ClientContact->read(null, $id);
		}
		$clients = $this->ClientContact->Client->find('list');
		$this->set(compact('clients'));
	}

/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->ClientContact->id = $id;
		if (!$this->ClientContact->exists()) {
			throw new NotFoundException(__('Invalid client contact'));
		}
		if ($this->ClientContact->delete()) {
			$this->Session->setFlash(__('Client contact deleted'));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Client contact was not deleted'));
		$this->redirect(array('action' => 'index'));
	}
	
	
	public function updateCurrentBalance($acc_id = NULL,$closingBalance = NULL) {
		Configure::write('debug',2);
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		$date = '2014-03-31';
		$ledgerEntries = $this->AccountsLedger->find('all',array(
			'conditions'=>array('AccountsLedger.date >'=>$date,'AccountsLedger.accounts_account_id'=>$acc_id),
			'fields' => array('AccountsLedger.id','AccountsLedger.date','AccountsLedger.credit','AccountsLedger.debit'),
			'order'=>array('AccountsLedger.date desc')
		));
		foreach ($ledgerEntries as $value) {
			if($value['AccountsLedger']['credit'] > 0) {
				$closingBalance += $value['AccountsLedger']['credit'];
			}
			if($value['AccountsLedger']['debit'] > 0) {
				$closingBalance -= $value['AccountsLedger']['debit'];
			}
		}
	}
	
	
	public function log_entries($acc_id = NULL, $credit = NULL, $debit = NULL, $previous_balance = NULL, $balance = NULL, $ledger_id = null, $bill_id = null, $invoice_id = null, $action_performed = null, $payment_details = null) {
		$this->loadModel('AccountsLog');
		$log['AccountsLog']['accounts_account_id'] = $acc_id;
		$log['AccountsLog']['credit'] = $credit;
		$log['AccountsLog']['debit'] = $debit;
		$log['AccountsLog']['previous_balance'] = $previous_balance;
		$log['AccountsLog']['balance'] = $balance;
		$log['AccountsLog']['payment_details'] = $payment_details;
		$log['AccountsLog']['accounts_ledger_id'] = $ledger_id;
		$log['AccountsLog']['accounts_clientinvoice_id'] = $invoice_id;
		$log['AccountsLog']['accounts_bill_id'] = $bill_id;
		$log['AccountsLog']['date_time'] = date('Y-m-d H:i:s');
		$log['AccountsLog']['user_name'] = $this->Session->read('Auth.User.username');
		$log['AccountsLog']['action_performed'] = $action_performed;
		$this->AccountsLog->create();
		$this->AccountsLog->save($log);
		$lastLog = NULL;
		$lastLog = $this->AccountsLog->getLastInsertId();
		if($credit) {
			$closingBalanceMatch = NULL;
			$closingBalanceMatch = $previous_balance + $credit;
			if(($closingBalanceMatch != $balance) && ($action_performed != 'Accounts Client payment details Controller')) {
				mail('ganesh@carmatec.com', 'Accounting Issue', 'There is a issue in the record#'.$lastLog);
			}
			/*if($closingBalanceMatch <= 0) {
				mail('ganesh@carmatec.com', 'Accounting Issue', 'There is a issue in the record#'.$lastLog.'<br/>'.'<pre>'.print_r($log).'</pre>');
			}*/
		}
		
		if($debit) {
			$closingBalanceMatch = NULL;
			$closingBalanceMatch = $previous_balance - $debit;
			if(($closingBalanceMatch != $balance) && ($action_performed != 'Accounts Client payment details Controller')) {
				mail('ganesh@carmatec.com', 'Accounting Issue', 'There is a issue in the record#'.$lastLog);
			}
			/*if($closingBalanceMatch <= 0) {
				mail('ganesh@carmatec.com', 'Accounting Issue', 'There is a issue in the record#'.$lastLog.'<br/>'.'<pre>'.print_r($log).'</pre>');
			}*/
		}
		
		
		return TRUE;
	}
}

?>

