
<?php
/**
 * Module:INVOICE
 * 
 * Pages: Index,Add,Edit,Mail,Download,View
 * 
 * @Saurabh
 * 
 * @Carmatec Accounts
 * 
 * @CopyrightÂ©2012-2013 carmatec.com
 * 
 */

/**
 * AccountsClientinvoice Controller
 *
 * @property AccountsClientinvoice $AccountsClientinvoice
 */

App::uses('AppController', 'Controller');
CakePlugin::load('Export'); 
//CakePlugin::load('Uploader');
//App::import('Vendor', 'Uploader.Uploader');

/**
 * AccountsClientinvoices Controller
 *
 * @property AccountsClientinvoice $AccountsClientinvoice
 */
class AccountsClientinvoicesController extends AppController {

	var $helpers = array('Html', 'Form','Ajax','Js','Javascript');
	public $components = array('Paginator','Email', 'RequestHandler','Session','Export.Export');
	
	
	//public $actsAs = array('Uploader.Attachment');
	
	function beforeFilter()    {  
		   $this->Auth->allow(array('lastmonth_invoices','restindex'));
		   parent::beforeFilter();
		$this->loadModel('Aco');
		$this->loadModel('ArosAco');
		$url = $this->params['action'];
		$controller = $this->params['controller'];
			$module_name = 'Invoices';
			$aco = $this->Aco->find('first',array('conditions'=>array('Aco.alias'=>$module_name)));
			$aros_acosDetails = $this->ArosAco->find('first',array('conditions'=>array('ArosAco.aro_id'=>$this->Session->read('Auth1.User.Aro_id'),'ArosAco.aco_id'=>$aco['Aco']['id'])));
			$this->Session->write('Auth1.User.Permission',$aros_acosDetails);
			if($aros_acosDetails['ArosAco']['_create'] == 1){
	    		$proceed=1;
		    }
		    if($aros_acosDetails['ArosAco']['_read'] == 1){
	    		$proceed=1;
		    }
		    if($aros_acosDetails['ArosAco']['_update'] == 1){
	    		$proceed=1;
	    	}
		    if($aros_acosDetails['ArosAco']['_delete'] == 1){
		    	$proceed=1;
	    	}	    
	    
	    if(!$proceed){
	    	$this->redirect(array('controller'=>'users','action' => 'noaccess'));
	    }
	}	   
	
	
   
/**
 * index method
 *
 * @return void
 */
	public function index1($flag=null,$sortbybrandid=null,$brandfilter=null,$statusfilter=null,$search_field=NULL,$search_data=NULL) {
		/*configure::write('debug',2);
		debug($this->data);*/
		
		
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('Currency');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->AccountsClientinvoice->recursive = -1;
		
		$accountingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$this->set(compact('accountingCurrency'));
 		$defaulBillingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
 		$totalInvoicedAmountIndexflag = null;
 		if($this->data){
 			if($this->data['DeleteInvoiceData']['pages']){
 				debug($brandfilter);
 				debug($statusfilter);
 				$pages = $this->data['DeleteInvoiceData']['pages'];
				if($brandfilter && !$statusfilter){
						$this->paginate = array('conditions'=>array('AccountsClientinvoice.brand_id'=>$brandfilter/*,'AccountsClientinvoice.recurring '=>'N','AccountsClientinvoice.void'=>'N'*/),'limit'=>$pages);
						$totalInvoicedAmountIndexflag = 1;
 						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.brand_id'=>$brandfilter/*,'AccountsClientinvoice.void'=>'N'*/),'limit'=>$this->data['DeleteInvoiceData']['pages']));
						$accountsClientinvoiceAll = $this->paginate();
						foreach($accountsClientinvoiceAll as $kcd1 =>$vcd1){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1['AccountsClientinvoice']['currency_id'],$vcd1['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1['AccountsClientinvoice']['currency_id'],$vcd1['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 							$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}
			   }
			   elseif($statusfilter && !$brandfilter){
					$this->paginate = array('conditions'=>array('AccountsClientinvoice.status'=>$statusfilter/*,'AccountsClientinvoice.recurring '=>'N'*/),'limit'=>$pages);
					//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.status'=>$statusfilter,'AccountsClientinvoice.void'=>'N'),'limit'=>$this->data['DeleteInvoiceData']['pages']));
					$accountsClientinvoiceAll = $this->paginate();
					$totalInvoicedAmountIndexflag = 1;
					foreach($accountsClientinvoiceAll as $kcd11 =>$vcd11){
						$returnedDataAccounting = $this-> totalInvoiceConversion($vcd11['AccountsClientinvoice']['currency_id'],$vcd11['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd11['AccountsClientinvoice']['currency_id'],$vcd11['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 						$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
					}
			}
			elseif($brandfilter && $statusfilter){
				$this->paginate = array('conditions'=>array('AccountsClientinvoice.status'=>$statusfilter,'AccountsClientinvoice.brand_id'=>$brandfilter/*,'AccountsClientinvoice.recurring '=>'N'*/),'limit'=>$pages);
				$accountsClientinvoiceAll = $this->paginate();
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.status'=>$statusfilter,'AccountsClientinvoice.brand_id'=>$brandfilter,'AccountsClientinvoice.void'=>'N'),'limit'=>$this->data['DeleteInvoiceData']['pages']));
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
			else
				{
					$this->paginate=array('conditions'=>array('OR'=>array('AccountsClientinvoice.recurring '=>'N','AccountsClientinvoice.recurring IS NULL')),'limit'=>$pages);
					//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.void'=>'N'),'limit'=>$this->data['DeleteInvoiceData']['pages']));
					$accountsClientinvoiceAll = $this->paginate();
					$totalInvoicedAmountIndexflag = 1;
					foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
						$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 						$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
					}
					$pages = $this->data['DeleteInvoiceData']['pages'];
					$this->set(compact('pages'));
				}
				$this->set(compact('brandfilter','statusfilter','totalInvoicedAmountIndex'));
			}if($this->data['DeleteInvoiceData']['from_date'] && !$this->data['DeleteInvoiceData']['to_date']){
				$filterFromDate = date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['from_date']));
				$this->paginate = array('conditions'=>array('AccountsClientinvoice.service_startdate >='=>$filterFromDate/*,'AccountsClientinvoice.recurring '=>'N'*/),'order' => 'AccountsClientinvoice.service_startdate DESC');
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.service_startdate >='=>$filterFromDate,'AccountsClientinvoice.void'=>'N'),'order' => 'AccountsClientinvoice.service_startdate DESC'));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
						$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 						$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}if($this->data['DeleteInvoiceData']['to_date']){
				$filterToDate = date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['to_date']));
				$filterFromDate = date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['from_date']));
				$this->paginate = array('conditions'=>array('AccountsClientinvoice.service_startdate <='=>$filterToDate,'AccountsClientinvoice.service_startdate >='=>$filterFromDate/*,'AccountsClientinvoice.recurring '=>'N'*/),'order' => 'AccountsClientinvoice.service_startdate DESC');
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.service_startdate <='=>$filterToDate,'AccountsClientinvoice.service_startdate >='=>$filterFromDate,'AccountsClientinvoice.void'=>'N'),'order' => 'AccountsClientinvoice.service_startdate DESC'));
				$accountsClientinvoiceAll = $this->paginate();
					$totalInvoicedAmountIndexflag = 1;
					foreach($accountsClientinvoiceAll as $kcd1v => $vcd1v){
						$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1v['AccountsClientinvoice']['currency_id'],$vcd1v['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1v['AccountsClientinvoice']['currency_id'],$vcd1v['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 						$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
					}
			}if($this->data['DeleteInvoiceData']['sortbybrand']){
				$this->paginate = array('conditions'=>array('AccountsClientinvoice.brand_id'=>$this->data['DeleteInvoiceData']['sortbybrand']/*,'AccountsClientinvoice.recurring '=>'N'*/));
				$brandfilter=$this->data['DeleteInvoiceData']['sortbybrand'];
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all', array('conditions'=>array('AccountsClientinvoice.brand_id'=>$this->data['DeleteInvoiceData']['sortbybrand'],'AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
					$totalInvoicedAmountIndexflag = 1;
					foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
						$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 						$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 						$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
					}
					debug($brandfilter);
				$this->set(compact('brandfilter'));
			}if($this->data['DeleteInvoiceData']['sortbystatus']){
				if($sortbybrandid){
					debug($this->data['DeleteInvoiceData']['sortbystatus']);
					if($this->data['DeleteInvoiceData']['sortbystatus'] == 'recurring'){
						$this->paginate = array('conditions'=>array('AccountsClientinvoice.recurring'=>'Y','AccountsClientinvoice.brand_id'=>$sortbybrandid/*,'AccountsClientinvoice.void'=>'N'*/));
						$brandfilter=$sortbybrandid;
						$statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all', array('conditions'=>array('AccountsClientinvoice.recurring'=>'Y','AccountsClientinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.void'=>'N')));
						$accountsClientinvoiceAll = $this->paginate();
						$totalInvoicedAmountIndexflag = 1;
						foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 							$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}
						$this->set(compact('brandfilter','statusfilter'));
					}
					elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'void'){
						$this->paginate = array('conditions'=>array('AccountsClientinvoice.void'=>'Y','AccountsClientinvoice.brand_id'=>$sortbybrandid/*,'AccountsClientinvoice.recurring '=>'N'*/));
						$brandfilter=$sortbybrandid;
						$statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.void'=>'Y','AccountsClientinvoice.brand_id'=>$sortbybrandid)));
						$accountsClientinvoiceAll = $this->paginate();
							$totalInvoicedAmountIndexflag = 1;
							foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
								$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 								$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 								$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 								$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
							}
						$this->set(compact('brandfilter','statusfilter'));
						
					}
					else{
						if($this->data['DeleteInvoiceData']['sortbystatus'] == 'open'){
							$conditions = array(/*'AccountsClientinvoice.status' == 'open',*/'AccountsClientinvoice.due_date >='=>date('Y-m-d'),'AccountsClientinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'Closed'){
							$conditions = array('AccountsClientinvoice.status' == 'closed','AccountsClientinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.paid'=>'Y','AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}elseif(($this->data['DeleteInvoiceData']['sortbystatus'] == 'overdue')){
							$conditions = array(/*'OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),*/'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.due_date <'=>date('Y-m-d'),'AccountsClientinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'unpaid'){
							$conditions = array(/*'OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),*/'AccountsClientinvoice.paid'=>'N'/*,'AccountsClientinvoice.due_date <'=>date('Y-m-d')*/,'AccountsClientinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'draft'){
							$conditions = array(/*'OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),*/'AccountsClientinvoice.status'=>'draft','AccountsClientinvoice.paid'=>'N'/*,'AccountsClientinvoice.due_date <'=>date('Y-m-d')*/,'AccountsClientinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}
						//$this->paginate = array('conditions'=>array('AccountsClientinvoice.status'=>$this->data['DeleteInvoiceData']['sortbystatus'],'AccountsClientinvoice.brand_id'=>$sortbybrandid/*,'AccountsClientinvoice.void'=>'N'*/));
						$this->paginate = array('conditions'=>$conditions);
						$brandfilter=$sortbybrandid;
						$statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.status'=>$this->data['DeleteInvoiceData']['sortbystatus'],'AccountsClientinvoice.brand_id'=>$sortbybrandid,'AccountsClientinvoice.void'=>'N')));
						$accountsClientinvoiceAll = $this->paginate();
						$totalInvoicedAmountIndexflag = 1;
						foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 							$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}
						$this->set(compact('brandfilter','statusfilter'));
					}
				}else{
				 if($this->data['DeleteInvoiceData']['sortbystatus'] == 'recurring'){
						$this->paginate = array('conditions'=>array('AccountsClientinvoice.recurring'=>'Y'/*,'AccountsClientinvoice.void'=>'N'*/));
						$statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.recurring'=>'Y','AccountsClientinvoice.void'=>'N')));
						$accountsClientinvoiceAll = $this->paginate();
						$totalInvoicedAmountIndexflag = 1;
						foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 							$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}
						$this->set(compact('statusfilter'));
					}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'void'){
						$this->paginate = array('conditions'=>array('AccountsClientinvoice.void'=>'Y'/*,'AccountsClientinvoice.recurring '=>'N'*/));
						$statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all', array('conditions'=>array('AccountsClientinvoice.void'=>'Y')));
						$accountsClientinvoiceAll = $this->paginate();
						$totalInvoicedAmountIndexflag = 1;
						foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 							$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}
						$this->set(compact('statusfilter'));
					}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'unpaid'){
						$this->paginate = array('conditions'=>array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/));
						$statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all', array('conditions'=>array('AccountsClientinvoice.void'=>'Y')));
						$accountsClientinvoiceAll = $this->paginate();
						$totalInvoicedAmountIndexflag = 1;
						foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 							$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}
						$this->set(compact('statusfilter'));
					}
					else{
						if($this->data['DeleteInvoiceData']['sortbystatus'] == 'open'){
							$conditions = array(/*'AccountsClientinvoice.status' == 'open',*/'AccountsClientinvoice.due_date >='=>date('Y-m-d'),'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'closed'){
							$conditions = array('AccountsClientinvoice.status' == 'closed','AccountsClientinvoice.paid'=>'Y','AccountsClientinvoice.void'=>'N','AccountsClientinvoice.recurring '=>'N');
						}elseif(($this->data['DeleteInvoiceData']['sortbystatus'] == 'overdue')){
							$conditions = array(/*'OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),*/'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.due_date <'=>date('Y-m-d'),'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'unpaid'){
							$conditions = array(/*'OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),*/'AccountsClientinvoice.paid'=>'N'/*,'AccountsClientinvoice.due_date <'=>date('Y-m-d')*/,'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
						}
					    $this->paginate = array('conditions'=>$conditions);
					    $statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
						//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.status'=>$this->data['DeleteInvoiceData']['sortbystatus'],'AccountsClientinvoice.void'=>'N')));
						$accountsClientinvoiceAll = $this->paginate();
						$totalInvoicedAmountIndexflag = 1;
						foreach($accountsClientinvoiceAll as $kcd111 =>$vcd111){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd111['AccountsClientinvoice']['currency_id'],$vcd111['AccountsClientinvoice']['ajusted_invoiceamount']);
 							$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 							$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}
						$this->set(compact('statusfilter'));
					}
				}
			}
			debug($sortbybrandid);
			if($sortbybrandid){
			   $this->set('sortbybrandid',$sortbybrandid);
			}else{
			   $this->set('sortbybrandid',$this->data['DeleteInvoiceData']['sortbybrand']);
			}
			debug($sortbybrandid);
 		}
			$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$allbrand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$openinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.status'=>'open','AccountsClientinvoice.due_date >=' =>date('Y-m-d'),'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/)));
			$overdueinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array(/*'AccountsClientinvoice.status'=>'overdue',*/'AccountsClientinvoice.due_date <' =>date('Y-m-d'),'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N'/*,'or'=>array('AccountsClientinvoice.recurring '=>'N','AccountsClientinvoice.recurring IS NULL')*/)));
			//$openoverdueinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),'AccountsClientinvoice.void'=>'N')));
			//$closedinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.status'=>'closed','AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/)));
			if($flag==3){
				$conditions = array(/*'AccountsClientinvoice.status' == 'Open',*/'AccountsClientinvoice.due_date >='=>date('Y-m-d'),'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
				$this->paginate = array('conditions'=>$conditions);
				//$this->paginate=array('conditions'=>array('AccountsClientinvoice.status'=>'open'/*,'AccountsClientinvoice.void'=>'N'*/));
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.status'=>'open','AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
			if($flag==4){
				$conditions = array('AccountsClientinvoice.status' == 'Closed','AccountsClientinvoice.paid'=>'Y','AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
				$this->paginate = array('conditions'=>$conditions);
				//$this->paginate=array('conditions'=>array('AccountsClientinvoice.status'=>'closed'/*,'AccountsClientinvoice.void'=>'N'*/));
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.status'=>'closed','AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
			if($flag==5){
				$conditions = array(/*'OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),*/'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.due_date <'=>date('Y-m-d'),'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/);
				$this->paginate = array('conditions'=>$conditions);
				//$this->paginate=array('conditions'=>array('AccountsClientinvoice.status'=>'overdue'/*,'AccountsClientinvoice.void'=>'N'*/));
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.status'=>'overdue','AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
			if($flag==6)
				{
				$this->paginate=array('conditions'=>array(/*'OR'=>array('AccountsClientinvoice.status'=>array('overdue','open','closed','void',)),*//*'AND'=>array(*/'AccountsClientinvoice.service_startdate LIKE'=>date('Y-m').'%'/*,'AccountsClientinvoice.recurring '=>'N'*//*,'AccountsClientinvoice.void'=>'N'*//*)*/));	
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.service_startdate LIKE'=>date('Y-m').'%','AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
			if($flag==7){
				/*$this->paginate = array('conditions'=>array('AND'=>array('AccountsClientinvoice.void'=>'N'),'OR'=>array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.status'=>'overdue')));*/
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AND'=>array('AccountsClientinvoice.void'=>'N'),'OR'=>array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.status'=>'overdue'))));
				$this->paginate = array('conditions'=>array('AccountsClientinvoice.paid'=>'N'/*,'AccountsClientinvoice.status'=>'overdue','AccountsClientinvoice.recurring '=>'N'*/));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
			if($flag==8){
				$this->paginate = array('conditions'=>array(/*'AccountsClientinvoice.service_startdate LIKE'=>date('Y-m').'%',*/'AccountsClientinvoice.void'=>'N','AccountsClientinvoice.paid'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/));
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.service_startdate LIKE'=>date('Y-m').'%','AccountsClientinvoice.void'=>'N','AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
		//Code for the Global search .
		if (!empty($search_field)) {
			if ($search_field == 'id') {
				$this->paginate=array('conditions'=>array('AccountsClientinvoice.id'=>$search_data/*,'AccountsClientinvoice.void'=>'N'*/));
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.id'=>$search_data,'AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
				
			}
			if ($search_field == 'client') {
				$client_id = $this->Client->find('first',array('conditions'=>array('Client.client_companyname'=>$search_data),'fields'=>array('Client.id')));
				$this->paginate=array('conditions'=>array('AccountsClientinvoice.client_id'=>$client_id['Client']['id']/*,'AccountsClientinvoice.void'=>'N'*/));
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.client_id'=>$client_id['Client']['id'],'AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
				
			}
			if ($search_field == 'brand') {
				$brand_id = $this->Brand->find('first',array('conditions'=>array('Brand.brandname'=>$search_data),'fields'=>array('Brand.id')));
				$this->paginate=array('conditions'=>array('AccountsClientinvoice.brand_id'=>$brand_id['Brand']['id']/*,'AccountsClientinvoice.void'=>'N'*/));
				//$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.brand_id'=>$brand_id['Brand']['id'],'AccountsClientinvoice.void'=>'N')));
				$accountsClientinvoiceAll = $this->paginate();
				$totalInvoicedAmountIndexflag = 1;
				foreach($accountsClientinvoiceAll as $kcd1111 =>$vcd1111){
					$returnedDataAccounting = $this-> totalInvoiceConversion($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$returnedDataBilling = $this->totalInvoiceConversionBilling($vcd1111['AccountsClientinvoice']['currency_id'],$vcd1111['AccountsClientinvoice']['ajusted_invoiceamount']);
 					$totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 					$totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
				}
			}
		}
		//End of global search code
		$this->set(compact('totalInvoicedAmountIndex'));
		$this->set('accountsClientinvoices', $this->paginate());	
		/*Cache::write('accountsClientinvoices', $this->paginate());		
		echo "Not Coming From Cache"; echo "<br />";$this->set('accountsClientinvoices', $this->paginate());*/
		/*}*/  
		
		$this->set(compact('inv_date_app'));
		$this->set(compact('allclients','allbrand','openinvoices','closedinvoices','overdueinvoices','openoverdueinvoices'));
		
		$accountlist=$this->AccountsAccount->find('list',array('conditions'=>array('AccountsAccount.asset_type'=>'Bank'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name')));
		//$currencydetail=$this->AccountsClientinvoice->find('all',array('conditions'=>array('AccountsClientinvoice.void'=>'N'),'order'=>array('AccountsClientinvoice.id DESC')));
		$currencydetail = $this->paginate();
		/*
		configure::write('debug',2);
				debug(date('Y-m-d H:i:s'));*/
		
		foreach($currencydetail as $kcd=>$vcd){
			
			/*if(!$totalInvoicedAmountIndexflag){
							$returnedDataAccounting = $this-> totalInvoiceConversion($vcd['AccountsClientinvoice']['currency_id'],$vcd['AccountsClientinvoice']['ajusted_invoiceamount']);
							 $returnedDataBilling = $this->totalInvoiceConversionBilling($vcd['AccountsClientinvoice']['currency_id'],$vcd['AccountsClientinvoice']['ajusted_invoiceamount']);
							 $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$accountingCurrency['Currency']['symbol']] + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
							 $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] = $totalInvoicedAmountIndex[$defaulBillingCurrency['Currency']['symbol']] + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
						}*/
			
			if($vcd['AccountsClientinvoice']['currency_id'])
				{
					debug(date('Y-m-d H:i:s'));
					$currencyindex=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$vcd['AccountsClientinvoice']['currency_id'])));
					$currencysymbolindex[$vcd['AccountsClientinvoice']['id']]['Symbol']=$currencyindex['Currency']['symbol'];
					$currencysymbolindex[$vcd['AccountsClientinvoice']['id']]['currencyid']=$currencyindex['Currency']['id'];
					
					 /**********************************Spot Conversion Logic ****************************************************** 
					  ***************************************************************************************************************
					 */
					$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
					if(($billingcurrency['Currency']['id']!=$vcd['AccountsClientinvoice']['currency_id']) && (($vcd['AccountsClientinvoice']['currency_id']!=null)))
						{
							debug(date('Y-m-d H:i:s'));
							$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$vcd['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
							$from=$fromcur['Currency']['name'];
							$to=$billingcurrency['Currency']['name'];
							$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
							$handle = @fopen($url, 'r');
							if ($handle) 
								{
										$result = fgets($handle, 4096);
										fclose($handle);
								}
							$allData = explode(',',$result);  //Get all the contents to an array 
							$convrate[$vcd['AccountsClientinvoice']['id']]['convrate']=$allData['1'];
							debug(date('Y-m-d H:i:s'));
							$this->set(compact('covnrate'));
						}
					else
						{
							debug(date('Y-m-d H:i:s'));
							$convrate[$vcd['AccountsClientinvoice']['id']]['convrate']=1;
							debug(date('Y-m-d H:i:s'));
							$this->set(compact('convrate'));
						}
			/**************************************************************************************************************
			 **********************************Spot Conversion Logic ******************************************************
			 */ 
				}
			else
				{
					$currencyindex=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
					$currencysymbolindex[$vcd['AccountsClientinvoice']['id']]['Symbol']=$currencyindex['Currency']['symbol'];
					$currencysymbolindex[$vcd['AccountsClientinvoice']['id']]['currencyid']=$currencyindex['Currency']['id'];
					 /**********************************Spot Conversion Logic ****************************************************** 
					  ***************************************************************************************************************
					 */
					$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
					if(($billingcurrency['Currency']['id']!=$vcd['AccountsClientinvoice']['currency_id']) && (($vcd['AccountsClientinvoice']['currency_id']!=null)))
						{
							$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$vcd['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
							$from=$fromcur['Currency']['name'];
							$to=$billingcurrency['Currency']['name'];
							$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
							$handle = @fopen($url, 'r');
							if ($handle) 
								{
										$result = fgets($handle, 4096);
										fclose($handle);
								}
							$allData = explode(',',$result);  //Get all the contents to an array 
							$convrate[$vcd['AccountsClientinvoice']['id']]['convrate']=$allData['1'];
							
							$this->set(compact('covnrate'));
						}
					else
						{
							$convrate[$vcd['AccountsClientinvoice']['id']]['convrate']=1;
							$this->set(compact('convrate'));
						}
			/**************************************************************************************************************
			 **********************************Spot Conversion Logic ******************************************************
			 */ 
				}
			
			/*$clientpaymentdetails=$this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$vcd['AccountsClientinvoice']['id'])));
			$duedetails[$vcd['AccountsClientinvoice']['id']]=$clientpaymentdetails['AccountsClientpaymentdetail']['due'];*/
		
		
		}
		$this->set(compact('currencysymbolindex','accountlist','duedetails','totalInvoicedAmountIndex'));
		
		if($this->data['DeleteInvoiceData'] && $flag){
			
			if($flag==1){
				debug($this->data['DeleteInvoiceData']);
				foreach($this->data['DeleteInvoiceData']['invoiceList'] as $key =>$v){
					$checkPaymentLogflag = null;
					debug($v);
						if($v==1){
							debug($key);
							$this->loadModel('AccountsClientpaymentdetail');
							$checkPaymentLog = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$key)));
							debug($checkPaymentLog);
							if($checkPaymentLog){
								$checkPaymentLogflag = 1;
								debug($checkPaymentLogflag);
								$this->set(compact('checkPaymentLogflag'));
								$this->Session->setFlash(__('<div class="flashMessageSuccess">There is a payment logged against Invoice #'.$key.'.Please delete the paymentlog before deleting the invoice.</div>'));
								$this->redirect(array('action'=>'index'));
								
							}else{
								$this->AccountsClientinvoice->id = $key;
								$amt_led=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$key)));
								$ledgeramount=$amt_led['AccountsClientinvoice']['invoice_amount'];
							   /**************************************************************************************************************
							    **********************************Spot Conversion Logic ****************************************************** 
							    ***************************************************************************************************************
						      */
						   		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
								 	if($billingcurrency['Currency']['id']!=$amt_led['AccountsClientinvoice']['currency'])
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$amt_led['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
											$from=$fromcur['Currency']['name'];
											$to=$billingcurrency['Currency']['name'];
											
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
		 									debug($handle);
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											
											$allData = explode(',',$result);  //Get all the contents to an array 
											
											$ledgeramount=$ledgeramount*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
											
										}
										else
										{
											$ledgeramount=$ledgeramount;
										}
								 	
								 	/**************************************************************************************************************
								 	 **********************************Spot Conversion Logic ****************************************************** 
								 	***************************************************************************************************************
								 	*/
									$void->data['AccountsClientinvoice']['id']=$key;
									$void->data['AccountsClientinvoice']['void']='Y';
									if($this->AccountsClientinvoice->save($void->data))
										{
											$last1=$key;
								 			$this->AccountsLedger->create();
								 			$ledger->data=null;
								 			$ledger->data['AccountsLedger']['transaction_id']=$last1;
								 			$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
								 			$accounttype=$this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accounts_accounts['AccountsAccount']['account_type_id'])));
								 			$goldenrule=$this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accounttype['AccountType']['accounts_goldenrule_id'])));
								 			$accountbal=$this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accounts_accounts['AccountsAccount']['id']),'fields'=>array('AccountsLedger.balance'),'order'=>array('AccountsLedger.id DESC')));
								 			if(!empty($accountbal)){
								 				$bbaalance = $accountbal['AccountsLedger']['balance'];
								 			}else{
								 				$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
								 			}
								 			$ledger->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
								 			$ledger->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
								 			$ledger->data['AccountsLedger']['payment_description']='Credit Amount';
								 			if($goldenrule['AccountsGoldenrule']['decrease']=='credit')
								 				{
								 					$ledger->data['AccountsLedger']['credit']=$ledgeramount;
								 					$ledger->data['AccountsLedger']['debit']=0;
								 				}
								 			else
								 				{
								 					$ledger->data['AccountsLedger']['debit']=$ledgeramount;
								 					$ledger->data['AccountsLedger']['credit']=0;
								 				}
								 			$ledger->data['AccountsLedger']['balance']=$accountbal['AccountsLedger']['balance']-$ledgeramount;
											}
								}
							
						}
						
					}
					$success=1;
					$this->set(compact('success'));
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Invoice changed to void</div>'));
					$this->redirect(array('action'=>'index'));
							
		}
			
			if($flag==2)
			{
				
				foreach($this->data['DeleteInvoiceData']['invoiceList'] as $key1 =>$v1)
					{
						if($v1==1)
							{
								$this->AccountsClientinvoice->id = $key1;
								$inactive->data['AccountsClientinvoice']['id']=$key1;
								$inactive->data['AccountsClientinvoice']['paid']='Y';
								$inactive->data['AccountsClientinvoice']['status']='closed';
								$this->AccountsClientinvoice->save($inactive->data);
							}
					}
					$success=1;
					$this->set(compact('success'));
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Invoice Closed</div>'));
					$this->redirect(array('action' => 'index'));
			}
			
		}
		
		
	}
 public function index($flag=null,$sortbybrandid=null,$brandfilter=null,$statusfilter=null,$search_field=NULL,$search_data=NULL){
 	
	$this->loadModel('Brand');
	$this->loadModel('AccountsAccount');
	$this->AccountsClientinvoice->recursive = 0;
	/**
	 * financial year
	 */
	
	$financialYear = $this->getFinancialYear();
		$startYear = $financialYear['start_year'];
		$endYear   = $financialYear['end_year'];
		$currMonth = date('m');
		
			if($currMonth >= $startYear)
			{
				$displayYear = date('Y');
				$fromFinancialYear = date('Y');
				$cm = $currMonth;
			}
			else {
				$displayYear = date('Y');
				$displayYear--;
				$cm = $currMonth;
			}
			$finacialFromDate = $displayYear.'-'.$startYear.'-'.'01';
			$financialToDate  =	date('Y').'-'.$currMonth.'-'.'31';
	
	/**
	 * end
	 */
	$conditions = array();
	if($this->data['DeleteInvoiceData']['pages']){
 				$pages = $this->data['DeleteInvoiceData']['pages'];
	}else{
		$pages = '20';
	}
 	if($this->data){
 		
		if($this->data['DeleteInvoiceData']['from_date'] || $this->data['DeleteInvoiceData']['to_date']){
			if($this->data['DeleteInvoiceData']['to_date']){
				$filterToDate	 = date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['to_date']));
				$financialToDate = $filterToDate;
			}else{
				$filterToDate    = date('Y-m-d');
				$financialToDate = $filterToDate;
			}
			 $filterFromDate = date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['from_date']));
			 $finacialFromDate	=	$filterFromDate;
			 $conditions = array('AND'=>array(array('AccountsClientinvoice.service_startdate >='=>$filterFromDate),array('AccountsClientinvoice.service_startdate <='=>$filterToDate)));
		}
		if($this->data['DeleteInvoiceData']['sortbybrand'] || $sortbybrandid){
			if(!$sortbybrandid){
				$sortbybrandid = $this->data['DeleteInvoiceData']['sortbybrand'];
			}
			$brandCondition = array('AccountsClientinvoice.brand_id'=>$sortbybrandid);
			$conditions = array_merge($conditions,$brandCondition);
		}
		if($this->data['DeleteInvoiceData']['sortbystatus']){
			if($this->data['DeleteInvoiceData']['sortbystatus'] == "recurring"){
				$statusCondition = array('AccountsClientinvoice.recurring'=>'Y','AccountsClientinvoice.void'=>'N');
				$conditions = array_merge($conditions,$statusCondition);
			}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == "void"){
				$statusCondition = array('AccountsClientinvoice.void'=>'Y');
				$conditions = array_merge($conditions,$statusCondition);
			}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == "open"){
				$statusCondition = array('AccountsClientinvoice.due_date >='=>date('Y-m-d'),'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N');
				$conditions = array_merge($conditions,$statusCondition);
			}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == "Closed"){
				$statusCondition = array('AccountsClientinvoice.status' == 'closed','AccountsClientinvoice.paid'=>'Y','AccountsClientinvoice.void'=>'N');
				$conditions = array_merge($conditions,$statusCondition);
			}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == "overdue"){
				$statusCondition = array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.due_date <'=>date('Y-m-d'),'AccountsClientinvoice.void'=>'N');
				$conditions = array_merge($conditions,$statusCondition);
			}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'unpaid'){
				$statusCondition = array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N');
				$conditions = array_merge($conditions,$statusCondition);
			}elseif($this->data['DeleteInvoiceData']['sortbystatus'] == 'draft'){
				$statusCondition = array('AccountsClientinvoice.status'=>'draft','AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N');
				$conditions = array_merge($conditions,$statusCondition);
			}else{
				$conditions = array('AccountsClientinvoice.invoiced_date BETWEEN ? AND ?'=>array(date("Y-m-d", mktime(0, 0, 0, date("m")-1, 1, date("Y"))),date('Y-m-d')));		
			}
			$brandfilter=$sortbybrandid;
			$statusfilter=$this->data['DeleteInvoiceData']['sortbystatus'];
		}
		
		if($this->data['DeleteInvoiceData']['invoiceList'] && $flag){
			
			if($flag==2){
				foreach($this->data['DeleteInvoiceData']['invoiceList'] as $key =>$v){
					$checkPaymentLogflag = null;
						if($v==1){
							$this->loadModel('AccountsClientpaymentdetail');
							$checkPaymentLog = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$key)));
							if($checkPaymentLog){
								$checkPaymentLogflag = 1;
								debug($checkPaymentLogflag);
								$this->set(compact('checkPaymentLogflag'));
								$this->Session->setFlash(__('<div class="flashMessageSuccess">There is a payment logged against Invoice #'.$key.'.Please delete the paymentlog before deleting the invoice.</div>'));
								$this->redirect(array('action'=>'index'));
								
							}else{
								$this->AccountsClientinvoice->id = $key;
								$amt_led=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$key)));
								$ledgeramount=$amt_led['AccountsClientinvoice']['invoice_amount'];
							   /**************************************************************************************************************
							    **********************************Spot Conversion Logic ****************************************************** 
							    ***************************************************************************************************************
						      */
						   		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
								 	if($billingcurrency['Currency']['id']!=$amt_led['AccountsClientinvoice']['currency'])
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$amt_led['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
											$from=$fromcur['Currency']['name'];
											$to=$billingcurrency['Currency']['name'];
											
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
		 									debug($handle);
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											
											$allData = explode(',',$result);  //Get all the contents to an array 
											
											$ledgeramount=$ledgeramount*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
											
										}
										else
										{
											$ledgeramount=$ledgeramount;
										}
								 	
								 	/**************************************************************************************************************
								 	 **********************************Spot Conversion Logic ****************************************************** 
								 	***************************************************************************************************************
								 	*/
									$void->data['AccountsClientinvoice']['id']=$key;
									$void->data['AccountsClientinvoice']['void']='Y';
									if($this->AccountsClientinvoice->save($void->data))
										{
											$last1=$key;
								 			$this->AccountsLedger->create();
								 			$ledger->data=null;
								 			$ledger->data['AccountsLedger']['transaction_id']=$last1;
								 			$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
								 			$accounttype=$this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accounts_accounts['AccountsAccount']['account_type_id'])));
								 			$goldenrule=$this->AccountsGoldenrule->find('first',array('conditions'=>array('AccountsGoldenrule.id'=>$accounttype['AccountType']['accounts_goldenrule_id'])));
								 			$accountbal=$this->AccountsLedger->find('first',array('conditions'=>array('AccountsLedger.accounts_account_id'=>$accounts_accounts['AccountsAccount']['id']),'fields'=>array('AccountsLedger.balance'),'order'=>array('AccountsLedger.id DESC')));
								 			if(!empty($accountbal)){
								 				$bbaalance = $accountbal['AccountsLedger']['balance'];
								 			}else{
								 				$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
								 			}
								 			$ledger->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
								 			$ledger->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
								 			$ledger->data['AccountsLedger']['payment_description']='Credit Amount';
								 			if($goldenrule['AccountsGoldenrule']['decrease']=='credit')
								 				{
								 					$ledger->data['AccountsLedger']['credit']=$ledgeramount;
								 					$ledger->data['AccountsLedger']['debit']=0;
								 				}
								 			else
								 				{
								 					$ledger->data['AccountsLedger']['debit']=$ledgeramount;
								 					$ledger->data['AccountsLedger']['credit']=0;
								 				}
								 			$ledger->data['AccountsLedger']['balance']=$accountbal['AccountsLedger']['balance']-$ledgeramount;
											}
								}
							
						}
						
					}
					$success=1;
					$this->set(compact('success'));
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Invoice changed to void</div>'));
					$this->redirect(array('action'=>'index'));
							
		}
			
			if($flag==1)
			{
				$this->loadModel('AccountsClientinvoicedetail');
				$this->loadModel('AccountsClientpaymentdetail');
				foreach($this->data['DeleteInvoiceData']['invoiceList'] as $key1 =>$v1)
					{
						if($v1==1){
							$checkPaymentLog = $this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$key1)));
							if($checkPaymentLog){
								$checkPaymentLogflag = 1;
								$this->set(compact('checkPaymentLogflag'));
								$this->Session->setFlash(__('<div class="flashMessageSuccess">There is a payment logged against Invoice #'.$key.'.Please delete the paymentlog before deleting the invoice.</div>'));
								$this->redirect(array('action'=>'index'));
								
							}else{
								$this->loadModel('AccountsLedger');	
								$getLedgerEntry = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_clientinvoice_id'=>$key1),'fields'=>array('AccountsLedger.id')));
								if($getLedgerEntry)	{
									foreach($getLedgerEntry as$getLedgerEntryKey=>$getLedgerEntryVal ){
										$this->AccountsLedger->id=$getLedgerEntryVal['AccountsLedger']['id'];
										$this->AccountsLedger->delete();
									}
									
								}
								$this->AccountsClientinvoicedetail->deleteAll(array('AccountsClientinvoicedetail.accounts_clientinvoice_id' => $key1));
								$this->AccountsClientinvoice->id = $key1;
								$this->AccountsClientinvoice->delete();
						}
						
							
					}
					}
					$success=1;
					$this->set(compact('success'));
					$this->Session->setFlash(__('<div class="flashMessageSuccess">Invoice Deleted</div>'));
					$this->redirect(array('action' => 'index'));
			}
			
		}
 	}
		
	//$openinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.status'=>'open','AccountsClientinvoice.due_date >=' =>date('Y-m-d'),'AccountsClientinvoice.void'=>'N'/*,'AccountsClientinvoice.recurring '=>'N'*/)));
	$openinvoices	=	$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N','AccountsClientinvoice.status !='=>'draft','AccountsClientinvoice.service_startdate BETWEEN ? AND ?'=>array($finacialFromDate,$financialToDate))));
	$overdueinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array(/*'AccountsClientinvoice.status'=>'overdue',*/'AccountsClientinvoice.due_date <' =>date('Y-m-d'),'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N','AccountsClientinvoice.service_startdate BETWEEN ? AND ?'=>array($finacialFromDate,$financialToDate))));
	//$openoverdueinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('OR'=>array('AccountsClientinvoice.status'=>array('overdue','open')),'AccountsClientinvoice.void'=>'N')));
	$closedinvoices=$this->AccountsClientinvoice->find('count',array('conditions'=>array('AccountsClientinvoice.status'=>'closed','AccountsClientinvoice.void'=>'N','AccountsClientinvoice.service_startdate BETWEEN ? AND ?'=>array($finacialFromDate,$financialToDate))));
	$allbrand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
	
	
	if($flag==3){
		$conditions	=	array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N','AccountsClientinvoice.status !='=>'draft','AccountsClientinvoice.service_startdate BETWEEN ? AND ?'=>array($finacialFromDate,$financialToDate));
		//$conditions = array('AccountsClientinvoice.due_date >='=>date('Y-m-d'),'AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.void'=>'N');
	}
	if($flag==4){
		$conditions = array('AccountsClientinvoice.status' == 'Closed','AccountsClientinvoice.paid'=>'Y','AccountsClientinvoice.void'=>'N','AccountsClientinvoice.service_startdate BETWEEN ? AND ?'=>array($finacialFromDate,$financialToDate));
	}
	if($flag==5){
		$conditions = array('AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.due_date <'=>date('Y-m-d'),'AccountsClientinvoice.void'=>'N','AccountsClientinvoice.service_startdate BETWEEN ? AND ?'=>array($finacialFromDate,$financialToDate));
	}
	if($flag==6){
		$conditions = array('conditions'=>array('AccountsClientinvoice.service_startdate LIKE'=>date('Y-m').'%'));	
	}
	if($flag==7){
		$conditions = array('conditions'=>array('AccountsClientinvoice.paid'=>'N'));
	}
	if($flag==8){
		$conditions = array('conditions'=>array('AccountsClientinvoice.void'=>'N','AccountsClientinvoice.paid'=>'N','AccountsClientinvoice.service_startdate BETWEEN ? AND ?'=>array($finacialFromDate,$financialToDate)));
	}
	if(!$conditions){
		$conditions = array('AccountsClientinvoice.invoiced_date BETWEEN ? AND ?'=>array(date("Y-m-d", mktime(0, 0, 0, date("m")-1, 1, date("Y"))),date('Y-m-d')));
	}
	$this->Paginator->settings = array('conditions'=>$conditions,'limit'=>$pages,
						'fields'=>array('AccountsClientinvoice.*','Client.first_name','Client.last_name','Brand.brandname','Currency.id','Currency.symbol')
	);
	$accountlist=$this->AccountsAccount->find('list',array('conditions'=>array('AccountsAccount.asset_type'=>'Bank'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name')));
	$invoiceList = $this->Paginator->paginate('AccountsClientinvoice');
	$this->set('accountsClientinvoices', $invoiceList);
	
	$amounted=$this->AccountsClientinvoice->find('all',array('fields'=>array('SUM(AccountsClientinvoice.ajusted_invoiceamount) as total','Currency.id','Currency.symbol'),'conditions'=>$conditions,'group' => array('AccountsClientinvoice.currency_id')));
		
		
		
		foreach($amounted as $amountedKey => $amountedVal){
					$convertedAmount1 = $this->totalInvoiceConversion($amountedVal['Currency']['id'],$amountedVal['0']['total']);
					if($convertedAmount1){
						foreach($convertedAmount1 as $kcA => $kcV){
							$convertedAmountBillingCurrencyTotal[$kcA] = $convertedAmountBillingCurrencyTotal[$kcA] + $kcV;
						}
					}
					$convertedAmountBillingCurrency1 = $this->totalInvoiceConversionBilling($amountedVal['Currency']['id'],$amountedVal['0']['total']);
					if($convertedAmountBillingCurrency1){
						foreach($convertedAmountBillingCurrency1 as $kcB => $vcB){
							$convertedAmountBillingCurrencyTotal[$kcB] = $convertedAmountBillingCurrencyTotal[$kcB] + $vcB;
						}
					}	
				}
		
		$totalInvoicedAmount=null;$totalInvoicedAmountBilling=null;
		foreach($invoiceList as $invoiceKey =>$invoiceVal){
			$convertedAmount = $this->totalInvoiceConversion($invoiceVal['AccountsClientinvoice']['currency_id'],$invoiceVal['AccountsClientinvoice']['ajusted_invoiceamount']);
			if($convertedAmount){
				foreach($convertedAmount as $kcA => $kcV){
					$totalInvoicedAmount[$kcA] = $totalInvoicedAmount[$kcA] + $kcV;
				}
			}
			$convertedAmountBillingCurrency = $this->totalInvoiceConversionBilling($invoiceVal['AccountsClientinvoice']['currency_id'],$invoiceVal['AccountsClientinvoice']['ajusted_invoiceamount']);
			if($convertedAmountBillingCurrency){
				foreach($convertedAmountBillingCurrency as $kcB => $vcB){
					$totalInvoicedAmountBilling[$kcB] = $totalInvoicedAmountBilling[$kcB] + $vcB;
				}
			}	
		}
	
	$this->set(compact('allbrand','accountlist','flag'))	;
	$this->set(compact('brandfilter','statusfilter','sortbybrandid','openinvoices','overdueinvoices','convertedAmountBillingCurrencyTotal','closedinvoices','totalInvoicedAmountBilling','totalInvoicedAmount'));
    
    $finalArray1 = $this->Session->write('finalArray1',$this->paginate());
    
 }
 
 
 public function invoice_csv(){
 	//Configure::write('debug',2);
 	$act_client_invoices = $this->Session->read('finalArray1');
 	
 	$this->loadModel('Currency');
    $currencies = $this->Currency->find('list',array('fields'=>array('Currency.symbol','Currency.name')));
 	
 	$i=0;$final=null;$status=null;
    foreach($act_client_invoices as $key=>$value){
    	
    	$final[$i]['Id']             = $value['AccountsClientinvoice']['id'];
    	$final[$i]['Client']         = $value['Client']['first_name'].' '.$value['Client']['last_name'];
    	$final[$i]['Invoice Detail'] = $value['AccountsClientinvoice']['invoice_details'];
    	$final[$i]['Brand']          = $value['Brand']['brandname'];
    	$final[$i]['Date']           = $value['AccountsClientinvoice']['invoiced_date'];
    	$final[$i]['Due On']         = $value['AccountsClientinvoice']['due_date'];
    	$final[$i]['Amount']         = $currencies[$this->params['currency']].' '.$value['AccountsClientinvoice']['ajusted_invoiceamount'];
    	
    	$bal_due = $value['AccountsClientinvoice']['ajusted_invoiceamount'] - $value['AccountsClientinvoice']['amount_recieved']; 
    	if($value['AccountsClientinvoice']['paid'] == 'Y'){
    		 $balance='0.00';
    	}else{
    		 $balance = $currencies[$this->params['currency']].' '.$bal_due;
    	}
    	
    	$final[$i]['Balance Due']    = $balance;
    	
    	if($value['AccountsClientinvoice']['void'] == 'Y'){
    	    $status='Void';
    	}else{
    		$currentDateStatus = strtotime(date('Y-m-d'));  
			$dueDateStatus     = strtotime(date('Y-m-d',strtotime($value['AccountsClientinvoice']['due_date'])));
			if($value['AccountsClientinvoice']['status']=='draft'){
				$status='Draft';
			}elseif(($currentDateStatus <= $dueDateStatus) && ($value['AccountsClientinvoice']['paid'] == 'N')){
				$status='Draft';
			}elseif(($currentDateStatus >= $dueDateStatus) && ($value['AccountsClientinvoice']['paid'] == 'N')){
				$status='Over Due';
			}elseif(($value['AccountsClientinvoice']['status'] == 'closed')){
				$status='Closed';
			}															  
    	}	
    	
    	$final[$i]['Status'] = $status;
    	
    	$i++;
    }	
    $this->Export->exportCsv($final, 'invoice.csv');
 }
 
function getFinancialYear() {
              
  	$this->loadModel('Setting');  	
  	$fin_year  = $this->Setting->find('first',array('conditions'=>array('Setting.label'=>'Accounting Format', 'Setting.active'=>'Y'),'fields'=>array('Setting.value')));
    $fyear     = $fin_year['Setting']['value'];
    $fy        = explode('-',$fyear);
    if($fy[0] == 'Jan' && $fy[1] == 'Dec') {
    	$start_year = 01;
    	$end_year   = 12;
    }
    elseif($fy[0] == 'Apr' && $fy[1] == 'Mar')
    {
    	$start_year = 04;
    	$end_year   = 03;
    }
  
   $financial_year['start_year'] = $start_year;
   $financial_year['end_year']   = $end_year;

   return $financial_year;
  }
 public function totalInvoiceConversion($currencyId,$amount){
 	$this->loadModel('Currency');
 	$accountingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
 	$invoiceCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$currencyId)));
 	if($accountingCurrency['Currency']['id'] != $currencyId){
 		$from=$invoiceCurrency['Currency']['name'];
		$to=$accountingCurrency['Currency']['name'];
		$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
		$handle = @fopen($url, 'r');
		if ($handle) 
			{
		   		$result = fgets($handle, 4096);
		   		fclose($handle);
			}
		$allData = explode(',',$result);  //Get all the contents to an array 
		$convertedAmount[$accountingCurrency['Currency']['symbol']]=$amount*$allData['1'];
		$this->set(compact('symbol'));
 	}else{
 		$convertedAmount[$accountingCurrency['Currency']['symbol']] = $amount;
 	}
 	return $convertedAmount;
 }
 
 public function accountingCurrencyToClientCurrency($currencyId,$amount){
 	$this->loadModel('Currency');
 	$clientCurrency = $currencyId;
 	$clientCurrencyList = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$currencyId)));
 	$accountingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
 	if($accountingCurrency['Currency']['id'] != $currencyId){
 		$from = $accountingCurrency['Currency']['name'];
		$to   = $clientCurrencyList['Currency']['name'];
		$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
		$handle = @fopen($url, 'r');
		if ($handle) 
			{
		   		$result = fgets($handle, 4096);
		   		fclose($handle);
			}
										
		$allData = explode(',',$result);  //Get all the contents to an array 
		$convertedAmount = $amount*$allData['1'];
		$this->set(compact('symbol'));
 	}else{
 		$convertedAmount = $amount;
 	}
 	return $convertedAmount;
 	
 }
 
 public function totalInvoiceConversionBilling($currencyId,$amount){
 	$this->loadModel('Currency');
 	$defaulBillingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
 	$invoiceCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.id'=>$currencyId)));
 	if($defaulBillingCurrency['Currency']['id'] != $currencyId){
 		$from=$invoiceCurrency['Currency']['name'];
		$to=$defaulBillingCurrency['Currency']['name'];
		$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
		$handle = @fopen($url, 'r');
		if ($handle) 
			{
		   		$result = fgets($handle, 4096);
		   		fclose($handle);
			}
										
		$allData = explode(',',$result);  //Get all the contents to an array 
		$convertedAmount[$defaulBillingCurrency['Currency']['symbol']]=$amount*$allData['1'];
		$this->set(compact('symbol'));
 	}else{
 		$convertedAmount[$defaulBillingCurrency['Currency']['symbol']] = $amount;
 	}
 	return $convertedAmount;
 }
 public function totalInvoicedAmount(){
 	$this->loadModel('AccountsClientinvoice');
 	$this->loadModel('Currency');
 	$accountingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
 	$defaulBillingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
 	$accountsClientinvoiceAll = $this->AccountsClientinvoice->find('all',array('fields' => array('sum(AccountsClientinvoice.ajusted_invoiceamount)   AS ctotal','AccountsClientinvoice.currency_id'), 'conditions'=>array('AccountsClientinvoice.void'=>'N'),'group'=>array('AccountsClientinvoice.currency_id')));
 	foreach($accountsClientinvoiceAll as $accountsClientinvoiceAll){
 		if($accountsClientinvoiceAll['AccountsClientinvoice']['currency_id'] != $defaulBillingCurrency['Currency']['id']){
 			 $returnedDataBilling = $this->totalInvoiceConversionBilling($accountsClientinvoiceAll['AccountsClientinvoice']['currency_id'],$accountsClientinvoiceAll['0']['ctotal']);
 			 $billValue = $billValue + $returnedDataBilling[$defaulBillingCurrency['Currency']['symbol']];
 		}if($accountsClientinvoiceAll['AccountsClientinvoice']['currency_id'] != $accountingCurrency['Currency']['id']){
 			 $returnedDataAccounting = $this-> totalInvoiceConversion($accountsClientinvoiceAll['AccountsClientinvoice']['currency_id'],$accountsClientinvoiceAll['0']['ctotal']);
 			$accountValue = $accountValue + $returnedDataAccounting[$accountingCurrency['Currency']['symbol']];
 		}if($accountsClientinvoiceAll['AccountsClientinvoice']['currency_id'] == $defaulBillingCurrency['Currency']['id']){
 			$billValue = $billValue + $accountsClientinvoiceAll['0']['ctotal'];
 		}if($accountsClientinvoiceAll['AccountsClientinvoice']['currency_id'] == $accountingCurrency['Currency']['id']){
 			$accountValue = $accountValue + $accountsClientinvoiceAll['0']['ctotal'];
 		}
 	}
 	$totalInvoicedAmount[$accountingCurrency['Currency']['symbol']] = $accountValue;
 	$totalInvoicedAmount[$defaulBillingCurrency['Currency']['symbol']] = $billValue;
 	 	
 	return $totalInvoicedAmount;
 }
 public function updateCost()
 	{
 		
 	}
 public function creditNote()
 	{
 		
 		$this->loadModel('ClientCreditnote');
 				$this->loadModel('Currency');
 		if($this->data['Type']=='Yes')
 			{
 				$this->loadModel('ClientCreditnote');
 				$this->loadModel('Currency');
 				if($this->data['AccountsClientinvoice']['client'])
 					{
 						$creditNote=$this->ClientCreditnote->find('first',array('conditions'=>array('ClientCreditnote.client_id'=>$this->data['AccountsClientinvoice']['client'])));
 					}
 				else
 					{
 						$creditNote=$this->ClientCreditnote->find('first',array('conditions'=>array('ClientCreditnote.client_id'=>$this->data['client'])));
 					}
 				
 				if($this->data['AccountsClientinvoice']['creditNote'])
 					{
 						$creditNote_amount=$this->data['AccountsClientinvoice']['creditNote'];
 						$currencyCreditnote=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency'])));
 						$symbol=$currencyCreditnote['Currency']['symbol'];
 						if($this->data['AccountsClientinvoice']['creditNote']>0)
 							{
 								$available=1;
 							}
 						elseif($this->data['AccountsClientinvoice']['creditNote']<= 0)
 							{
 								$limitOver=1;
 							}
 						else
 							{
 								$notAvail = 1;
 							}
 						$this->set(compact('available','creditNote','limitOver','symbol','notAvail','creditNote_amount'));
 						debug($creditNote_amount);
 					
 					}
 				else
 					{
 						if($this->data['AccountsClientinvoice']['currency'])
 							{
 								$currencyCreditnote=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency'])));
 								$currencyCreditnote_from=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$creditNote['ClientCreditnote']['currency_id'])));
 								$from=$currencyCreditnote_from['Currency']['name'];
 								$to=$currencyCreditnote['Currency']['name'];
 								debug($from);
 								debug($to);
		 						/**************************************************************************************************************
								**********************************Spot Conversion Logic ****************************************************** 
								***************************************************************************************************************
								*/
								if($from == $to)
									{
										$creditNote_amount=$creditNote['ClientCreditnote']['amount'];
									}
								else
									{
										$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
										$handle = @fopen($url, 'r');
										if ($handle) 
											{
												$result = fgets($handle, 4096);
												fclose($handle);
											}
										$allData = explode(',',$result);  //Get all the contents to an array 
										$creditNote_amount=$creditNote['ClientCreditnote']['amount']*$allData['1'];
										debug($allData['1']);
									}
								
								/**************************************************************************************************************
								 **********************************Spot Conversion Logic ****************************************************** 
								 ***************************************************************************************************************
								*/
 							}
 						else
 							{
 						 		$currencyCreditnote=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$creditNote['ClientCreditnote']['currency_id'])));
 							 	$creditNote_amount=$creditNote['ClientCreditnote']['amount'];
 							}
 						$symbol=$currencyCreditnote['Currency']['symbol'];
 						if($creditNote['ClientCreditnote']['amount']>0)
 							{
 								$available=1;
 							}
 						elseif($creditNote['ClientCreditnote']['amount'] <= 0)
 							{
 								$limitOver=1;
 							}
 						else
 							{
 								$notAvail = 1;
 							}
 						$this->set(compact('available','creditNote','limitOver','symbol','notAvail','creditNote_amount'));
 					}
 			}
 				
 		else
 			{
 				if($this->data['AccountsClientinvoice']['client'])
 					{
 						
 						$creditNote=$this->ClientCreditnote->find('first',array('conditions'=>array('ClientCreditnote.client_id'=>$this->data['AccountsClientinvoice']['client'])));
 						
 					}
 				else
 					{
 						$creditNote=$this->ClientCreditnote->find('first',array('conditions'=>array('ClientCreditnote.client_id'=>$this->data['client'])));
 					}
 				$notavailable=1;
 				$this->set(compact('notavailable','creditNote'));
 			}
 	}

	public function view($id = null,$flag=null,$success=null,$error=null,$controller = null , $view = null) {
		/*configure::write('debug',2);*/
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('Currency');
		$this->loadModel('AccountsClientpaymentdetail');
		$accountingCurrency = $this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$this->set(compact('accountingCurrency'));
		if($controller && $view){
			$this->set(compact('controller','view'));
		}
		
		if($success) {
			$this->set(compact('success'));
		}
		if($error) {
			$this->set(compact('error'));
		}
		
		$this->AccountsClientinvoicedetail->recursive=0;
		
		$this->AccountsClientinvoice->id = $id;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		$accountsclientpaymentdetails=$this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$id)));
		debug($accountsclientpaymentdetails);
		$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
		$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
		if($accountsClientinvoice['AccountsClientinvoice']['recurring']=='Y') {
			$this->loadModel('AccountsClientrecurringinvoice');
			$recurringdetails=$this->AccountsClientrecurringinvoice->find('first',array('conditions'=>array('AccountsClientrecurringinvoice.accounts_clientinvoice_id'=>$id)));
			$frequency=$recurringdetails['AccountsClientrecurringinvoice']['frequency'];
			$frequencytype=$recurringdetails['AccountsClientrecurringinvoice']['frequency_type'];
			$this->set(compact('frequency','frequencytype'));
		}
		$currency=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
		$symbol=$currency['Currency']['symbol'];
		$latefee=$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		$brandid=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
		$icon_imagepath_url=$brandid['Brand']['icon_imagepath'];
		$icon_imagepath=$brandid['Brand']['icon_imagepath_url'];
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
		foreach($invoicedetails as $invdeta) {
			if($invdeta['AccountsClientinvoicedetail']['accounts_tax_id']) {
				$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])));
			} elseif($invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id']) {
				$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
			}
			if($invdeta['AccountsClientinvoicedetail']['accounts_tax_id']) {
				$taxarray[$invdeta['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['name'];
				$percent=$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['percent'];
				$taxableamount_view=($percent*$invdeta['AccountsClientinvoicedetail']['totalcost'])/100;
				$taxarray[$invdeta['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxarray[$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTax']['id']]['value']+$taxableamount_view;
			} elseif($invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id']) {
				$this->loadModel('AccountsTaxgroupmapping');
				if($taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]['AccountsTaxgroup']['compounded']=='Y') {
					$findgroup=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>'AccountsTaxgroupmapping.priority ASC'));
					$taxableamount_view=0;
					foreach($findgroup as $kgroup=>$vgroup) {
						$accountstax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vgroup['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=$accountstax['AccountsTax']['percent']/100;
						if((!$taxableamount_view) || ($taxableamount_view==0)) {
							$taxableamount_view=$invdeta['AccountsClientinvoicedetail']['totalcost'];
						}
						$taxarray[$accountstax['AccountsTax']['id']]['name']=$accountstax['AccountsTax']['name'];
						$taxarray[$accountstax['AccountsTax']['id']]['value']=$taxarray[$accountstax['AccountsTax']['id']]['value']+(($taxableamount_view*$percent));
						$taxableamount_view=$taxableamount_view+($taxableamount_view*$percent);
					}
				} else {
					$findgroup=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$invdeta['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>'AccountsTaxgroupmapping.priority ASC'));
					$taxableamount_view=0;
					foreach($findgroup as $kgroup=>$vgroup) {
						$accountstax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vgroup['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=$accountstax['AccountsTax']['percent']/100;
						$taxableamount_view=$invdeta['AccountsClientinvoicedetail']['totalcost'];
						$taxarray[$accountstax['AccountsTax']['id']]['name']=$accountstax['AccountsTax']['name'];
						$taxarray[$accountstax['AccountsTax']['id']]['value']=$taxarray[$accountstax['AccountsTax']['id']]['value']+(($taxableamount_view*$percent));
					}
				}
			}
		}
		/**
		 * Accounts Ledger Entries for payment history*/
		
			//$paymentLogs =  $this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$id)));
		
		
		
		
		/**
		 * Accounts Ledger Entries for payment history ends*/
		$this->set(compact('accountsclientpaymentdetails','symbol','taxarray','latefee','icon_imagepath_url','icon_imagepath','brands','invoicedetails','accountsClientinvoice','clientdetails','flag','taxdetail'));
	if($flag==4) {
		$this->loadModel('ClientEmailtype');
		$this->loadModel('ClientsEmailhistory');
		$this->loadModel('Staff');
		$emailrecords=$this->ClientsEmailhistory->find('all',array('conditions'=>array('ClientsEmailhistory.accounts_clientinvoice_id'=>$id)));
		foreach($emailrecords as $ke=>$ve) {
			$staffdetails=$this->Staff->find('first',array('conditions'=>array('Staff.id'=>$ve['ClientsEmailhistory']['staff_id'])));
			$staffemail[$ve['ClientsEmailhistory']['id']]=$staffdetails['Staff']['email1'];
			$emailtype=$this->ClientEmailtype->find('first',array('conditions'=>array('ClientEmailtype.id'=>$ve['ClientsEmailhistory']['client_emailtype_id'])));
			$emailtypes[$ve['ClientsEmailhistory']['id']]=$emailtype['ClientEmailtype']['email_type'];
			$date=explode(' ',$ve['ClientsEmailhistory']['date'] );
			$date[$ve['ClientsEmailhistory']['id']]=AppModel::dateFormat($date[0]);
		}
		$this->set(compact('emailrecords','staffemail','emailtypes','date'));
	}
	if($flag==3) {
		$this->loadModel('ClientsCommenthistory');
		$this->loadModel('Staff');
		$final_comments=$this->ClientsCommenthistory->find('all',array('conditions'=>array('ClientsCommenthistory.accounts_clientinvoice_id'=>$id)));
		foreach($final_comments as $ke=>$ve) {
			$staffdetails=$this->Staff->find('first',array('conditions'=>array('Staff.id'=>$ve['ClientsCommenthistory']['staff_id'])));
			$staffemail[$ve['ClientsCommenthistory']['id']]=$staffdetails['Staff']['email1'];
		}
		$this->set(compact('final_comments','staffemail'));
	}
	if($flag==2) {
			$this->loadModel('Client');
			$this->loadModel('AccountsClientpaymentdetails');
			$this->loadModel('Currency');
			$payment_history=$this->AccountsClientpaymentdetails->find('first',array('conditions'=>array('AccountsClientpaymentdetails.accounts_clientinvoice_id'=>$id)));
			$invoiceinfo=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$payment_history['AccountsClientpaymentdetails']['accounts_clientinvoice_id'])));
			$currencyinfo=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$invoiceinfo['AccountsClientinvoice']['currency_id'])));
			$symbol=$currencyinfo['Currency']['symbol'];
			$clientinfo=$this->Client->find('first',array('Client.id'=>$payment_history['AccountsClientpaymentdetails']['client_id']));
			$clientname=$clientinfo['Client']['first_name'].$clientinfo['Client']['last_name'];
			$date_pay=$payment_history['AccountsClientpaymentdetails']['received_date'];
			$this->set(compact('clientname','date_pay','payment_history','symbol'));
	}
	
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		//Configure::write('debug',2);
		//debug($this->data);
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsLedger');
		$this->loadModel('Client');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('Currency');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		if($this->data)
		{
			if($this->data['AccountsClientinvoice']['term'])
				{
					if($this->data['AccountsClientinvoice']['invoice_date'])
						{
							if($this->data['AccountsClientinvoice']['service_startdate'])
								{
										if(($this->data['client'] && $this->data['AccountsClientinvoice']['brand']) || ($this->data['AccountsClientinvoice']['client'] && $this->data['AccountsClientinvoice']['brand']))
											{
												if(($this->data['price_unit1'] || $this->data['price_unit2'])  && ($this->data['AccountsClientinvoice']['quantity_unit1']  || $this->data['AccountsClientinvoice']['quantity_unit2']) && ($this->data['updateunit_name1'] || $this->data['updateunit_name2']) )
													{
														if ($this->request->is('post')){
															$clientNameForLedger = $this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
															$this->AccountsClientinvoice->create();
															$savearray->data=null;
															$savearray->data['AccountsClientinvoice']['client_id']=$this->data['client'];
															$savearray->data['AccountsClientinvoice']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
															$savearray->data['AccountsClientinvoice']['invoice_details']=$this->data['AccountsClientinvoice']['invoiceDetail'];
															$savearray->data['AccountsClientinvoice']['invoiced_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
															$savearray->data['AccountsClientinvoice']['service_startdate']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
															if($this->data['due_date']){
																$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d',strtotime($this->data['due_date']));
															}
															else{
																$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date']));
															}
															$savearray->data['AccountsClientinvoice']['late_feedetails']=$this->data['AccountsClientinvoice']['latefee'];
															$savearray->data['AccountsClientinvoice']['paymentdue_term']=$this->data['AccountsClientinvoice']['term'];
															$savearray->data['AccountsClientinvoice']['client_notes']=$this->data['AccountsClientinvoice']['notes'];
															$savearray->data['AccountsClientinvoice']['client_termsandcondition']=$this->data['AccountsClientinvoice']['t&c'];
															if($this->data['AccountsClientinvoice']['currency'])
															{
																$savearray->data['AccountsClientinvoice']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
															}
															else
																{
																	$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client']),'fields'=>array('Client.currency_id')));
																	$savearray->data['AccountsClientinvoice']['currency_id']=$clientInfo['Client']['currency_id'];
																}
															//to decide the status of the invoice
																$invoiced_date=strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
																if($this->data['due_date'])
																{
																	$due_date=strtotime(date('Y-m-d',strtotime($this->data['due_date'])));
																}
																else
																{
																	$due_date=strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date'])));
																}
																if($this->data['draft'] == 'Yes'){
																	$status = "draft";
																}else{
																	$current_date=strtotime(date('Y-m-d'));
																	
																	if($current_date<=$due_date){
																		
																	$status="open";
																	}
																	/*if($current_date==$due_date){
																	$status="closed";
																	}*/
																	if($current_date>$due_date)
																	{
																	  $status="overdue";
																	}
																}
																
																
																$savearray->data['AccountsClientinvoice']['status']=$status;
															//ends here
															/*//Calculation For final Amount and final discount
																if($this->data['grandTotal']){
																	$payabletotal = $this->numberconversion($this->data['grandTotal']);
																}
																$payabletotal=$payabletotal + $this->numberconversion($this->data['total'])+$this->numberconversion($this->data['total1']);
																foreach($this->data['total2'] as $key1=>$val1){
																	foreach($val1 as $keyval1=>$vals1){
																		$payabletotal=$payabletotal+$this->numberconversion($vals1);
																	}
																}
																$nettotal=$this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1'])+$this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']);
																foreach($this->data['price_unit'] as $key=>$val){
																	$nettotal=$nettotal+($this->data['quantity_unit'][$key]*$this->numberconversion($val));
																}
																
																$discountavailed=$nettotal-$payabletotal;
																$discountpercent=($discountavailed/$nettotal)*100;
																foreach($this->data['service_tax'] as $keyservice=>$valservice)
																{
																	$alltaxessum=$alltaxessum+$valservice;
																}
																$finalamount=$payabletotal+$alltaxessum+$this->data['AccountsClientinvoice']['latefee'];
																$savearray->data['AccountsClientinvoice']['invoice_amount']=$finalamount;
																if($this->data['Type']=='Yes'){
																		if($finalamount>$this->data['creditNote']){
																				$creditApplied = $this->numberconversion($this->data['creditNote']);
																				$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount']=$finalamount-$this->numberconversion($this->data['creditNote']);
																			}
																		else
																			{
																				$creditApplied = $this->numberconversion($this->data['creditNote']) - $finalamount;
																				$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = 0;
																			}
																		
																		$savearray->data['AccountsClientinvoice']['credit_note']='Y';
																	}
																else
																	{
																		$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount']=$finalamount;
																	}
																$savearray->data['AccountsClientinvoice']['discounts']=$discountpercent;
															//ends here
															debug($finalamount);*/
															
															$savearray->data['AccountsClientinvoice']['invoice_amount'] = $this->data['grandTotal'];
															$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = $this->data['grandTotal'];
															$finalamount = $this->data['grandTotal'];
															
															
															if ($this->AccountsClientinvoice->save($savearray->data))
																 {
																 	
																 	if($this->data['Type']=='Yes')
																		{
																			debug('typeeee');
																 			$this->loadModel('ClientCreditnote');
																 			$creditNoteUpdate=$this->ClientCreditnote->find('first',array('conditions'=>array('ClientCreditnote.id'=>$this->data['creditNoteId'])));
																 			$updatenote->data=null;
																 			$updatenote->data['ClientCreditnote']['id']=$this->data['creditNoteId'];
																 			if($finalamount>$this->data['creditNote'])
																 				{
																 					$updatenote->data['ClientCreditnote']['amount']=$creditNoteUpdate['ClientCreditnote']['amount'] - $this->numberconversion($this->data['creditNote']);
																 					$ledgerEntry=$this->numberconversion($this->data['creditNote']);
																 				}
																 			else
																 				{
																 					$updatenote->data['ClientCreditnote']['amount']= $creditApplied;
																 					$ledgerEntry=$creditApplied;
																 				}
																 			
																 			$updatenote->data['ClientCreditnote']['datemodified'] = strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date'])));;
																 			if($this->ClientCreditnote->save($updatenote->data))
																 				{
																 					/**************************************************************************************************************
																				 	 **********************************Spot Conversion Logic ****************************************************** 
																				 	***************************************************************************************************************
																				 	*/
																				 	
																				 	$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
																				 	$clientCurency=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
																				 	if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($billingcurrency['Currency']['id']!=$clientCurency['Client']['currency_id'])))
																						{
																							
																							$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
																							$from=$fromcur['Currency']['name'];
																							$to=$billingcurrency['Currency']['name'];
																							
																							$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
																							$handle = @fopen($url, 'r');
																							if ($handle) 
																								{
														    											$result = fgets($handle, 4096);
														    											fclose($handle);
																								}
																							$allData = explode(',',$result);  //Get all the contents to an array 
																							$ledgeramountPay=$ledgerEntry*$allData['1'];
																							
																						}
																						else
																						{
																							$ledgeramountPay=$ledgerEntry;
																						}
																						debug($ledgeramountPay);
																				 	/**************************************************************************************************************
																				 	 **********************************Spot Conversion Logic ****************************************************** 
																				 	***************************************************************************************************************
																				 	*/
																				 		$last1=$this->AccountsClientinvoice->getLastInsertID();
																				 		$this->AccountsLedger->create();
																				 		$ledgerPay->data=null;
																				 		$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable')));
																				 		$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
																				 		if(!empty($accountbal)){
																				 			$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
																				 		}else{
																				 			$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
																				 		}
																				 		$ledgerPay->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
																				 		$ledgerPay->data['AccountsLedger']['date']=strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
																				 		$ledgerPay->data['AccountsLedger']['payment_description']='Debit Amount';
																				 		$ledgerPay->data['AccountsLedger']['cheque_no']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
																				 		$ledgerPay->data['AccountsLedger']['debit']=$ledgeramountPay;
																				 		$ledgerPay->data['AccountsLedger']['is_neutral']='Y';
																				 		if($this->AccountsLedger->save($ledgerPay->data))
																				 			{
																				 				/* To Insert a proper transaction id code change wrt to latest ledger entry*/
																				 				$ledgerLastEntry = $this->AccountsLedger->getLastInsertID();
																				 				$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry;
																				 				$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
																				 				$this->AccountsLedger->save($ledgerPay->data);
																				 				/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
																				 				$closingBalance->data = null;
																				 				$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
																				 				$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramountPay;;
																				 				$this->AccountsAccount->save($closingBalance->data);
																								
																								/**Log Code**/
																								$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$accounts_accounts['AccountsAccount']['id'],0,$ledgerPay->data['AccountsLedger']['debit'],$bbaalance,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry,0,$last1,'Add Invoice','Add invoice'));
																								/**Log Code**/
																								
																				 				$last1=$this->AccountsClientinvoice->getLastInsertID();
																				 				$this->AccountsLedger->create();
																						 		$ledgerrcv->data=null;
																						 		$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
																						 		$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
																						 		if(!empty($accountbal)){
																						 			$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
																						 		}else{
																						 			$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
																						 		}
																						 		$ledgerrcv->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
																						 		$ledgerrcv->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
																						 		$ledgerrcv->data['AccountsLedger']['date']=strtotime(date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date'])));
																						 		$ledgerrcv->data['AccountsLedger']['payment_description']='Credit Amount';
																						 		$ledgerrcv->data['AccountsLedger']['cheque_no']='Amount Credited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for'.$clientNameForLedger['Client']['client_companyname'];
																						 		$ledgerrcv->data['AccountsLedger']['is_neutral']='Y';
																						 		$ledgerrcv->data['AccountsLedger']['credit']=$ledgeramountPay;
																						 		$this->AccountsLedger->save($ledgerrcv->data);
																						 		/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
																						 		
																						 		$ledgerIDDDD = $this->AccountsLedger->getLastInsertId();
																						 		$closingBalance->data = null;
																				 				$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
																				 				$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramountPay;
																				 				$this->AccountsAccount->save($closingBalance->data);
																								
																								/**Log Code**/
																								$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$accounts_accounts['AccountsAccount']['id'],$ledgerrcv->data['AccountsLedger']['credit'],0,$bbaalance,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerIDDDD,0,$last1,'Add Invoice','Add invoice'));
																								/**Log Code**/
																				 		}
																 				}
																		}
																 	
																 	
																 	
																 	
																 	
																 	
																 	/**************************************************************************************************************
																 	 **********************************Spot Conversion Logic ****************************************************** 
																 	***************************************************************************************************************
																 	*/
																 	
																 	$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
																 	$clientCurency=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
																 	if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($billingcurrency['Currency']['id']!=$clientCurency['Client']['currency_id'])))
																		{
																			$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
																			$from=$fromcur['Currency']['name'];
																			$to=$billingcurrency['Currency']['name'];
																			
																			$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
																			$handle = @fopen($url, 'r');
																			if ($handle) 
																				{
										    											$result = fgets($handle, 4096);
										    											fclose($handle);
																				}
																			$allData = explode(',',$result);  //Get all the contents to an array 
																			$ledgeramount=$finalamount*$allData['1'];
																			$symbol=$fromcur['Currency']['symbol'];
																			$this->set(compact('symbol'));
																		}
																		else
																		{
																			$ledgeramount=$finalamount;
																		}
																 	/**************************************************************************************************************
																 	 **********************************Spot Conversion Logic ****************************************************** 
																 	***************************************************************************************************************
																 	*/
																 	$last1=$this->AccountsClientinvoice->getLastInsertID();
																 	if($this->data['draft'] == 'NO'){
																 		debug('draft_no');
																 		$this->AccountsLedger->create();
																 		$ledger->data=null;
																 		$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
																 		$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
																 		if(!empty($accountbal)){
																 			$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
																 		}else{
																 			$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
																 		}
																 		debug($ledgeramountPay);
																 		$ledger->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
																 		$ledger->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
																 		$ledger->data['AccountsLedger']['payment_description']='Credit Amount';
																 		$ledger->data['AccountsLedger']['cheque_no']='Amount Credited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
																 		$ledger->data['AccountsLedger']['is_neutral']='Y';
																 		$ledger->data['AccountsLedger']['accounts_clientinvoice_id']=$last1;
																 		$ledger->data['AccountsLedger']['credit']=$ledgeramount;
																		if($this->AccountsLedger->save($ledger->data))
																 		{
																 			$ledgerLastEntry = $this->AccountsLedger->getLastInsertID();
																			$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry;
																			$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
																			$this->AccountsLedger->save($ledgerPay->data);
																 			/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
																			$closingBalance->data = null;
																			$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
																			$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance+$ledgeramount;
																			$this->AccountsAccount->save($closingBalance->data);
																			
																			/**Log Code**/
																			$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],$ledger->data['AccountsLedger']['credit'],0,$bbaalance,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry,0,$last1,'Add Invoice','Add invoice'));
																			/**Log Code**/
																			
																			
																 			$this->AccountsLedger->create();
																 			$ledgerincome->data=null;
																 			$accounts_accounts_income=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Sales')));
																 			$accountbal_income = $accounts_accounts_income['AccountsAccount']['closing_balance'];
																 			if(!empty($accountbal_income)){
																 				$bbaalance_income = $accounts_accounts_income['AccountsAccount']['closing_balance'];
																 			}else{
																 				$bbaalance_income = $accounts_accounts_income['AccountsAccount']['opening_balance'];
																 			}
																 			$ledgerincome->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
																 			$accounttype_income=$this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accounts_accounts_income['AccountsAccount']['account_type_id'])));
																 			$ledgerincome->data['AccountsLedger']['accounts_account_id']=$accounts_accounts_income['AccountsAccount']['id'];
																 			$ledgerincome->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
																 			$ledgerincome->data['AccountsLedger']['payment_description']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
																 			$ledgerincome->data['AccountsLedger']['cheque_no']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for'.$clientNameForLedger['Client']['client_companyname'];
																 			$ledgerincome->data['AccountsLedger']['debit']=$ledgeramount;
																 			$ledgerincome->data['AccountsLedger']['accounts_clientinvoice_id']=$last1;
																 			$ledgerincome->data['AccountsLedger']['is_neutral']='Y';
																 			$this->AccountsLedger->save($ledgerincome->data);
																 			/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
																 			
																 			$ledgerLastEntryLasttt = $this->AccountsLedger->getLastInsertId();
																			$closingBalance->data = null;
																			$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts_income['AccountsAccount']['id'];
																			$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramount;
																			$this->AccountsAccount->save($closingBalance->data);
																			
																			
																			/**Log Code**/
																			$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],0,$ledgerincome->data['AccountsLedger']['debit'],$bbaalance,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntryLasttt,0,$last1,'Add Invoice','Add invoice'));
																			/**Log Code**/
																			
																			
																			
																 			}
																 		 }
																 	if($this->data['updateunit_name1'])
																 	{
																	 		$this->AccountsClientinvoicedetail->create();
																	 		$save1->data=null;
																	 		$save1->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
																 			$save1->data['AccountsClientinvoicedetail']['unit_type']=$this->data['AccountsClientinvoice']['type1'];
																 			if($this->data['AccountsClientinvoice']['type1']=='package')
																		 		{
																		 			$save1->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['updateunit_name1'];
																		 		}
																 			if($this->data['AccountsClientinvoice']['type1']=='service')
																		 		{
																		 			$save1->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['updateunit_name1'];
																		 		}
																		 	if($this->data['AccountsClientinvoice']['type1']=='unit')
																		 		{
																		 			$save1->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['updateunit_name1'];
																		 		}
																 		$save1->data['AccountsClientinvoicedetail']['quantity']=$this->data['AccountsClientinvoice']['quantity_unit1'];
																 		if($this->data['AccountsClientinvoice']['addtax1'])
																 		{
																 			$explodedata=explode('-',$this->data['AccountsClientinvoice']['addtax1']);
																 			if($explodedata[1])
																 			{
																 				$save1->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$explodedata[1];
																 			}
																 			else
																 			{
																 				$save1->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['AccountsClientinvoice']['addtax1'];
																 				$taxvalue1=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax1'])));
																 			}
																 		  }
																 		if($this->data['AccountsClientinvoice']['discount1'])
																		 		{
																		 			$save1->data['AccountsClientinvoicedetail']['discount']=$this->data['AccountsClientinvoice']['discount1'];
																		 			$discountone=(($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']))*$this->data['AccountsClientinvoice']['discount1'])/100;
																		 			$save1->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']))-$discountone);
																		 		}
																		 		else
																		 		{
																		 			$save1->data['AccountsClientinvoicedetail']['totalcost']=($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']));
																		 		}
																 		$save1->data['AccountsClientinvoicedetail']['description']=$this->data['AccountsClientinvoice']['description1'];
																 		$save1->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit1']);
																 		$this->AccountsClientinvoicedetail->save($save1->data,array('validate'=>false));
																 	  }
																 	if($this->data['updateunit_name2'])
																 	{
																 		$this->AccountsClientinvoicedetail->create();
																 		$save2->data=null;
																 		$save2->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
																 			$save2->data['AccountsClientinvoicedetail']['unit_type']=$this->data['AccountsClientinvoice']['type2'];
																 			if($this->data['AccountsClientinvoice']['type2']=='package')
																		 		{
																		 			$save2->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['updateunit_name2'];
																		 		}
																		 	if($this->data['AccountsClientinvoice']['type2']=='service')
																		 		{
																		 			
																		 			$save2->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['updateunit_name2'];
																		 		}
																		 	if($this->data['AccountsClientinvoice']['type2']=='unit')
																		 		{
																		 			$save2->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['updateunit_name2'];
																		 		}
																		 	$save2->data['AccountsClientinvoicedetail']['quantity']=$this->data['AccountsClientinvoice']['quantity_unit2'];
																		 		
																		 	if($this->data['AccountsClientinvoice']['addtax2'])
																 				{
																 					$explodedata2=explode('-',$this->data['AccountsClientinvoice']['addtax2']);
																 					if($explodedata2[1])
																 					{
																 						$save2->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$explodedata2[1];
																 					}
																 					else
																 					{
																 						$save2->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['AccountsClientinvoice']['addtax2'];
																 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax2'])));
																 					}
																 					
																 			
																 				}
																 			if($this->data['AccountsClientinvoice']['discount2'])
																 				{
																 					$save2->data['AccountsClientinvoicedetail']['discount']=$this->data['AccountsClientinvoice']['discount2'];
																 					$discounttwo=(($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']))*$this->data['AccountsClientinvoice']['discount2'])/100;
																 					$save2->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']))-$discounttwo);
																 				}
																 			else
																 				{
																 					$save2->data['AccountsClientinvoicedetail']['totalcost']=($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']));
																 				}
																 					$save2->data['AccountsClientinvoicedetail']['description']=$this->data['AccountsClientinvoice']['description2'];
																 					$save2->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit2']);
																 					$this->AccountsClientinvoicedetail->save($save2->data,array('validate'=>false));
																 	}
																 	
																 	
																 	if($this->data['unit_name'])
																 	{   
																 		foreach($this->data['unit_name'] as $k=>$v)
																 		{
																 			$this->AccountsClientinvoicedetail->create();
																 			$save3->data=null;
																 			$save3->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
																 			$save3->data['AccountsClientinvoicedetail']['unit_type']=$this->data['type'][$k];
																 			if($this->data['type'][$k]=='package')
																		 		{
																		 			$save3->data['AccountsClientinvoicedetail']['brands_package_id']=$v;
																		 		}
																		 	if($this->data['type'][$k]=='service')
																		 		{
																		 			$save3->data['AccountsClientinvoicedetail']['brands_service_id']=$v;
																		 		}
																		 	if($this->data['type'][$k]=='unit')
																		 		{
																		 			$save3->data['AccountsClientinvoicedetail']['billing_unit_id']=$v;
																		 		}
																 			$save3->data['AccountsClientinvoicedetail']['quantity']=$this->data['quantity_unit'][$k];
																		 	if($this->data['addtax'][$k])
																 				{
																 					$eplodedata3=explode('-',$this->data['addtax'][$k]);
																 					if($eplodedata3[1])
																 					{
																 						$save3->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$eplodedata3[1];
																 					}
																 					else
																 					{
																 						$save3->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
																 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax'][$k])));
																 					}
																 					
																 			
																 				}
																 			if($this->data['discount'][$k])
																 				{
																 					$save3->data['AccountsClientinvoicedetail']['discount']=$this->data['discount'][$k];
																 					$discount[$k]=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))*$this->data['discount'][$k])/100;
																 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))-$discount[$k]);
																 				}
																 			else
																 				{
																 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k])));
																 				}
																 		
																		$save3->data['AccountsClientinvoicedetail']['description']=$this->data['description'][$k];
																 		$save3->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit'][$k]);
																 		$this->AccountsClientinvoicedetail->save($save3->data,array('validate'=>false));
																 		}
																 	}
																	$this->Session->setFlash(__('<div class="flashMessageSuccess">The accounts clientinvoice has been saved</div>'));
																	$this->redirect(array('action' => 'view',$last1));
																	$success=1;
																	$this->set(compact('success'));
																 } 
															else 
																{
																	$fail=1;
																	$this->Session->setFlash(__('<div class="flashMessageError">The accounts clientinvoice could not be saved. Please, try again.</div>',true));
																	$this->set(compact('fail'));
																	return;
																}
															}
													}
												else
												{	
													
													$fail=1;
													$this->set(compact('fail'));
													$this->Session->setFlash(__('<div class="flashMessageError"> Add Some Item.</div>'));
													$this->loadModel('Client');
													$this->loadModel('AccountsTax');
													$this->loadModel('Brand');
													$this->loadModel('Company');
													$this->loadModel('Currency');
													$this->loadModel('AccountsTaxgroup');
													$this->loadModel('AccountsTaxgroupmapping');
													
													
																//Tree For Taxes
															
																$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																if($tax_groups_details){
																	foreach ($tax_groups_details as $t1 => $t2) 
																	{
																		$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																		foreach($tax_mappings as $m1 => $m2)
																			{
																				$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																				foreach($taxname as $name1 => $name2)
																					{
																						$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																						//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																		
																						$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																						//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
																		
																						$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																		
																					}
																			}
																	}
																}else{
																	$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																}
																	ksort($final_taxes);
																
																	$this->set(compact('final_taxes'));
																		$var = 0;		
															
																		foreach($final_taxes as $f1 => $f2)
																				{
																					if(is_array($f2))
																						{
																							$name_exp = explode('-',$f1);
																								$list[$f1] = $name_exp[0];
																							foreach($f2 as $v1 => $v2)
																								{
																									foreach($v2 as $id1 => $name1)
																										{
																											//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																											$list[$f1.$id1]='|--'.$name1;
																										}
																								}
																		 		 		 }
																
																						else
																							{
																								$list[$f1] = $f2;
																							}
																				}
															$this->set(compact('list'));
															//Tree For Tax Types Ends Here
															$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																foreach($currency as $key=>$val)
																	{
																		$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																	}
																$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));	
																
																
																
															
													$this->Session->setFlash(__('<div class="flashMessageError">Select some resources.Invoice cannot be Null</div>',true));
													return;
												}
											
										
													
												}
												else
													{
														$error=1;
														$this->set(compact('error'));
														$this->Session->setFlash(__('<div class="flashMessageError"> Select a client.</div>'));
														$this->loadModel('Client');
																$this->loadModel('AccountsTax');
																$this->loadModel('Brand');
																$this->loadModel('Company');
																$this->loadModel('Currency');
																$this->loadModel('AccountsTaxgroup');
																$this->loadModel('AccountsTaxgroupmapping');
																
																
																//Tree For Taxes
																$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																	if($tax_groups_details){
																		foreach ($tax_groups_details as $t1 => $t2) 
																		{
																			$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																			foreach($tax_mappings as $m1 => $m2)
																				{
																					$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																					foreach($taxname as $name1 => $name2)
																						{
																							$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																							$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
																			
																							$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																						}
																				}
																		}
																	}else{
																		$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																	}
																	ksort($final_taxes);
																
																	$this->set(compact('final_taxes'));
															
																	$var = 0;		
															
																		foreach($final_taxes as $f1 => $f2)
																				{
																					if(is_array($f2))
																						{
																							$name_exp = explode('-',$f1);
																								$list[$f1] = $name_exp[0];
																							foreach($f2 as $v1 => $v2)
																								{
																									foreach($v2 as $id1 => $name1)
																										{
																											//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																											$list[$f1.$id1]='|--'.$name1;
																										}
																								}
																		 		 		 }
																
																						else
																							{
																								$list[$f1] = $f2;
																							}
																				
																
																
																				}
															
															
															
															
															$this->set(compact('list'));
															
															
															
															//Tree For Tax Types Ends Here
																
																
																
																
																$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																foreach($currency as $key=>$val)
																	{
																		$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																	}
																$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));
													}	
								}
							else
								{
									$error=1;
									$this->set(compact('error'));
									$this->Session->setFlash(__('<div class="flashMessageError"> Enter a service start date.</div>'));
									$this->loadModel('Client');
									$this->loadModel('AccountsTax');
									$this->loadModel('Brand');
									$this->loadModel('Company');
									$this->loadModel('Currency');
									$this->loadModel('AccountsTaxgroup');
									$this->loadModel('AccountsTaxgroupmapping');
																
																
																//Tree For Taxes
															
																$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																	if($tax_groups_details){
																		foreach ($tax_groups_details as $t1 => $t2) 
																		{
																			$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																			foreach($tax_mappings as $m1 => $m2)
																				{
																					$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																					foreach($taxname as $name1 => $name2)
																						{
																							$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																							$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
																			
																							$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																						}
																				}
																		}
																	}else{
																		$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																	}
																	ksort($final_taxes);
																
																	$this->set(compact('final_taxes'));
															
																	$var = 0;		
															
																		foreach($final_taxes as $f1 => $f2)
																				{
																					if(is_array($f2))
																						{
																							$name_exp = explode('-',$f1);
																								$list[$f1] = $name_exp[0];
																							foreach($f2 as $v1 => $v2)
																								{
																									foreach($v2 as $id1 => $name1)
																										{
																											//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																											$list[$f1.$id1]='|--'.$name1;
																										}
																								}
																		 		 		 }
																
																						else
																							{
																								$list[$f1] = $f2;
																							}
																				
																
																
																				}
															
															
															
															
															$this->set(compact('list'));
															
															
															
															//Tree For Tax Types Ends Here
																
																
																
																
																$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																foreach($currency as $key=>$val)
																	{
																		$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																	}
																$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));
								}	
						}
					else
						{
							$error=1;
														$this->set(compact('error'));
														$this->Session->setFlash(__('<div class="flashMessageError"> Select a invoice date.</div>'));
														$this->loadModel('Client');
																$this->loadModel('AccountsTax');
																$this->loadModel('Brand');
																$this->loadModel('Company');
																$this->loadModel('Currency');
																$this->loadModel('AccountsTaxgroup');
																$this->loadModel('AccountsTaxgroupmapping');
																
																
																//Tree For Taxes
															
																$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																	if($tax_groups_details){
																		foreach ($tax_groups_details as $t1 => $t2) 
																		{
																			$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																			foreach($tax_mappings as $m1 => $m2)
																				{
																					$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																					foreach($taxname as $name1 => $name2)
																						{
																							$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																							$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
																			
																							$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																						}
																				}
																		}
																	}else{
																		$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																	}
																	ksort($final_taxes);
																
																	$this->set(compact('final_taxes'));
															
																	$var = 0;		
															
																		foreach($final_taxes as $f1 => $f2)
																				{
																					if(is_array($f2))
																						{
																							$name_exp = explode('-',$f1);
																								$list[$f1] = $name_exp[0];
																							foreach($f2 as $v1 => $v2)
																								{
																									foreach($v2 as $id1 => $name1)
																										{
																											//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																											$list[$f1.$id1]='|--'.$name1;
																										}
																								}
																		 		 		 }
																
																						else
																							{
																								$list[$f1] = $f2;
																							}
																				
																
																
																				}
															
															
															
															
															$this->set(compact('list'));
															
															
															
															//Tree For Tax Types Ends Here
																
																
																
																
																$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																foreach($currency as $key=>$val)
																	{
																		$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																	}
																$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));
						}	
				}
			else
				{
					$error=1;
														$this->set(compact('error'));
														$this->Session->setFlash(__('<div class="flashMessageError"> Select a term.</div>'));
														$this->loadModel('Client');
																$this->loadModel('AccountsTax');
																$this->loadModel('Brand');
																$this->loadModel('Company');
																$this->loadModel('Currency');
																$this->loadModel('AccountsTaxgroup');
																$this->loadModel('AccountsTaxgroupmapping');
																
																
																//Tree For Taxes
															
																$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
																	if($tax_groups_details){
																		foreach ($tax_groups_details as $t1 => $t2) 
																		{
																			$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
																			foreach($tax_mappings as $m1 => $m2)
																				{
																					$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
																					foreach($taxname as $name1 => $name2)
																						{
																							$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																							$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																							//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
																			
																							$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
																			
																						}
																				}
																		}
																	}else{
																		$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
																	}
																	ksort($final_taxes);
																
																	$this->set(compact('final_taxes'));
															
																	$var = 0;		
															
																		foreach($final_taxes as $f1 => $f2)
																				{
																					if(is_array($f2))
																						{
																							$name_exp = explode('-',$f1);
																								$list[$f1] = $name_exp[0];
																							foreach($f2 as $v1 => $v2)
																								{
																									foreach($v2 as $id1 => $name1)
																										{
																											//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
																											$list[$f1.$id1]='|--'.$name1;
																										}
																								}
																		 		 		 }
																
																						else
																							{
																								$list[$f1] = $f2;
																							}
																				
																
																
																				}
															
															
															
															
															$this->set(compact('list'));
															
															
															
															//Tree For Tax Types Ends Here
																
																
																
																
																$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
																foreach($currency as $key=>$val)
																	{
																		$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
																	}
																$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
																$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
																$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
																$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
																$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));
				}
		}
		else
		{
			$this->loadModel('Client');
			$this->loadModel('AccountsTax');
			$this->loadModel('Brand');
			$this->loadModel('Company');
			$this->loadModel('Currency');
			$this->loadModel('AccountsTaxgroup');
			$this->loadModel('AccountsTaxgroupmapping');
			
			
			//Tree For Taxes
			$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
			if($tax_groups_details){
				foreach ($tax_groups_details as $t1 => $t2) 
				{
					$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					foreach($tax_mappings as $m1 => $m2)
						{
							$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
							foreach($taxname as $name1 => $name2)
								{
									$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
									//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
									$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
									//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
					
									$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
					
								}
						}
				}
			}else{
				$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
			}
			
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list[$f1] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
			
									else
										{
											$list[$f1] = $f2;
										}
							
			
			
							}
		
		
		
		
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			$currency=$this->Currency->find('all',array('conditions'=>array('Currency.billing_currency'=>'Y'),'fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			$companies =  $this->Company->find('list', array('fields' => array('Company.id','Company.companyname')));
			$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$brand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$taxtypes=$this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'fields'=>array('AccountsTax.id','AccountsTax.name')));
			$this->set(compact('allclients','brand','companies','taxtypes','currencylist'));
		
		}
		
	}
	public function invoice_clone($accountsClientinvoiceid = null){
		/*configure::write('debug',2);*/
		
		$invoiceRecord = $this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$accountsClientinvoiceid)));
		if($invoiceRecord){
			$saveArray->data = null;
			$this->AccountsClientinvoice->create();
			$savearray->data=null;
			$savearray->data['AccountsClientinvoice']['client_id']               = $invoiceRecord['AccountsClientinvoice']['client_id'];
			$savearray->data['AccountsClientinvoice']['brand_id']                = $invoiceRecord['AccountsClientinvoice']['brand_id'];
			$savearray->data['AccountsClientinvoice']['invoice_details']         = $invoiceRecord['AccountsClientinvoice']['invoice_details'];
			$savearray->data['AccountsClientinvoice']['invoiced_date']           = $invoiceRecord['AccountsClientinvoice']['invoiced_date'];
			$savearray->data['AccountsClientinvoice']['service_startdate']       = date('Y-m-d');
			if($invoiceRecord['AccountsClientinvoice']['paymentdue_term'] == 'Net 10'){
				$today = date('Y-m-d');
				$s = strtotime($today);
				$yest = date('Y-m-d', strtotime('+10 day', $s));
				$due=date('Y-m-d',strtotime($yest));
				$savearray->data['AccountsClientinvoice']['due_date']             = $due;
				$savearray->data['AccountsClientinvoice']['paymentdue_term']             = $invoiceRecord['AccountsClientinvoice']['paymentdue_term'];
			}elseif($invoiceRecord['AccountsClientinvoice']['paymentdue_term'] == 'Net 15'){
				$today = date('Y-m-d');
				$s = strtotime($today);
				$yest = date('Y-m-d', strtotime('+15 day', $s));
				$due=date('Y-m-d',strtotime($yest));
				$savearray->data['AccountsClientinvoice']['due_date']             = $due;
				$savearray->data['AccountsClientinvoice']['paymentdue_term']             = $invoiceRecord['AccountsClientinvoice']['paymentdue_term'];
			}elseif($invoiceRecord['AccountsClientinvoice']['paymentdue_term'] == 'Due On Receipt'){
				$savearray->data['AccountsClientinvoice']['due_date']             = date('Y-m-d');
				$savearray->data['AccountsClientinvoice']['paymentdue_term']             = $invoiceRecord['AccountsClientinvoice']['paymentdue_term'];
			}elseif($invoiceRecord['AccountsClientinvoice']['paymentdue_term'] == 'Due On Specified Date'){
				$savearray->data['AccountsClientinvoice']['due_date']             = date('Y-m-d');
				$savearray->data['AccountsClientinvoice']['paymentdue_term']             = $invoiceRecord['AccountsClientinvoice']['paymentdue_term'];
			}
			$savearray->data['AccountsClientinvoice']['paid']                    = 'N';
			//$savearray->data['AccountsClientinvoice']['paid_on']                 = $invoiceRecord['AccountsClientinvoice']['paid_on'];
			$savearray->data['AccountsClientinvoice']['recurring']               = $invoiceRecord['AccountsClientinvoice']['recurring'];
			$savearray->data['AccountsClientinvoice']['late_feedetails']         = $invoiceRecord['AccountsClientinvoice']['late_feedetails'];
			$savearray->data['AccountsClientinvoice']['discounts']               = $invoiceRecord['AccountsClientinvoice']['discounts'];
			$savearray->data['AccountsClientinvoice']['currency_id']             = $invoiceRecord['AccountsClientinvoice']['currency_id'];
			$savearray->data['AccountsClientinvoice']['invoice_amount']          = $invoiceRecord['AccountsClientinvoice']['invoice_amount'];
			//$savearray->data['AccountsClientinvoice']['amount_recieved']         = $invoiceRecord['AccountsClientinvoice']['amount_recieved'];
			//$savearray->data['AccountsClientinvoice']['payment_recieveddate']    = $invoiceRecord['AccountsClientinvoice']['payment_recieveddate'];
			$savearray->data['AccountsClientinvoice']['status']                  = $invoiceRecord['AccountsClientinvoice']['status'];
			$savearray->data['AccountsClientinvoice']['void']                    = $invoiceRecord['AccountsClientinvoice']['void'];
			$savearray->data['AccountsClientinvoice']['client_notes']            = $invoiceRecord['AccountsClientinvoice']['client_notes'];
			$savearray->data['AccountsClientinvoice']['client_termsandcondition']= $invoiceRecord['AccountsClientinvoice']['client_termsandcondition'];
			$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount']   = $invoiceRecord['AccountsClientinvoice']['ajusted_invoiceamount'];
			$savearray->data['AccountsClientinvoice']['credit_note']             = $invoiceRecord['AccountsClientinvoice']['credit_note'];
			if($this->AccountsClientinvoice->save($savearray->data)){
				
				$this->loadModel('AccountsAccount');
				$this->loadModel('AccountsLedger');
				$this->loadModel('Currency');
				$this->loadModel('AccountType');
				
				$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
				if(($billingcurrency['Currency']['id'] != $invoiceRecord['AccountsClientinvoice']['currency_id']))
					{
						$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$invoiceRecord['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
						$from=$fromcur['Currency']['name'];
						$to=$billingcurrency['Currency']['name'];
																							
						$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
						$handle = @fopen($url, 'r');
						if ($handle){
							$result = fgets($handle, 4096);
							fclose($handle);
						}
						$allData = explode(',',$result);  //Get all the contents to an array 
						$ledgeramount=$invoiceRecord['AccountsClientinvoice']['invoice_amount']*$allData['1'];
					}else{
						$ledgeramount=$invoiceRecord['AccountsClientinvoice']['invoice_amount'];
					}
				
				
				
				$cloneInvoiceId = $this->AccountsClientinvoice->getLastInsertID();
				$this->AccountsLedger->create();
				$ledger->data=null;
				$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
				$accountbal = $accounts_accounts['AccountsAccount']['closing_balance'];
				if(!empty($accountbal)){
					$bbaalance = $accounts_accounts['AccountsAccount']['closing_balance'];
				}else{
					$bbaalance = $accounts_accounts['AccountsAccount']['opening_balance'];
				}
				$ledger->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
				$ledger->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
				$ledger->data['AccountsLedger']['payment_description']='Credit Amount';
				$ledger->data['AccountsLedger']['cheque_no']='Amount Credited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
				$ledger->data['AccountsLedger']['is_neutral']='Y';
				$ledger->data['AccountsLedger']['accounts_clientinvoice_id']=$cloneInvoiceId;
				$ledger->data['AccountsLedger']['credit']=$ledgeramount;
				if($this->AccountsLedger->save($ledger->data)){
					$ledgerLastEntry = $this->AccountsLedger->getLastInsertID();
					$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry;
					$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
					$this->AccountsLedger->save($ledgerPay->data);
					/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
					$closingBalance->data = null;
					$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
					$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance+$ledgeramount;
					$this->AccountsAccount->save($closingBalance->data);
					
					/**Log Code**/
						$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],$ledger->data['AccountsLedger']['credit'],0,$bbaalance,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry,0,$cloneInvoiceId,'Clone Invoice','Clone invoice'));
					/**Log Code**/
					
					
					$this->AccountsLedger->create();
					$ledgerincome->data=null;
					$accounts_accounts_income=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Sales')));
					$accountbal_income = $accounts_accounts_income['AccountsAccount']['closing_balance'];
					if(!empty($accountbal_income)){
						$bbaalance_income = $accounts_accounts_income['AccountsAccount']['closing_balance'];
					}else{
						$bbaalance_income = $accounts_accounts_income['AccountsAccount']['opening_balance'];
					}
					$ledgerincome->data['AccountsLedger']['transaction_id']=$ledgerLastEntry;
					$accounttype_income=$this->AccountType->find('first',array('conditions'=>array('AccountType.id'=>$accounts_accounts_income['AccountsAccount']['account_type_id'])));
					$ledgerincome->data['AccountsLedger']['accounts_account_id']=$accounts_accounts_income['AccountsAccount']['id'];
					$ledgerincome->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
					$ledgerincome->data['AccountsLedger']['payment_description']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for '.$clientNameForLedger['Client']['client_companyname'];
					$ledgerincome->data['AccountsLedger']['cheque_no']='Amount Debited- '.$this->data['AccountsClientinvoice']['invoice_details'].' for'.$clientNameForLedger['Client']['client_companyname'];
					$ledgerincome->data['AccountsLedger']['debit']=$ledgeramount;
					$ledgerincome->data['AccountsLedger']['accounts_clientinvoice_id']=$cloneInvoiceId;
					$ledgerincome->data['AccountsLedger']['is_neutral']='Y';
					$this->AccountsLedger->save($ledgerincome->data);
					$ledgerLastEntryLastEntry = $this->AccountsLedger->getLastInsertId();
					/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
						$closingBalance->data = null;
						$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts_income['AccountsAccount']['id'];
						$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance-$ledgeramount;
						$this->AccountsAccount->save($closingBalance->data);
						
						
						/**Log Code**/
						$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],0,$ledgerincome->data['AccountsLedger']['debit'],$bbaalance,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntryLastEntry,0,$cloneInvoiceId,'Clone Invoice','Clone invoice'));
						/**Log Code**/
				}
				
				
				$this->loadModel('AccountsClientinvoicedetail');
				
				if($invoiceRecord['AccountsClientinvoice']['recurring'] == 'Y'){
					$this->loadModel('AccountsClientrecurringinvoice');
					$recurringInvoiceDetails = $this->AccountsClientrecurringinvoice->find('first',array('conditions'=>array('AccountsClientrecurringinvoice.accounts_clientinvoice_id'=>$invoiceRecord['AccountsClientinvoice']['id'])));
					$saveArrayRecurring->data = null;
					$this->AccountsClientrecurringinvoice->create();
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['client_id'] 					= $invoiceRecord['AccountsClientinvoice']['client_id'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['brand_id'] 					= $invoiceRecord['AccountsClientinvoice']['brand_id'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['invoice_amount'] 				= $invoiceRecord['AccountsClientinvoice']['invoice_amount'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['currency_id'] 					= $invoiceRecord['AccountsClientinvoice']['currency_id'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['next_invoice_day'] 			= $invoiceRecord['AccountsClientinvoice']['service_startdate'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['valid'] 						= 'Y';
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['last_invoice_date'] 			= $invoiceRecord['AccountsClientinvoice']['service_startdate'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['start_date'] 					= $invoiceRecord['AccountsClientinvoice']['service_startdate'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['end_date'] 					= $invoiceRecord['AccountsClientinvoice']['due_date'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['accounts_clientinvoice_id'] 	= $cloneInvoiceId;
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['status'] 						= 'active';
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['frequency_type'] 				= $recurringInvoiceDetails['AccountsClientrecurringinvoice']['frequency_type'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['frequency'] 					= $recurringInvoiceDetails['AccountsClientrecurringinvoice']['frequency'];
					$saveArrayRecurring->data['AccountsClientrecurringinvoice']['paymentdue_term'] 				= $recurringInvoiceDetails['AccountsClientrecurringinvoice']['paymentdue_term'];
					$this->AccountsClientrecurringinvoice->save($saveArrayRecurring->data);
				}
				
				$invoiceDetailRecords = $this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$invoiceRecord['AccountsClientinvoice']['id'])));
				foreach($invoiceDetailRecords as $invoiceDetailRecords){
					$saveArrayInvoiceDetails->data = null;
					$this->AccountsClientinvoicedetail->create();
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']	= $cloneInvoiceId;
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['unit_type']					= $invoiceDetailRecords['AccountsClientinvoicedetail']['unit_type'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['brands_package_id']			= $invoiceDetailRecords['AccountsClientinvoicedetail']['brands_package_id'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['brands_service_id']			= $invoiceDetailRecords['AccountsClientinvoicedetail']['brands_service_id'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['billing_unit_id']			= $invoiceDetailRecords['AccountsClientinvoicedetail']['billing_unit_id'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['quantity']					= $invoiceDetailRecords['AccountsClientinvoicedetail']['quantity'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['active']						= $invoiceDetailRecords['AccountsClientinvoicedetail']['active'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['valid_through']				= $invoiceDetailRecords['AccountsClientinvoicedetail']['valid_through'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['totalcost']					= $invoiceDetailRecords['AccountsClientinvoicedetail']['totalcost'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['accounts_tax_id']			= $invoiceDetailRecords['AccountsClientinvoicedetail']['accounts_tax_id'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']		= $invoiceDetailRecords['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['netcost']					= $invoiceDetailRecords['AccountsClientinvoicedetail']['netcost'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['description']				= $invoiceDetailRecords['AccountsClientinvoicedetail']['description'];
					$saveArrayInvoiceDetails->data['AccountsClientinvoicedetail']['discount']					= $invoiceDetailRecords['AccountsClientinvoicedetail']['discount'];
					$this->AccountsClientinvoicedetail->save($saveArrayInvoiceDetails->data);
				}
				
				$this->Session->setFlash(__('<div class="flashMessageSuccess">A clone for invoice #'. $invoiceRecord['AccountsClientinvoice']['id'] .' has been created with invoice '.$invoiceRecord['AccountsClientinvoice']['ajusted_invoiceamount'].'</div>'));
				/*$this->redirect(array('action' => 'view',$cloneInvoiceId));*/
				$this->redirect(array('action' => 'edit',$cloneInvoiceId));
				$success=1;
				$this->set(compact('success'));
			}else{
				$this->Session->setFlash(__('<div class="flashMessageError"> Clone couldnot be created.</div>'));
				$this->redirect(array('action' => 'index'));
				
			}
		}
		
	}


	public function add_from_estimate()
	{
		/*
		debug($this->data);*/
	}
/**
 * edit method
 *
 * @param string $id
 * @return void
 */
	
	
	public function edit($id = null) {
		/*configure::write('debug',2);
		debug($this->data);*/
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('Currency');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		$this->AccountsClientinvoicedetail->recursive=0;
		$this->AccountsClientinvoice->id = $id;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		
		
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->request->data['AccountsClientinvoice']['service_startdate'] = $this->data['AccountsClientinvoice']['service_startdate1'];
			$this->request->data['AccountsClientinvoice']['due_date'] = $this->data['AccountsClientinvoice']['due_date1'];
		/*****************************************************************************************************************************************
		 ***************************************************Validating client,term and invoice date*********************************************** 
		 *****************************************************************************************************************************************
		*/
			
			if((!$this->data['AccountsClientinvoice']['client']) && (!$this->data['client'])){
			
			$this->loadModel('ClientDetail');
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						//
						debug($vdetail['AccountsClientinvoicedetail']['accounts_tax_id']);
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
							
							
						}
						else
						{	
							
							
							$taxableamount=0;
							
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								
								
								if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}
								
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
							
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
							}
						}
					}
				
			}
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'],'Client.status'=>'Y')));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			//$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
		//	$taxtypes=$this->AccountsTax->find('list',array('fields'=>array('AccountsTax.id','AccountsTax.name')));
			
			
				//Tree For Taxes
		
					$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
					if($tax_groups_details){
						foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($tax_mappings as $m1 => $m2)
								{
									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
									foreach($taxname as $name1 => $name2)
										{
											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
							
											$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
							
											$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
							
										}
								}
						}
					}else{
						$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
					}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
			
									else
										{
											$list[$f1] = $f2;
										}
							
			
			
							}
		
		
		
		$taxtypes=$list;
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$this->set(compact('currencyprint','brandName','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
			
			$this->Session->setFlash(__('<div class="flashMessageError">Select A Client.</div>',true));
			return;
		}
			if((!$this->data['AccountsClientinvoice']['term'])){
			
			$this->loadModel('ClientDetail');
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						//
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
						
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
							
							
						}
						else
						{	
							
							
							$taxableamount=0;
							
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								
								
								if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}
								
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
							
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
							}
						}
					}
				
			}
			
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'],'Client.status'=>'Y')));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			//$allclients=$this->Client->find('list',array('conditions'=>array('Client.status'=>'Y'),'fields'=>array('Client.id','Client.client_companyname')));
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
				//Tree For Taxes
				$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
					{
						$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						foreach($tax_mappings as $m1 => $m2)
							{
								$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
								foreach($taxname as $name1 => $name2)
									{
										$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
						
										$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
						
										$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
						
									}
							}
					}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
									else
										{
											$list[$f1] = $f2;
										}
							}
		$taxtypes=$list;
		$this->set(compact('list'));
		//Tree For Tax Types Ends Here
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$this->set(compact('currencyprint','brandName','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
			
			$this->Session->setFlash(__('<div class="flashMessageError">Select Term.</div>',true));
			return;
		}
		if((!$this->data['AccountsClientinvoice']['invoice_date'])){
			$this->loadModel('ClientDetail');
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
						}
						else
						{	
							$taxableamount=0;
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
							}
						}
					}
				
			}
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'],'Client.status'=>'Y')));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
				//Tree For Taxes
		
				$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
					{
						$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						foreach($tax_mappings as $m1 => $m2)
							{
								$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
								foreach($taxname as $name1 => $name2)
									{
										$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
						
										$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
						
										$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
						
									}
							}
					}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
			
									else
										{
											$list[$f1] = $f2;
										}
							
			
			
							}
		
		
		
		$taxtypes=$list;
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$this->set(compact('currencyprint','brandName','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
			
			$this->Session->setFlash(__('<div class="flashMessageError">Select A Invoice Date.</div>',true));
			return;
		}
		
		/*****************************************************************************************************************************************
		 ***************************************************End Of validation ******************************************************************** 
		 *****************************************************************************************************************************************
		*/
		
			$savearray->data=null;
			$savearray->data['AccountsClientinvoice']['id']=$id;
			$savearray->data['AccountsClientinvoice']['invoice_details']=$this->data['AccountsClientinvoice']['invoiceDetail'];
			if($this->data['AccountsClientinvoice']['client'])
				{
					$savearray->data['AccountsClientinvoice']['client_id']=$this->data['AccountsClientinvoice']['client'];
					$saveclientid = $this->data['AccountsClientinvoice']['client'];
				}
			else
				{
					$savearray->data['AccountsClientinvoice']['client_id']=$this->data['client'];
					$saveclientid = $this->data['client'];
				}
			$savearray->data['AccountsClientinvoice']['invoiced_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
			$savearray->data['AccountsClientinvoice']['service_startdate']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['service_startdate']));
			if($this->data['AccountsClientinvoice']['due_date'])
			{
				$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['due_date']));
			}
			if($this->data['due_date'])
			{
				$savearray->data['AccountsClientinvoice']['due_date']=date('Y-m-d',strtotime($this->data['due_date']));
			}
			if($this->data['AccountsClientinvoice']['brand'])
			{
				$savearray->data['AccountsClientinvoice']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
			}
			if($this->data['brand'])
			{
				$savearray->data['AccountsClientinvoice']['brand_id']=$this->data['brand'];
			}
			
			$savearray->data['AccountsClientinvoice']['late_feedetails']=$this->data['AccountsClientinvoice']['latefee'];
		//	$savearray->data['AccountsClientinvoice']['discounts']=$this->data['AccountsClientinvoice'][''];
			$savearray->data['AccountsClientinvoice']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
			if($this->data['draft'] == 'Yes'){
				$status = "draft";
			}else{
				$current_date=strtotime(date('Y-m-d'));
				if($this->data['due_date']){
					$due_date = strtotime($this->data['due_date']);
				}else{
					$due_date = strtotime($this->data['AccountsClientinvoice']['due_date']);
				}
				
				if($current_date<=$due_date){
				$status="open";
				}
				if($current_date>$due_date){
					 $status="overdue";
					}
				}
			$savearray->data['AccountsClientinvoice']['status'] = $status;
			foreach($this->data['total'] as $k=>$v)
			{
				$totalinvoiceamount=$totalinvoiceamount+$this->numberconversion($v);
			}
			foreach($this->data['AccountsClientinvoice']['amount'] as $k=>$v)
			{
				$totalinvoiceamt=$totalinvoiceamt+$this->numberconversion($v);
			}
			foreach($this->data['service_tax'] as $ks=>$vs)
			{
				if(is_array($vs))
					{
						foreach($vs as $vs1=>$vs11)
							{
								$totalservicetax=$totalservicetax+$vs11;
							}
					}
				else
					{
						$totalservicetax=$totalservicetax+$vs;
					}
			}
			foreach($this->data['AccountsClientinvoice']['service_tax'] as $ld=>$vd)
			{
				$datatax=$datatax+$vd;
			}
			$savearray->data['AccountsClientinvoice']['invoice_amount']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
			if($this->data['Type'] == "Yes")
				{
					$savearray->data['AccountsClientinvoice']['credit_note'] = 'Y';
					$totalinvoice_credit = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
					if($totalinvoice_credit >= $this->data['creditNote'])
						{
							$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax-$this->data['creditNote'];
							$save_creditNote = 0;
						}
					else
						{
							$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = 0;
							$save_creditNote = $this->data['creditNote'] - $totalinvoice_credit;
						}
				}
			else
				{
					$savearray->data['AccountsClientinvoice']['credit_note'] = 'N';
					//$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
					if($this->data['subTotal']){
						$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = $this->data['subTotal'] + $this->data['AccountsClientinvoice']['latefee'] + $totalservicetax;
					}else{
						$savearray->data['AccountsClientinvoice']['ajusted_invoiceamount'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
					}
					
				}
			
			if($this->data['AccountsClientinvoice']['term']=='net10')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Net 10';
			}
			if($this->data['AccountsClientinvoice']['term']=='net15')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Net 15';
			}
			if($this->data['AccountsClientinvoice']['term']=='receipt')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Due On Receipt';
			}
			if($this->data['AccountsClientinvoice']['term']=='date')
			{
				$savearray->data['AccountsClientinvoice']['paymentdue_term']='Due On Specified Date';
			}
			
			$savearray->data['AccountsClientinvoice']['client_notes']=$this->data['AccountsClientinvoice']['notes'];
			$savearray->data['AccountsClientinvoice']['client_termsandcondition']=$this->data['AccountsClientinvoice']['t&c'];
			
			
			if ($this->AccountsClientinvoice->save($savearray->data)) {
				
				if($this->data['Type'] == "Yes")
					{
						$this->loadModel('ClientCreditnote');
						$creditNoteDetail=$this->ClientCreditnote->find('first',array('ClientCreditnote.id' => $this->data['creditNoteId']));
						$credutNoteSave->data=null;
						$credutNoteSave->data['ClientCreditnote']['id'] = $this->data['creditNoteId'];					
						$credutNoteSave->data['ClientCreditnote']['amount'] =  $save_creditNote;
						$credutNoteSave->data['ClientCreditnote']['datemodified'] = date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
						$this->ClientCreditnote->save($credutNoteSave->data);
					}
				else
					{
						$this->loadModel('ClientCreditnote');
						$creditNoteDetail=$this->ClientCreditnote->find('first',array('conditions'=>array('ClientCreditnote.id' => $this->data['creditNoteId'])));
						$credutNoteSave->data=null;
						$credutNoteSave->data['ClientCreditnote']['id'] =  $this->data['creditNoteId'];					
						$credutNoteSave->data['ClientCreditnote']['amount'] = $creditNoteDetail['ClientCreditnote']['amount'] + $this->data['AccountsClientinvoice']['creditNote'];
						$credutNoteSave->data['ClientCreditnote']['datemodified'] = date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
						$this->ClientCreditnote->save($credutNoteSave->data);
					}
				
				$payment_edit=$this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$id)));
				$savepayment->data=null;
				$savepayment->data['AccountsClientpaymentdetail']['id']=$payment_edit['AccountsClientpaymentdetail']['id'];
				$savepayment->data['AccountsClientpaymentdetail']['client_id']=$this->data['AccountsClientinvoice']['client'];
				$savepayment->data['AccountsClientpaymentdetail']['accounts_clientinvoice_id']=$id;
				$savepayment->data['AccountsClientpaymentdetail']['paid_amount']=$payment_edit['AccountsClientpaymentdetail']['paid_amount'];
				$savepayment->data['AccountsClientpaymentdetail']['paid']=$payment_edit['AccountsClientpaymentdetail']['paid'];
				$savepayment->data['AccountsClientpaymentdetail']['invoiced_amount']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
				if($payment_edit['AccountsClientpaymentdetail']['paid_amount'] == 0)
					{
						$savepayment->data['AccountsClientpaymentdetail']['due']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
					}
				else
					{
						$savepayment->data['AccountsClientpaymentdetail']['due']=$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax-$payment_edit['AccountsClientpaymentdetail']['paid_amount'];
					}
				$savepayment->data['AccountsClientpaymentdetail']['currency_id']=$this->data['AccountsClientinvoice']['currency'];
				if($this->data['AccountsClientinvoice']['brand'])
					{
						$savepayment->data['AccountsClientpaymentdetail']['brand_id']=$this->data['AccountsClientinvoice']['brand'];
					}
				if($this->data['brand'])
					{
						$savepayment->data['AccountsClientpaymentdetail']['brand_id']=$this->data['brand'];
					}
				$savepayment->data['AccountsClientpaymentdetail']['paymode']=$payment_edit['AccountsClientpaymentdetail']['paymode'];
				$savepayment->data['AccountsClientpaymentdetail']['received_date']=$payment_edit['AccountsClientpaymentdetail']['received_date'];
				$this->AccountsClientpaymentdetail->save($savepayment->data);
				foreach($this->data['AccountsClientinvoice']['detailid'] as $k=>$v)
				{
					$savearraydetails->data=null;
					$savearraydetails->data['AccountsClientinvoicedetail']['id']=$v;
					$savearraydetails->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$id;
					$savearraydetails->data['AccountsClientinvoicedetail']['unit_type']=$this->data['AccountsClientinvoice']['type'][$k];
					if($this->data['AccountsClientinvoice']['type'][$k]=='unit')
					{
						if($this->data['AccountsClientinvoice']['unit_name'][$k])
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['AccountsClientinvoice']['unit_name'][$k];
						}
						else
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['billing_unit_id']=$this->data['unit_name'][$k];
						}
						
					}
					if($this->data['AccountsClientinvoice']['type'][$k]=='service')
					{
						if($this->data['AccountsClientinvoice']['unit_name'][$k])
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['AccountsClientinvoice']['unit_name'][$k];
						}
						else
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_service_id']=$this->data['unit_name'][$k];
						}
						
					}
					if($this->data['AccountsClientinvoice']['type'][$k]=='package')
					{
						if($this->data['AccountsClientinvoice']['unit_name'][$k])
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['AccountsClientinvoice']['unit_name'][$k];
						}
						else
						{
							$savearraydetails->data['AccountsClientinvoicedetail']['brands_package_id']=$this->data['unit_name'][$k];
						}
						
					}
					$savearraydetails->data['AccountsClientinvoicedetail']['quantity']=$this->data['AccountsClientinvoice']['quantity_unit'.$k];
					
					if($this->data['AccountsClientinvoice']['amount'][$k])
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['totalcost']=$this->numberconversion($this->data['AccountsClientinvoice']['amount'][$k]);
					}
					else
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['totalcost']=$this->numberconversion($this->data['total'][$k]);
					}
					if($this->data['AccountsClientinvoice']['price_unit'.$k])
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['AccountsClientinvoice']['price_unit'.$k]);
					}
					else
					{
						$savearraydetails->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit'][$k]);
					}
					
					if($this->data['AccountsClientinvoice']['addtax_recurring'][$k])
					{
						
						$group=explode('-',$this->data['AccountsClientinvoice']['addtax_recurring'][$k]);
						if($group[1])
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$group[1];
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']='0';
							}
						else
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']='0';
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['AccountsClientinvoice']['addtax_recurring'][$k];
							}
					}
					else
					{
						$group=explode('-',$this->data['addtax'][$k]);
						if($group[1])
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$group[1];
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']='0';
							}
						else
							{
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']='0';
								$savearraydetails->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
							}
					}
					$savearraydetails->data['AccountsClientinvoicedetail']['description']=$this->data['AccountsClientinvoice']['description'][$k];
					$savearraydetails->data['AccountsClientinvoicedetail']['discount']=$this->data['AccountsClientinvoice']['discount'.$k];
					$this->AccountsClientinvoicedetail->save($savearraydetails->data);
				}
				if($this->data['unit_name'])
						 	{
						 		foreach($this->data['unit_name'] as $k=>$v)
						 		{
						 			$this->AccountsClientinvoicedetail->create();
						 			$save3->data=null;
						 			$last1=$id;
						 			$save3->data['AccountsClientinvoicedetail']['accounts_clientinvoice_id']=$last1;
						 			$save3->data['AccountsClientinvoicedetail']['unit_type']=$this->data['type'][$k];
						 			if($this->data['type'][$k]=='package')
								 		{
								 			
								 			$save3->data['AccountsClientinvoicedetail']['brands_package_id']=$v;
								 		}
								 	if($this->data['type'][$k]=='service')
								 		{
								 			
								 			$save3->data['AccountsClientinvoicedetail']['brands_service_id']=$v;
								 		}
								 	if($this->data['type'][$k]=='unit')
								 		{
								 			
								 			$save3->data['AccountsClientinvoicedetail']['billing_unit_id']=$v;
								 		}
						 			$save3->data['AccountsClientinvoicedetail']['quantity']=$this->data['quantity_unit'][$k];
								 	if($this->data['AccountsClientinvoice']['addtax'][$k])
						 				{
						 					$expnewaadtax=explode('-',$this->data['AccountsClientinvoice']['addtax'][$k]);
						 					if($expnewaadtax[1])
						 					{
						 						$save3->data['AccountsClientinvoicedetail']['accounts_taxgroup_id']=$expnewaadtax[1];
						 						
						 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax'][$k])));
						 					}
						 					else
						 					{
						 						$save3->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['AccountsClientinvoice']['addtax'][$k];
						 						$taxvalue2=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax'][$k])));
						 					}
						 				}
						 			if($this->data['discount'][$k])
						 				{
						 					$save3->data['AccountsClientinvoicedetail']['discount']=$this->data['discount'][$k];
						 					$discount[$k]=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))*$this->data['discount'][$k])/100;
						 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k]))-$discount[$k]);
						 				}
						 			else
						 				{
						 					$save3->data['AccountsClientinvoicedetail']['totalcost']=(($this->data['quantity_unit'][$k]*$this->numberconversion($this->data['price_unit'][$k])));
						 				}
						 		
								$save3->data['AccountsClientinvoicedetail']['description']=$this->data['description'][$k];
						 		$save3->data['AccountsClientinvoicedetail']['accounts_tax_id']=$this->data['addtax'][$k];
						 		$save3->data['AccountsClientinvoicedetail']['netcost']=$this->numberconversion($this->data['price_unit'][$k]);
						 		if($this->AccountsClientinvoicedetail->save($save3->data)){
						 			if($this->data['Type'] == "Yes"){
						 				$accounts_receivable = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
						 				$accounts_payable = $this->AccountsAccounts->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Payable')));
						 				$ledgerId = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_clientinvoice_id'=>$id)));
						 				foreach($ledgerId as $ledgerId){
						 					if(($ledgerId['AccountsLedger']['id'] == $accounts_receivable['AccountsAccount']['id']) ){
						 						$earlyAmountReceivable =$ledgerId['AccountsLedger']['debit'];
						 						$editLedger->data = null;
						 						$editLedger->data['AccountsLedger']['id'] = $ledgerId['AccountsLedger']['id'];
						 						$editLedger->data['AccountsLedger']['debit'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
						 						$differenceInCredit = $earlyAmountReceivable =$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax-$ledgerId['AccountsLedger']['debit'];
						 						if($this->AccountsLedger->save($editLedger->data)){
						 							$accountsAccountsEdit->data = null;
						 							$accountsAccountsEdit->data['AccountsAccount']['id'] = $accounts_receivable['AccountsAccount']['id'];
						 							$accountsAccountsEdit->data['AccountsAccount']['closing_balance'] = $accounts_receivable['AccountsAccount']['closing_balance'] + $differenceInCredit;
						 							$this->AccountsAccount->save($accountsAccountsEdit->data);
													
													/**Log Code**/
														$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$accountsAccountsEdit->data['AccountsAccount']['id'],0,$editLedger->data['AccountsLedger']['debit'],$accounts_receivable['AccountsAccount']['closing_balance'],$accountsAccountsEdit->data['AccountsAccount']['closing_balance'],$ledgerId['AccountsLedger']['id'],0,$id,'Edit Invoice','Edit invoice'));
													/**Log Code**/
						 						}
						 					}
						 				if($ledgerId['AccountsLedger']['id'] == $accounts_payable['AccountsAccount']['id']){
						 						$accounts_payable = $ledgerId['AccountsLedger']['credit'];
						 						$editLedger->data = null;
						 						$editLedger->data['AccountsLedger']['id'] = $ledgerId['AccountsLedger']['id'];
						 						$editLedger->data['AccountsLedger']['credit'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
						 						$differenceInDebit = $earlyAmountReceivable =$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax-$ledgerId['AccountsLedger']['credit'];
						 						if($this->AccountsLedger->save($editLedger->data)){
						 							$accountsAccountsEdit->data = null;
						 							$accountsAccountsEdit->data['AccountsAccount']['id'] = $accounts_payable['AccountsAccount']['id'];
						 							$accountsAccountsEdit->data['AccountsAccount']['closing_balance'] = $accounts_payable['AccountsAccount']['closing_balance'] + $differenceInDebit;
						 							$this->AccountsAccount->save($accountsAccountsEdit->data);
													
													
													/**Log Code**/
														$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$accountsAccountsEdit->data['AccountsAccount']['id'],$editLedger->data['AccountsLedger']['credit'],0,$accounts_payable['AccountsAccount']['closing_balance'],$accountsAccountsEdit->data['AccountsAccount']['closing_balance'],$editLedger->data['AccountsLedger']['id'],0,$id,'Edit Invoice','Edit invoice'));
													/**Log Code**/
						 						}
						 					}
						 				}
						 			}else{
						 				$accounts_receivable = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
						 				$accounts_sales = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Sales')));
						 				$ledgerId = $this->AccountsLedger->find('all',array('conditions'=>array('AccountsLedger.accounts_clientinvoice_id'=>$id)));
						 				foreach($ledgerId as $ledgerId){
						 					if(($ledgerId['AccountsLedger']['id'] == $accounts_receivable['AccountsAccount']['id']) ){
						 						$earlyAmountReceivable =$ledgerId['AccountsLedger']['credit'];
						 						$editLedger->data = null;
						 						$editLedger->data['AccountsLedger']['id'] = $ledgerId['AccountsLedger']['id'];
						 						$editLedger->data['AccountsLedger']['credit'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
						 						$differenceInCredit = $earlyAmountReceivable =$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax-$ledgerId['AccountsLedger']['credit'];
						 						if($this->AccountsLedger->save($editLedger->data)){
						 							$accountsAccountsEdit->data = null;
						 							$accountsAccountsEdit->data['AccountsAccount']['id'] = $accounts_receivable['AccountsAccount']['id'];
						 							$accountsAccountsEdit->data['AccountsAccount']['closing_balance'] = $accounts_receivable['AccountsAccount']['closing_balance'] + $differenceInCredit;
						 							$this->AccountsAccount->save($accountsAccountsEdit->data);
													
													/**Log Code**/
														$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$accountsAccountsEdit->data['AccountsAccount']['id'],$editLedger->data['AccountsLedger']['credit'],0,$accounts_receivable['AccountsAccount']['closing_balance'],$accountsAccountsEdit->data['AccountsAccount']['closing_balance'],$editLedger->data['AccountsLedger']['id'],0,$id,'Edit Invoice','Edit invoice'));
													/**Log Code**/
													
						 						}
						 					}
						 				if($ledgerId['AccountsLedger']['id'] == $accounts_sales['AccountsAccount']['id']){
						 						$earlyAmountSales = $ledgerId['AccountsLedger']['debit'];
						 						$earlyAmountReceivable =$ledgerId['AccountsLedger']['credit'];
						 						$editLedger->data = null;
						 						$editLedger->data['AccountsLedger']['id'] = $ledgerId['AccountsLedger']['id'];
						 						$editLedger->data['AccountsLedger']['debit'] = $totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax;
						 						$differenceInDebit = $earlyAmountReceivable =$totalinvoiceamount+$totalinvoiceamt+$this->data['AccountsClientinvoice']['latefee']+$totalservicetax+$datatax-$ledgerId['AccountsLedger']['debit'];
						 						if($this->AccountsLedger->save($editLedger->data)){
						 							$accountsAccountsEdit->data = null;
						 							$accountsAccountsEdit->data['AccountsAccount']['id'] = $accounts_sales['AccountsAccount']['id'];
						 							$accountsAccountsEdit->data['AccountsAccount']['closing_balance'] = $accounts_sales['AccountsAccount']['closing_balance'] + $differenceInDebit;
						 							$this->AccountsAccount->save($accountsAccountsEdit->data);
													/**Log Code**/
														$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$accountsAccountsEdit->data['AccountsAccount']['id'],0,$editLedger->data['AccountsLedger']['debit'],$accounts_sales['AccountsAccount']['closing_balance'],$accountsAccountsEdit->data['AccountsAccount']['closing_balance'],$editLedger->data['AccountsLedger']['id'],0,$id,'Edit Invoice','Edit invoice'));
													/**Log Code**/
						 						}
						 					}
						 				}
						 			}
						 			
						 			
						 		}
						 		}
						 	}
				$success=1;
				$this->Session->setFlash(__('<div class=flashMessageSuccess>The Invoice has been saved</div>'));
				$this->redirect(array('action' => 'view',$id));
				$this->set(compact('success'));
			} else {
				$fail=1;
				$this->set(compact('fail'));
				$this->Session->setFlash(__('<div class=flashMessageError>The accounts clientinvoice could not be saved. Please, try again.</div>'));
			}
		} else {
			$this->loadModel('ClientDetail');
			$this->request->data = $this->AccountsClientinvoice->read(null, $id);
			$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
			foreach($invoicedetails as $kdetail=>$vdetail)
			{
				if($vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])
					{
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTax']=$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxmap=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_tax_id'])));
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']=$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['value']+(($taxmap['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
						$taxvalue[$vdetail['AccountsClientinvoicedetail']['accounts_tax_id']]['name']=$taxmap['AccountsTax']['name'];	
					}
					if($vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])
					{
						
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['accountsTaxgroup']=$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'];
						$servicetaxid[$vdetail['AccountsClientinvoicedetail']['id']]['amount']=$vdetail['AccountsClientinvoicedetail']['totalcost'];
						$taxgroupedit=$this->AccountsTaxgroup->find('all',array('conditions'=>array('AccountsTaxgroup.id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
						if($taxgroupedit['AccountsTaxgroup']['compounded']=='N')
						{
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$vdetail['AccountsClientinvoicedetail']['totalcost'])/100);
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
							}
							
							
						}
						else
						{	
							
							
							$taxableamount=0;
							
							$taxgroupeditmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$vdetail['AccountsClientinvoicedetail']['accounts_taxgroup_id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($taxgroupeditmap as $ktaxgroupeditmap=>$vtaxgroupeditmap)
							{
								
								
								if($taxableamount==0)
									{
										$taxableamount=$vdetail['AccountsClientinvoicedetail']['totalcost'];
								
									}
								
								$taxpercentedit=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
							
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']=$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['value']+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
								$taxvalue[$vtaxgroupeditmap['AccountsTaxgroupmapping']['accounts_tax_id']]['name']=$taxpercentedit['AccountsTax']['name'];
								
								$taxableamount=$taxableamount+(($taxpercentedit['AccountsTax']['percent']*$taxableamount)/100);
								
							}
						}
					}
				
			}
			$this->set(compact('taxvalue'));
			$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
			
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
			$clientBrand=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			foreach($clientBrand as $kb=>$vb)
				{
					$clientList=$this->Client->find('first',array('conditions'=>array('Client.id'=>$vb['ClientDetail']['client_id'])));
					$allclients[$vb['ClientDetail']['client_id']]=$clientList['Client']['client_companyname'];
				}
			$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$brandName=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$service=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$package=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
			
			
				//Tree For Taxes
		
					$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
					if($tax_groups_details){
						foreach ($tax_groups_details as $t1 => $t2) 
						{
							$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
							foreach($tax_mappings as $m1 => $m2)
								{
									$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
									foreach($taxname as $name1 => $name2)
										{
											$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
							
											$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
											//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
							
											$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
							
										}
								}
						}
					}else{
						$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
					}
				ksort($final_taxes);
				$this->set(compact('final_taxes'));
				$var = 0;		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list['Grp-'.$name_exp[1]] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												foreach($v2 as $id1 => $name1)
													{
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
									else
										{
											$list[$f1] = $f2;
										}
							}
		$taxtypes=$list;
		$this->set(compact('list'));
		//Tree For Tax Types Ends Here
			$currency=$this->Currency->find('all',array('fields'=>array('Currency.id','Currency.name','Currency.symbol')));
			foreach($currency as $key=>$val)
				{
					$currencylist[$val['Currency']['id']]=$val['Currency']['name'];
				}
			$currencyprint=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id'])));
			$sym=$currencyprint['Currency']['symbol'];
			$this->set(compact('currencyprint','brandName','sym','taxtypes','unit','service','package','invoicedetails','accountsClientinvoice','clientdetails','allclients','brands','currencylist'));
		}
	
}
/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		/*if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}*/
		$this->AccountsClientinvoice->id = $id;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		if ($this->AccountsClientinvoice->delete()) {
			$this->Session->setFlash(__('Accounts clientinvoice deleted'));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Accounts clientinvoice was not deleted'));
		$this->redirect(array('action' => 'index'));
	}
	
	public function brand($id = null)
	{
		
		
		
		$this->loadModel('Brand');
		$this->loadModel('ClientDetail');
		$this->loadModel('Client');
		
		$clientdetail=$this->ClientDetail->find('all',array('conditions'=>array('ClientDetail.brand_id'=>$this->data['AccountsClientinvoice']['brand'])));
		foreach($clientdetail as $k=>$v)
			{
				$clientinfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$v['ClientDetail']['client_id'],'Client.status'=>'Y')));
				if($clientinfo){
					$clientList[$v['ClientDetail']['client_id']]=$clientinfo['Client']['client_companyname'];
				}
				
			}
		$this->set(compact('clientList'));
	}
	
	
	public function addmore($flag = null,$editid=null)
	{
		
		$flag++;
		$this->set(compact('flag'));
		
			$this->loadModel('BrandsService');
			$this->loadModel('BrandsPackagedetail');
			$this->loadModel('BrandsPackage');
			$this->loadModel('BrandsServiceunit');
			$this->loadModel('BillingUnit');
			$this->loadModel('AccountsTax');
			$this->loadModel('AccountsTaxgroup');
			$this->loadModel('AccountsTaxgroupmapping');
			
			
			
			//Tree For Taxes
		
				$tax_groups_details = $this->AccountsTaxgroup->find('list', array ('fields' => array ('AccountsTaxgroup.id','AccountsTaxgroup.groupname')));
				if($tax_groups_details){
					foreach ($tax_groups_details as $t1 => $t2) 
					{
						$tax_mappings = $this->AccountsTaxgroupmapping->find('all', array ('conditions' => array ('AccountsTaxgroupmapping.accounts_taxgroup_id' => $t1),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
						foreach($tax_mappings as $m1 => $m2)
							{
								$taxname = $this->AccountsTax->find('all',array('conditions'=>array('AccountsTax.id'=>$m2['AccountsTaxgroupmapping']['accounts_tax_id']),'order' => 'AccountsTax.name ASC'));
								foreach($taxname as $name1 => $name2)
									{
										$final_taxes2[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										//$final_taxes[$m2['AccountsTaxgroupmapping']['id']][$t2][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
						
										$final_taxes[$name2['AccountsTax']['id']]= $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
										//$final_taxes[$name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%']= $name2['AccountsTax']['id'];
						
										$final_taxes[$t2.'-'.$t1][$m2['AccountsTaxgroupmapping']['accounts_taxgroup_id']][$m2['AccountsTaxgroupmapping']['accounts_tax_id']] = $name2['AccountsTax']['name'].'-'.$name2['AccountsTax']['percent'].'%';
						
									}
							}
					}
				}else{
					$final_taxes = $this->AccountsTax->find('list',array('conditions'=>array('AccountsTax.active'=>'Y'),'order' => 'AccountsTax.name ASC'));
				}
				ksort($final_taxes);
			
				$this->set(compact('final_taxes'));
		
				$var = 0;		
		
					foreach($final_taxes as $f1 => $f2)
							{
								if(is_array($f2))
									{
										$name_exp = explode('-',$f1);
											$list[$f1] = $name_exp[0];
										foreach($f2 as $v1 => $v2)
											{
												debug($v2);
												foreach($v2 as $id1 => $name1)
													{
														//$list[$name_exp[1].'-'.$id1] = '|--'.$name1;
														$list[$f1.$id1]='|--'.$name1;
													}
											}
					 		 		 }
									else
										{
											$list[$f1] = $f2;
										}
							}
		
		
		
		
		$this->set(compact('list'));
		
		
		
		//Tree For Tax Types Ends Here
			
			
			
			
			
			
			
			$serv=$this->BrandsPackage->find('all',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
			foreach($serv as $serv1)
			{
				$i=0;
				$brands_packagedetails[$serv1['BrandsPackage']['id']]['package']=$this->BrandsPackagedetail->find('all',array('conditions'=>array('BrandsPackagedetail.brands_package_id'=>$serv1['BrandsPackage']['id'])));
				$final[$serv1['BrandsPackage']['id'].'-p'] = $serv1['BrandsPackage']['package_name'].'[PACKAGE]';
				foreach($brands_packagedetails[$serv1['BrandsPackage']['id']]['package'] as $brands_packagedetail)
				{
					
					if($brands_packagedetail['BrandsPackagedetail']['brands_service_id'])
					{
						$brandsservice[$serv1['BrandsPackage']['id']]['service'][$brands_packagedetail['BrandsPackagedetail']['brands_service_id']]=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y','BrandsService.id'=>$brands_packagedetail['BrandsPackagedetail']['brands_service_id']),'fields'=>array('BrandsService.id','BrandsService.service_name')));						
							
						foreach($brandsservice[$serv1['BrandsPackage']['id']]['service'] as $k=>$v)
						{
							debug($v);
							$final[$k.'-s'] = '|--'.$v[$k].'[SERVICE]';
							$servicedetails[$k]=$this->BrandsServiceunit->find('all',array('conditions'=>array('BrandsServiceunit.brands_service_id'=>$k)));
							foreach($servicedetails as $k2=>$v2)
							{
								debug($v2);
								foreach($v2 as $k1=>$v1)
								{
									$servunits[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']][$k1]=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.id'=>$v1['BrandsServiceunit']['billing_unit_id'],'BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
									
									$brandsservicedetails[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']]['Servicedetails'][$k2]=$servunits[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']];
									foreach($servunits[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']][$k1] as $units_id => $units_name){
										$final[$units_id.'-su'] = '|----'.$units_name;
									}
									
								}
								
							}
						}
					}
					if($brands_packagedetail['BrandsPackagedetail']['billing_unit_id'])
					{
						
						//$billingunit[$serv1['BrandsPackage']['id']]['unit'][$brands_packagedetail['BrandsPackagedetail']['billing_unit_id']]=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.id'=>$brands_packagedetail['BrandsPackagedetail']['billing_unit_id'],'BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
						$servunits[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']][$i]=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.id'=>$brands_packagedetail['BrandsPackagedetail']['billing_unit_id'],'BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
						debug($servunits);
						foreach($servunits[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']][$i] as $main_units_id => $main_units_name){
							$final[$main_units_id.'-u'] = '|--'.$main_units_name.'[UNIT]';
						}
						$brandsservicedetails[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']]['billedunit']=$servunits[$brands_packagedetail['BrandsPackagedetail']['brands_package_id']];
						$i++;
					}
					
					
				}
				
			}
			$unit=$final;
			$disp=1;
			$triple=1;
			$this->set(compact('unit','disp','triple','popupunit','taxtypes','editid'));
	}
	
	public function cost($decideflag=null,$flag = null,$editid=null)
	{
		/*Configure::write('debug',2);
		debug($this->data);*/
		$this->loadModel('Client');
		$x=null;$y=null;$z=null;
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('Currency');
		//$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		debug($billingcurrency);
		
		if($this->data['unit_name'])
		{
			
			if($this->data['type'])
			{
				foreach($this->data['type'] as $k=>$v)
					{
						if($v=='unit')
						{
							$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['unit_name'][$k]),'fields'=>array('BillingUnit.amount')));
							$price=$unitdetail['BillingUnit']['amount'];
							$z=1;
							//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									
									$allData = explode(',',$result);  //Get all the contents to an array 
									
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price=$price*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									
									$this->set(compact('symbol'));
								}
							else
								{
									$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price=$price;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									
									
								}
							//End
						}
						if($v=='service')
						{
							$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['unit_name'][$k]),'fields'=>array('BrandsService.totalcost')));
							$price=$servicedetail['BrandsService']['totalcost'];
							$z=1;
							//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price=$price*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
								}
							else
								{
									$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price=$price;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
								}
							
							//End
						}
						if($v=='package')
						{
							$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['unit_name'][$k]),'fields'=>array('BrandsPackage.totalcost')));
							$price=$packagedetail['BrandsPackage']['totalcost'];
							$z=1;
							
							//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									
									
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price=$price*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
								}
							else
								{
									$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price=$price;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
								}
							
							//End
						}
						$grandTotalValue = $grandTotalValue + $price;
						$subTotal1 = $price + $subTotal1;
					}
			 }
		
		}	
		 
		if($editid)
			{
			 		if($this->data['AccountsClientinvoice']['type'] && $this->data['AccountsClientinvoice']['unit_name'] && !$this->data['unit_name'][$editid])
						{
								if($this->data['AccountsClientinvoice']['type'][$editid]=='unit')
								{
									$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['AccountsClientinvoice']['unit_name'][$editid]),'fields'=>array('BillingUnit.amount')));
									$price=$unitdetail['BillingUnit']['amount'];
									$yz=1;
									$this->set(compact('editid'));
									//Currency Conversion
									if(($billingcurrency['Currency']['id'] != $this->data['AccountsClientinvoice']['currency']) && ($this->data['AccountsClientinvoice']['currency']!=' '))
									{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
    												$result = fgets($handle, 4096);
    												fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
											
											
										}
									else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price=$price;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
										}
									
									//End
									
								}
								if($this->data['AccountsClientinvoice']['type'][$editid]=='service')
								{
									$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['AccountsClientinvoice']['unit_name'][$editid]),'fields'=>array('BrandsService.totalcost')));
									$price=$servicedetail['BrandsService']['totalcost'];
									$yz=1;
									$this->set(compact('editid'));
										
									//Currency Conversion
								if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
									{
										
										$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
										$to=$fromcur['Currency']['name'];
										$from=$billingcurrency['Currency']['name'];
										$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
										$handle = @fopen($url, 'r');
										if ($handle) 
											{
	    											$result = fgets($handle, 4096);
	    											fclose($handle);
											}
										$allData = explode(',',$result);  //Get all the contents to an array 
										if($allData['1']==0)
											{
												$allData['1']=1;
											}
										$price=$price*$allData['1'];
										$symbol=$fromcur['Currency']['symbol'];
										$this->set(compact('symbol'));
									
									}
								else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
										if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
											{
												$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
												$to=$fromcur['Currency']['name'];
												$from=$billingcurrency['Currency']['name'];
												$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
												$handle = @fopen($url, 'r');
												if ($handle) 
													{
			    											$result = fgets($handle, 4096);
			    											fclose($handle);
													}
												$allData = explode(',',$result);  //Get all the contents to an array 
												if($allData['1']==0)
													{
														$allData['1']=1;
													}
												$price=$price*$allData['1'];
												$symbol=$fromcur['Currency']['symbol'];
												$this->set(compact('symbol'));
											}
										else
											{
												$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
												$price=$price;
												$symbol=$fromcur['Currency']['symbol'];
												$this->set(compact('symbol'));
											}
										}
								
								//End		
										
								}
								if($this->data['AccountsClientinvoice']['type'][$editid]=='package')
								{
									$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['AccountsClientinvoice']['unit_name'][$editid]),'fields'=>array('BrandsPackage.totalcost')));
									$price=$packagedetail['BrandsPackage']['totalcost'];
									$yz=1;
									$this->set(compact('editid'));
											//Currency Conversion
									if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
											
										}
									else
										{
											
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price=$price;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
										}
									//End
								}
						}
			 		else
			 		{
			 			if($this->data['AccountsClientinvoice']['type'] && $this->data['unit_name'][$editid] )
			 				{
			 					foreach($this->data['unit_name'] as $k=>$v)
										{
											if($this->data['AccountsClientinvoice']['type'][$k]=='unit')
													{
												
														$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v),'fields'=>array('BillingUnit.amount')));
														$price=$unitdetail['BillingUnit']['amount'];
														$yz=1;
														$this->set(compact('editid'));
														
																		//Currency Conversion
											if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
												{
													$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
													$to=$fromcur['Currency']['name'];
													$from=$billingcurrency['Currency']['name'];
													$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
													$handle = @fopen($url, 'r');
													if ($handle) 
														{
				    											$result = fgets($handle, 4096);
				    											fclose($handle);
														}
													$allData = explode(',',$result);  //Get all the contents to an array 
													if($allData['1']==0)
														{
															$allData['1']=1;
														}
													$price=$price*$allData['1'];
													$symbol=$fromcur['Currency']['symbol'];
													$this->set(compact('symbol'));
												}
											else
												{
													$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
													$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
													$price=$price;
													$symbol=$fromcur['Currency']['symbol'];
													$this->set(compact('symbol'));
										}
												}
											
											//End
														
														
													}
											if($this->data['AccountsClientinvoice']['type'][$k]=='service')
													{
														$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v),'fields'=>array('BrandsService.totalcost')));
														$price=$servicedetail['BrandsService']['totalcost'];
														$yz=1;
														$this->set(compact('editid'));
														//Currency Conversion
														if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
																{
																	$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
																		$to=$fromcur['Currency']['name'];
																		$from=$billingcurrency['Currency']['name'];
																		$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
																		$handle = @fopen($url, 'r');
																		if ($handle) 
																			{
									    											$result = fgets($handle, 4096);
									    											fclose($handle);
																			}
																		$allData = explode(',',$result);  //Get all the contents to an array 
																		if($allData['1']==0)
																			{
																				$allData['1']=1;
																			}
																		$price=$price*$allData['1'];
																		$symbol=$fromcur['Currency']['symbol'];
																		$this->set(compact('symbol'));
																	
																}
															else
																{
																	$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
																	$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
																	$price=$price;
																	$symbol=$fromcur['Currency']['symbol'];
																	$this->set(compact('symbol'));
																}
										}				
															//End
													}
											if($this->data['AccountsClientinvoice']['type'][$k]=='package')
													{
														$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v),'fields'=>array('BrandsPackage.totalcost')));
														$price=$packagedetail['BrandsPackage']['totalcost'];
														$yz=1;
														$this->set(compact('editid'));
														
														//Currency Conversion
														if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
															{
																
																$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
																$to=$fromcur['Currency']['name'];
																$from=$billingcurrency['Currency']['name'];
																$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
																$handle = @fopen($url, 'r');
																if ($handle) 
																	{
							    											$result = fgets($handle, 4096);
							    											fclose($handle);
																	}
																$allData = explode(',',$result);  //Get all the contents to an array 
																if($allData['1']==0)
																		{
																			$allData['1']=1;
																		}
																$price=$price*$allData['1'];
																$symbol=$fromcur['Currency']['symbol'];
																$this->set(compact('symbol'));
																
																
																
																
																
															}
														else
																{
																	$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
																	$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
																	$price=$price;
																	$symbol=$fromcur['Currency']['symbol'];
																	$this->set(compact('symbol'));
										}
																}
														//End
													}
										}
			 				}
			 		}
			 	}
		if($this->data['AccountsClientinvoice']['type1']=='package')
		{
			$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['updateunit_name1']),'fields'=>array('BrandsPackage.totalcost')));
			$price1=$packagedetail['BrandsPackage']['totalcost'];
			$x=1;
			//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									
									
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price1=$price1*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
									
								}
							else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price1=$price1*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price1=$price1;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
											
										}
										}
							if($this->data['AccountsClientinvoice']['discount1']){
								$moneyValue = $this->numberconversion($this->data['price_unit1']) - ($this->numberconversion($this->data['price_unit1'])*($this->data['AccountsClientinvoice']['discount1']/100) );
							}else{
								$moneyValue = $this->numberconversion($this->data['price_unit1']);
							}
									if($this->data['AccountsClientinvoice']['quantity_unit1']){
										$sub1 = $this->data['AccountsClientinvoice']['quantity_unit1'] * $moneyValue;
									}
							$subTotal = $price + $sub1;
							debug($subTotal);
							//End
			
		}
		if($this->data['AccountsClientinvoice']['type2']=='package')
		{
			$packagedetail=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$this->data['updateunit_name2']),'fields'=>array('BrandsPackage.totalcost')));
			$price2=$packagedetail['BrandsPackage']['totalcost'];
			$y=1;
			//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									
									
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price2=$price2*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
								}
							else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price2=$price2*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price2=$price2;
											
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
										}
							
							
							if($this->data['AccountsClientinvoice']['discount1']){
								$moneyValue = $this->numberconversion($this->data['price_unit1']) - ($this->numberconversion($this->data['price_unit1'])*($this->data['AccountsClientinvoice']['discount1']/100) );
							}else{
								$moneyValue = $this->numberconversion($this->data['price_unit1']);
							}
							
							
							$subTotal = ($moneyValue * $this->data['AccountsClientinvoice']['quantity_unit1']) + ($this->data['AccountsClientinvoice']['quantity_unit2'] * $price2);
							
							
							
							
							debug($subTotal);
							debug($price2);
							debug($this->data['price_unit1']);
							//End
			
			
		}
		if($this->data['AccountsClientinvoice']['type1']=='service')
		{
			$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['updateunit_name1']),'fields'=>array('BrandsService.totalcost')));
			$price1=$servicedetail['BrandsService']['totalcost'];
			$x=1;
			//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									
									
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price1=$price1*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
									
									
								}
							else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price1=$price1*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price1=$price1;
											
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
										}
								if($this->data['AccountsClientinvoice']['discount1']){
									$moneyValue = $this->numberconversion($this->data['price_unit1']) - ($this->numberconversion($this->data['price_unit1'])*($this->data['AccountsClientinvoice']['discount1']/100) );
									debug($moneyValue);
								}else{
									$moneyValue = $this->numberconversion($this->data['price_unit1']);
								}
							$subTotal = ($moneyValue * $this->data['AccountsClientinvoice']['quantity_unit1']) + ($this->data['AccountsClientinvoice']['quantity_unit2'] * $price2);
							//$subTotal = $price2 + $price1;
							debug($subTotal);
							//End
		
		}
		if($this->data['AccountsClientinvoice']['type2']=='service')
		{
			$servicedetail=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['updateunit_name2']),'fields'=>array('BrandsService.totalcost')));
			$price2=$servicedetail['BrandsService']['totalcost'];
			$y=1;
			//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									
									
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price2=$price2*$allData['1'];
									
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
									
									
								}
							else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price2=$price2*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price2=$price2;
											
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
										}
										
								
								if($this->data['AccountsClientinvoice']['discount1']){
									$moneyValue = $this->numberconversion($this->data['price_unit1']) - ($this->numberconversion($this->data['price_unit1'])*($this->data['AccountsClientinvoice']['discount1']/100) );
									debug($moneyValue);
								}else{
									$moneyValue = $this->numberconversion($this->data['price_unit1']);
								}
									debug($moneyValue);	
								$subTotal = ($moneyValue * $this->data['AccountsClientinvoice']['quantity_unit1']) + ($this->data['AccountsClientinvoice']['quantity_unit2'] * $price2);
								debug($subTotal);
							//$subTotal = $this->data['price_unit1'] + $price2;
							//End
			
			
		}
		if($this->data['AccountsClientinvoice']['type1']=='unit')
		{
			
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['updateunit_name1']),'fields'=>array('BillingUnit.amount')));
			$price1=$unitdetail['BillingUnit']['amount'];
			$x=1;
			
			//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price1=$price1*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
								}
							else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
										
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price1=$price1*$allData['1'];
											
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price1=$price1;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
											
										}
							
							if($this->data['AccountsClientinvoice']['discount1']){
									$moneyValue = $this->numberconversion($this->data['price_unit1']) - ($this->numberconversion($this->data['price_unit1'])*($this->data['AccountsClientinvoice']['discount1']/100) );
									debug($moneyValue);
								}else{
									if($this->data['price_unit1']){
										$moneyValue = $this->numberconversion($this->data['price_unit1']);
									}else{
										$moneyValue = $this->numberconversion($this->data['AccountsClientinvoice']['price_unit1']);
									}
									
								}
							debug($moneyValue);
							$subTotal = ($moneyValue * $this->data['AccountsClientinvoice']['quantity_unit1']) + ($this->data['AccountsClientinvoice']['quantity_unit2'] * $price2);
							//$subTotal = $price2 + $price1;
							//End
		
		}
		if($this->data['AccountsClientinvoice']['type2']=='unit')
		{
			
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['updateunit_name2']),'fields'=>array('BillingUnit.amount')));
			$price2=$unitdetail['BillingUnit']['amount'];
			$y=1;
			
			//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price2=$price2*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
									
								}
							else
								{
									$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price2=$price2*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price2=$price2;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
								}
							if($this->data['AccountsClientinvoice']['discount1']){
									$moneyValue = $this->numberconversion($this->data['price_unit1']) - ($this->numberconversion($this->data['price_unit1'])*($this->data['AccountsClientinvoice']['discount1']/100) );
								}else{
									$moneyValue = $this->numberconversion($this->data['price_unit1']);
								}
							$subTotal = ($moneyValue * $this->data['AccountsClientinvoice']['quantity_unit1']) + ($this->data['AccountsClientinvoice']['quantity_unit2'] * $price2);
							//$subTotal = $this->data['price_unit1'] + $price2;
							//End
			
			
		}
		if($this->data['PopupService']['unit_name1'])
		{
			
			$def_bill_cur=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
			$symbol=$def_bill_cur['Currency']['symbol'];
			++$flag;
			$this->loadModel('BillingUnit');
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupService']['unit_name1']),'fields'=>array('BillingUnit.amount')));
			$price=$unitdetail['BillingUnit']['amount'];
			
			$popupservice=1;
		
								
		}
		if($this->data['PopupService']['unit_name2'])
		{
			
			$def_bill_cur=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
			$symbol=$def_bill_cur['Currency']['symbol'];
			++$flag;
			$this->loadModel('BillingUnit');
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupService']['unit_name2']),'fields'=>array('BillingUnit.amount')));
			$price=$unitdetail['BillingUnit']['amount'];
			$popupservice1=1;
			
			
		}
		if($this->data['unit_name1'])
		{
			debug($this->data['unit_name1']);
			$this->loadModel('BillingUnit');
			$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['unit_name1'][$flag]),'fields'=>array('BillingUnit.amount')));
			$price=$unitdetail['BillingUnit']['amount'];
			$popupserviceadd=1;
			//Currency Conversion
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
									
									
									$to=$fromcur['Currency']['name'];
									$from=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
    											$result = fgets($handle, 4096);
    											fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$price=$price*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
									
									
									
									
								}
							else
										{
											$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
									if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
											$to=$fromcur['Currency']['name'];
											$from=$billingcurrency['Currency']['name'];
											$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
											$handle = @fopen($url, 'r');
											if ($handle) 
												{
		    											$result = fgets($handle, 4096);
		    											fclose($handle);
												}
											$allData = explode(',',$result);  //Get all the contents to an array 
											if($allData['1']==0)
												{
													$allData['1']=1;
												}
											$price=$price*$allData['1'];
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
									else
										{
											$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
											$price=$price;
											$symbol=$fromcur['Currency']['symbol'];
											$this->set(compact('symbol'));
										}
										}
							
							//End
			
		}
		if($this->data['package_name1'])
		{
			
			
			$this->loadModel('BillingUnit');
			$this->loadModel('BrandsService');
			foreach($this->data['package_name1'] as $kk=>$vv)
			{
				$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$vv),'fields'=>array('BillingUnit.amount')));
				$price=$unitdetail['BillingUnit']['amount'];
				//Currency Conversion
				if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
					{
						$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.name','Currency.symbol')));
						$to=$fromcur['Currency']['name'];
						$from=$billingcurrency['Currency']['name'];
						$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
						$handle = @fopen($url, 'r');
						if ($handle) 
							{
    							$result = fgets($handle, 4096);
    							fclose($handle);
							}
						$allData = explode(',',$result);  //Get all the contents to an array 
						if($allData['1']==0)
							{
								$allData['1']=1;
							}
						$price=$price*$allData['1'];
						$symbol=$fromcur['Currency']['symbol'];
						$this->set(compact('symbol'));
						$this->loadModel('CurrencyConversionrate');
						$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency'])));
						$conversion=$this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1'=>$billingcurrency['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$this->data['AccountsClientinvoice']['currency'])));
						$rate=$conversion['CurrencyConversionrate']['conversion_rate'];
						$price=$price*$rate;
						$symbol=$clientbilling['Currency']['symbol'];
						$this->set(compact('symbol'));
					}
				else
					{
						$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'])));
						if(($clientInfo['Client']['currency_id'] != $billingcurrency['Currency']['id']) && ($this->data['AccountsClientinvoice']['currency'] != $billingcurrency['Currency']['id']))
							{
								$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
								$to=$fromcur['Currency']['name'];
								$from=$billingcurrency['Currency']['name'];
								$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
								$handle = @fopen($url, 'r');
								if ($handle) 
									{
		    							$result = fgets($handle, 4096);
		    							fclose($handle);
									}
								$allData = explode(',',$result);  //Get all the contents to an array 
								if($allData['1']==0)
									{
										$allData['1']=1;
									}
								$price=$price*$allData['1'];
								$symbol=$fromcur['Currency']['symbol'];
								$this->set(compact('symbol'));
							}
						else
							{
								$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$billingcurrency['Currency']['id']),'fields'=>array('Currency.name','Currency.symbol')));
								$price=$price;
								$symbol=$fromcur['Currency']['symbol'];
								$this->set(compact('symbol'));
							}
					}
		
			$flag = $decideflag;
			$popuppackageadd=1;
			$this->set(compact('popuppackageadd','flag'));
			}
		}
		if($this->data['PopupPackage']['unit_name1'])
		{
			++$flag;
			$this->loadModel('BillingUnit');
			$this->loadModel('BrandsService');
			if(($this->data['PopupPackage']['unit_check']) && (!$this->data['PopupPackage']['service_check']))
			{
				$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupPackage']['unit_name1']),'fields'=>array('BillingUnit.amount')));
				$price=$unitdetail['BillingUnit']['amount'];
			}
			if((!$this->data['PopupPackage']['unit_check']) && ($this->data['PopupPackage']['service_check']))
			{
				$servicedetails=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['PopupPackage']['unit_name1']),'fields'=>array('BrandsService.totalcost')));
				$price=$servicedetails['BrandsService']['totalcost'];
			}
			if(($this->data['PopupPackage']['unit_check']) && ($this->data['PopupPackage']['service_check']))
			$exp=explode('-',$this->data['PopupPackage']['unit_name1']);
			if($exp[1]=='u')
			{
				$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$exp[0]),'fields'=>array('BillingUnit.amount')));
				$price=$unitdetail['BillingUnit']['amount'];
			}
			if($exp[1]=='s')
			{
				$servicedetails=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$exp[0]),'fields'=>array('BrandsService.totalcost')));
				$price=$servicedetails['BrandsService']['totalcost'];
			}
			
			$popuppackage=1;
		}
		if($this->data['PopupPackage']['unit_name2'])
		{
			++$flag;
			$this->loadModel('BillingUnit');
			$this->loadModel('BrandsService');
			if(($this->data['PopupPackage']['unit_check']) && (!$this->data['PopupPackage']['service_check']))
			{
				$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupPackage']['unit_name2']),'fields'=>array('BillingUnit.amount')));
				$price=$unitdetail['BillingUnit']['amount'];
			}
			if((!$this->data['PopupPackage']['unit_check']) && ($this->data['PopupPackage']['service_check']))
			{
				$servicedetails=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['PopupPackage']['unit_name2']),'fields'=>array('BrandsService.totalcost')));
				$price=$servicedetails['BrandsService']['totalcost'];
			}
			if((!$this->data['PopupPackage']['unit_check']) && ($this->data['PopupPackage']['service_check'])){
				$exp=explode('-',$this->data['PopupPackage']['unit_name2']);
				if($exp[1]=='u')
					{
						$unitdetail=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$exp[0]),'fields'=>array('BillingUnit.amount')));
						$price=$unitdetail['BillingUnit']['amount'];
					}
				if($exp[1]=='s')
					{
						$servicedetails=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$exp[0]),'fields'=>array('BrandsService.totalcost')));
						$price=$servicedetails['BrandsService']['totalcost'];
					}
			}
			
			
			$popuppackage1=1;
		}
	
		if($decideflag==1)
		{
			$y=0;
			$yz=0;
			$z=0;
			$x=1;
			$this->set(compact('x','y','z'));
		}
		if($decideflag==2)
		{
			$y=1;
			$z=0;
			$yz=0;
			$x=0;
			$this->set(compact('x','y','z'));
		}
		if($decideflag==3)
		{
			$y=0;
			$z=1;
			$yz=0;
			$x=0;
			$this->set(compact('x','y','z'));
		}
		if($decideflag==4)
		{
			$y=0;
			$z=0;
			$yz=1;
			$x=0;
			$this->set(compact('x','y','z','yz'));
		}
		if($subTotal1){
			if($this->data['subTotal']){
				$subTotal = $this->data['subTotal'] + $price;
			}elseif($this->data['AccountsClientinvoice']['subtotal']){
				$subTotal = $this->data['AccountsClientinvoice']['subtotal'] + $price;
			}else{
				$subTotal = $price;
			}
			
		}if(!$editid){
			
			foreach($this->data['service_tax'] as $kst => $vst){
				if(is_array($vst)){
					foreach($vst as $kvst=>$vvst){
						$st = $st + $vvst;
					}
					
				}else{
					$st = $st + $vst;
				}
			
		}
		}
		
		debug($subTotal);
		debug($grandTotalValue);
		debug($st);
		$grandTotal = $subTotal  + $st;
		
		$this->set(compact('subTotal','grandTotal','price_name1','price_name2','price1','price2','price','popupservice','popupservice1','flag','popupserviceadd','popuppackage1','popuppackage','symbol'));
		
	}
	public function discountCalc($amount,$discount){
		$val = $amount - (($amount*$discount)/100);
		return $val;
	}
	
	public function calc($decideflag=null,$flag = null,$editid=null)
	{
		
		//debug($this->data);
		$this->loadModel('Currency');
		if(!$editid){
			if($this->data['service_tax']){
				foreach($this->data['service_tax'] as $ktax=>$vtax){
					if(is_array($vtax)){
						foreach($vtax as $kvtax=>$vvtax){
							$taxTotal = $taxTotal + $vvtax;
						}
					}else{
						$taxTotal = $taxTotal + $vtax;
					}
					
				}
			}
		}
		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
		$x=null;$y=null;$z=null;
		if($this->data['updateunit_name1'] && is_numeric($this->data['AccountsClientinvoice']['quantity_unit1']) && $this->data['price_unit1'])
		{
			$y=null;$z=null;
			$x=1;
			$total=0;
			if(is_numeric($this->data['AccountsClientinvoice']['quantity_unit1'] ))
			{
					//debug((is_integer($this->data['AccountsClientinvoice']['quantity_unit1'])));
				$total=$total+($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']));
				if(is_numeric($this->data['AccountsClientinvoice']['discount1']))
					{
						if(($this->data['AccountsClientinvoice']['discount1']<=100) &&($this->data['AccountsClientinvoice']['discount1']>=0))
							{
								$total=$total-($total*($this->data['AccountsClientinvoice']['discount1']/100));
							}
						else
							{
								$msg=1;
								$this->set(compact('msg'));
								//$this->Session->setFlash(__('Discount Not Valid'));
							}
					}
				if($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency'])
					{
						$this->loadModel('CurrencyConversionrate');
						$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency'])));
						$conversion=$this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1'=>$billingcurrency['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$this->data['AccountsClientinvoice']['currency'])));
						$rate=$conversion['CurrencyConversionrate']['conversion_rate'];
						//$total=$total*$rate;
						$symbol=$clientbilling['Currency']['symbol'];
						$this->set(compact('symbol'));
					}
			}
			else
			{
				
				$msg1=1;
				$this->set(compact('msg1'));
			}
			/*$this->set(compact('total','x','y','z'));*/
		}
		if($this->data['updateunit_name2'] && is_numeric($this->data['AccountsClientinvoice']['quantity_unit2']) && $this->data['price_unit2'])
		{
			$x=null;
			$y=1;
			$total1=0;
			if(is_numeric($this->data['AccountsClientinvoice']['quantity_unit2']))
			{
					$total1=$total1+($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']));
					if($this->data['AccountsClientinvoice']['discount2'])
						{
							if(($this->data['AccountsClientinvoice']['discount2']<=100)&&($this->data['AccountsClientinvoice']['discount1']>=0))
								{
									$total1=$total1-($total1*($this->data['AccountsClientinvoice']['discount2']/100));
								}
							else
								{
									$msg=1;
									$this->set(compact('msg'));
									//$this->Session->setFlash(__('Discount Not Valid'));
								}
				
						}
						if($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency'])
						{
							$this->loadModel('CurrencyConversionrate');
							$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency'])));
							$conversion=$this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1'=>$billingcurrency['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$this->data['AccountsClientinvoice']['currency'])));
							$rate=$conversion['CurrencyConversionrate']['conversion_rate'];
						//	$total1=$total1*$rate;
							$symbol=$clientbilling['Currency']['symbol'];
							$this->set(compact('symbol'));
						}
			}
			else
			{
				
				$msg1=1;
				$this->set(compact('msg1'));
			}
			/*$this->set(compact('total1','y','x','z'));*/
		}
		if($this->data['unit_name'] && $this->data['quantity_unit'] && $this->data['price_unit'])
		{  
			debug($this->data);
			/*$billingcurrency=$this->Currency*/
			debug($this->data['quantity_unit'][$flag]);
			$x=null;
			$z=1;
			$total2=0;
			if(is_numeric($this->data['quantity_unit'][$flag]))
			{
					$total2=$total2+($this->data['quantity_unit'][$flag]*$this->numberconversion($this->data['price_unit'][$flag]));
						if($this->data['discount'])
								{
									
									if(($this->data['discount'][$flag]<=100)&&($this->data['discount'][$flag]>=0))
										{
											$total2=$total2-($total2*($this->data['discount'][$flag]/100));
										}
									else
										{
											$msg=1;
											$this->set(compact('msg'));
										}
								}
					if($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency'])
					{
						$this->loadModel('CurrencyConversionrate');
						$clientbilling=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency'])));
						$conversion=$this->CurrencyConversionrate->find('first',array('conditions'=>array('CurrencyConversionrate.currency_id1'=>$billingcurrency['Currency']['id'],'CurrencyConversionrate.currency_id2'=>$this->data['AccountsClientinvoice']['currency'])));
						$rate=$conversion['CurrencyConversionrate']['conversion_rate'];
						$symbol=$clientbilling['Currency']['symbol'];
						$this->set(compact('symbol'));
					}
			}
			else
			{
				$msg1=1;
				$this->set(compact('msg1'));
			}
		}
			if($editid)
				{
					
					
						$yz=1;
						$edittotal=0;
						if($this->data['price_unit'][$editid]){
							
							if(is_numeric($this->data['AccountsClientinvoice']['quantity_unit'.$editid])){
									$edittotal=$edittotal+($this->data['AccountsClientinvoice']['quantity_unit'.$editid]*$this->numberconversion($this->data['price_unit'][$editid]));
									if($this->data['AccountsClientinvoice']['discount'.$editid]){
											if($this->data['AccountsClientinvoice']['discount'.$editid]<=100 && $this->data['AccountsClientinvoice']['discount'.$editid]>=0)
												{
													$edittotal=$edittotal-($edittotal*($this->data['AccountsClientinvoice']['discount'.$editid]/100));
												}
											else{
													$msg=1;
													$this->set(compact('msg'));
											//		$this->Session->setFlash(__('Discount Not Valid'));
												}
									}
							}else{
								$msg1=1;
								$this->set(compact('msg1'));
							}
						}else{
							if(is_numeric($this->data['AccountsClientinvoice']['quantity_unit'.$editid])){
									$edittotal=$edittotal+($this->data['AccountsClientinvoice']['quantity_unit'.$editid]*$this->numberconversion($this->data['AccountsClientinvoice']['price_unit'.$editid]));
									if($this->data['AccountsClientinvoice']['discount'.$editid])
										{
											if($this->data['AccountsClientinvoice']['discount'.$editid]<=100 && $this->data['AccountsClientinvoice']['discount'.$editid]>=0)
												{
													$edittotal=$edittotal-($edittotal*($this->data['AccountsClientinvoice']['discount'.$editid]/100));
											   	}
									else{
											$msg=1;
											$this->set(compact('msg'));
										//	$this->Session->setFlash(__('Discount Not Valid'));
						 				}
								}
							}
							else{
								$msg1=1;
								$this->set(compact('msg1'));
							}
						}
						foreach($this->data['AccountsClientinvoice']['detailid'] as $ksub =>$vsub){
							if($this->data['price_unit'][$ksub]){
								$amountWithoutDiscount = $this->data['AccountsClientinvoice']['quantity_unit'.$ksub] * $this->data['price_unit'][$ksub];
							}else{
								$amountWithoutDiscount = $this->data['AccountsClientinvoice']['quantity_unit'.$ksub] * $this->data['AccountsClientinvoice']['price_unit'.$ksub];
							}
							
							$discountedAmount = 0;
							if($this->data['AccountsClientinvoice']['discount'.$ksub]){
								$discountedAmount = ($this->data['AccountsClientinvoice']['discount'.$ksub]/100) * $amountWithoutDiscount;
								$finalSub = $amountWithoutDiscount - $discountedAmount;
							}else{
								$finalSub = $amountWithoutDiscount;
							}
							$subTotalEdit = $subTotalEdit + $finalSub;
						}foreach($this->data['service_tax'] as $serviceTaxKey => $serviceTaxVal){
							foreach($serviceTaxVal as $stk => $stv){
								$taxTotalEdit = $taxTotalEdit + $stv;
							}
						}$grandTotalEdit = $subTotalEdit + $taxTotalEdit;
						$this->set(compact('grandTotalEdit','subTotalEdit'));
				}
		if($decideflag==1){
			$y=0;
			$z=0;
			if($editid){
				$x=0;
				$yz=1;
			}else{
				$x=1;
				$yz=0;
			}$this->set(compact('total','x','y','z','yz','edittotal','editid'));
		}
		if($decideflag==2){
			$y=1;
			$z=0;
			$x=0;
			$this->set(compact('total1','x','y','z'));
		}
		if($decideflag==3){
			$y=0;
			$z=1;
			$x=0;
			$this->set(compact('total2','x','y','z','flag'));
		}
		foreach($this->data['price_unit'] as $kv=>$vk){
			if($this->data['quantity_unit'][$kv]){
				$price_vk = $this->numberconversion($vk) * $this->data['quantity_unit'][$kv];
			}else{
				$price_vk = $this->numberconversion($vk);
			}
			
			if($this->data['discount'][$kv]){
				
				$discountvk = $price_vk - (($this->data['discount'][$kv]/100)*$price_vk);
				
			}else{
				$discountvk = $price_vk;
			}
			$addedTotal = $addedTotal + $discountvk;
		}
		if($this->data['AccountsClientinvoice']['discount1'] && $this->data['price_unit1']){
			if($this->data['AccountsClientinvoice']['quantity_unit1']){
				$costTotal1 = $this->numberconversion($this->data['price_unit1']) * $this->data['AccountsClientinvoice']['quantity_unit1'];
			}elseif($this->data['quantity_unit1']){
				$costTotal1 = $this->numberconversion($this->data['price_unit1']) * $this->data['quantity_unit1'];
			}else{
				$costTotal1 = $this->numberconversion($this->data['price_unit1']) ;
			}
			
			$total1 = $costTotal1 - (($this->data['AccountsClientinvoice']['discount1']/100)*$costTotal1);
		}else{
			if($this->data['AccountsClientinvoice']['quantity_unit1']){
				$costTotal1 = $this->numberconversion($this->data['price_unit1']) * $this->data['AccountsClientinvoice']['quantity_unit1'];
			}elseif($this->data['quantity_unit1']){
				$costTotal1 = $this->numberconversion($this->data['price_unit1']) * $this->data['quantity_unit1'];
			}else{
				$costTotal1 = $this->numberconversion($this->data['price_unit1']) ;
			}
			$total1 = $costTotal1;
		}
		if($this->data['AccountsClientinvoice']['discount2'] && $this->data['price_unit2']){
			if($this->data['AccountsClientinvoice']['quantity_unit2']){
				$costTotal2 = $this->numberconversion($this->data['price_unit2']) * $this->data['AccountsClientinvoice']['quantity_unit2'];
			}elseif($this->data['quantity_unit1']){
				$costTotal2 = $this->numberconversion($this->data['price_unit2']) * $this->data['quantity_unit2'];
			}else{
				$costTotal2 = $this->numberconversion($this->data['price_unit2']) ;
			}
			
			$total2 = $costTotal2 - (($this->data['AccountsClientinvoice']['discount2']/100)*$costTotal2);
		}else{
			if($this->data['AccountsClientinvoice']['quantity_unit2']){
				$costTotal2 = $this->numberconversion($this->data['price_unit2']) * $this->data['AccountsClientinvoice']['quantity_unit2'];
			}elseif($this->data['quantity_unit1']){
				$costTotal2 = $this->numberconversion($this->data['price_unit2']) * $this->data['quantity_unit2'];
			}else{
				$costTotal2 = $this->numberconversion($this->data['price_unit2']) ;
			}
			$total2 = $costTotal2;
		}
		//$grandTotal = $grandTotal + $total + $total1 + $total2;
		debug($total2);
		debug($addedTotal);
		if(!$total1 && !$total2){
			foreach($this->data['AccountsClientinvoice']['detailid'] as $ks=>$vs){
				if($this->data['AccountsClientinvoice']['amount'][$ks]){
					$total1 = $total1 + $this->data['AccountsClientinvoice']['amount'][$ks];
				}else{
					$total1 = $total1 + $this->data['total'][$ks];
				}
				
			}
		}
		$grandTotal = $addedTotal +  $total1 + $total2;
		$subTotal = $grandTotal;
		if($taxTotal){
			$grandTotal = $subTotal + $taxTotal + $this->data['AccountsClientinvoice']['latefee'];
		}else{
			$grandTotal = $subTotal +  $this->data['AccountsClientinvoice']['latefee'];
		}
		
		$this->set(compact('grandTotal','taxTotal','subTotal'));
		
	}
	
	public function tax($flag=null,$editid=null,$recurringid=null,$deltax=null)
	{
		
		/*configure::write('debug',2);
		debug($this->data);*/
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		if($deltax)
			{
				$this->set(compact('deltax'));
			}
		
		if(!$editid)
			{
				debug($editid);
				if($this->data['AccountsClientinvoice']['addtax1'] || $this->data['AccountsClientinvoice']['addtax2'] || $this->data['addtax'])
					{
						if(($this->data['AccountsClientinvoice']['addtax1']) && ($deltax!='addtax1'))
							{
								debug('1');
								$totalamount_new=$this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']);
								$expaddtax1=explode('-',$this->data['AccountsClientinvoice']['addtax1']);
								if($expaddtax1[1])
									{
										$taxgroup_new=$this->AccountsTaxgroup->find('first',array('AccountsTaxgroup.id'=>$expaddtax1[1]));
										if($taxgroup_new['AccountsTaxgroup']['compounded']=='Y')
											{
												$compounded=1;
												$compounded_taxableamount=null;
											}
										$taxgroupdetailsaddtax1=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$expaddtax1[1]),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
										foreach($taxgroupdetailsaddtax1 as $keyaddtax1=>$valaddtax1)
											{
												$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$valaddtax1['AccountsTaxgroupmapping']['accounts_tax_id'])));
												if($this->data['AccountsClientinvoice']['discount1'])
													{
														$discount1=($totalamount_new)*($this->data['AccountsClientinvoice']['discount1']/100);
													}
												$taxable_amount=$totalamount_new-$discount1;
												$percentage=$taxname['AccountsTax']['percent'];
												if($compounded)
													{
														if($compounded_taxableamount)
														{
															$taxable_amount=$compounded_taxableamount;
														}
														$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount*($percentage/100);
														$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
														$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount;
														$compounded_taxableamount=$taxable_amount+($taxable_amount*($percentage/100));
														
														//$grandTotal = $this->data['grandTotal'] +  $taxable_amount*($percentage/100);
													}
												else
													{
														$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount*($percentage/100);
														$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
														$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount;
														//$grandTotal = $this->data['grandTotal'] +  $taxable_amount*($percentage/100);
													}
											}
									}
								else
									{
										$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax1'])));
										if($this->data['AccountsClientinvoice']['discount1'])
											{
												$discount1=($totalamount_new)*($this->data['AccountsClientinvoice']['discount1']/100);
											}
										$taxable_amount=$totalamount_new-$discount1;
										$percentage=$taxname['AccountsTax']['percent'];
										$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount*($percentage/100);
										$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
										$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount;
										//$grandTotal = $this->data['grandTotal'] +  $taxable_amount*($percentage/100);
									}
								
							}
						if($this->data['AccountsClientinvoice']['addtax2'] && ($deltax!='addtax2'))
							{
								debug('2');
								$totalamount_new2=$this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']);
								$expaddtax2=explode('-',$this->data['AccountsClientinvoice']['addtax2']);
								if($expaddtax2[1])
									{
										$taxgroup_new1=$this->AccountsTaxgroup->find('first',array('AccountsTaxgroup.id'=>$expaddtax2[1]));
										if($taxgroup_new1['AccountsTaxgroup']['compounded']=='Y')
											{
												$compounded=1;
												$compounded_taxableamount1=null;
											}
										$taxgroupdetailsaddtax2=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$expaddtax2[1]),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
										foreach($taxgroupdetailsaddtax2 as $keyaddtax1=>$valaddtax1)
											{
												$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$valaddtax1['AccountsTaxgroupmapping']['accounts_tax_id'])));
												if($this->data['AccountsClientinvoice']['discount2'])
													{
														$discount2=($totalamount_new2)*($this->data['AccountsClientinvoice']['discount2']/100);
													}
												$taxable_amount2=$totalamount_new2-$discount2;
												$percentage2=$taxname['AccountsTax']['percent'];
												if($compounded)
													{
														if($compounded_taxableamount1)
														{
															$taxable_amount2=$compounded_taxableamount1;
														}
														$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount2*($percentage2/100);
														$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
														$compounded_taxableamount1=$taxable_amount2+($taxable_amount2*($percentage2/100));
														$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount2;
														//$grandTotal = $this->data['grandTotal'] + $taxable_amount2*($percentage2/100);
													}
												else
													{
														$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount2*($percentage2/100);
														$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
														$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount2;
														//$grandTotal = $this->data['grandTotal']  + $taxable_amount2*($percentage2/100);
													}
											}
									}
								else
									{
										$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax2'])));
										if($this->data['AccountsClientinvoice']['discount2'])
											{
												$discount2=($totalamount_new2)*($this->data['AccountsClientinvoice']['discount2']/100);
											}
										$taxable_amount2=$totalamount_new2-$discount2;
										$percentage2=$taxname['AccountsTax']['percent'];
										$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount2*($percentage2/100);
										$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
										$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount2;
										//$grandTotal = $this->data['grandTotal']  + $taxable_amount2*($percentage2/100);
									}
							}
							
						if($this->data['addtax'])
							{
								debug('3');
								foreach($this->data['addtax'] as $dynamickey=>$dynamicval)
									{
										if($deltax !='addtaxmore'.$dynamickey)
										{
											debug($dynamickey);
											$totalamount_new3=$this->data['quantity_unit'][$dynamickey]*$this->numberconversion($this->data['price_unit'][$dynamickey]);
											$expaddtax3=explode('-',$dynamicval);
											if($expaddtax3[1])
												{
													$taxgroup_new3=$this->AccountsTaxgroup->find('first',array('AccountsTaxgroup.id'=>$expaddtax3[1]));
													
													if($taxgroup_new3['AccountsTaxgroup']['compounded']=='Y')
														{
															$compounded=1;
															$compounded_taxableamount3=null;
														}
													$taxgroupdetailsaddtax3=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$expaddtax3[1]),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
													foreach($taxgroupdetailsaddtax3 as $keyaddtax1=>$valaddtax1)
														{
															$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$valaddtax1['AccountsTaxgroupmapping']['accounts_tax_id'])));
															if($this->data['discount'][$dynamickey])
																{
																	$discount3=($totalamount_new3)*($this->data['discount'][$dynamickey]/100);
																}
															$taxable_amount3=$totalamount_new3-$discount3;
															$percentage3=$taxname['AccountsTax']['percent'];
															if($compounded)
																{
																	if($compounded_taxableamount3)
																	{
																		$taxable_amount3=$compounded_taxableamount3;
																	}
																	$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount3*($percentage3/100);
																	$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
																	$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount3;
																	$compounded_taxableamount3=$taxable_amount3+($taxable_amount3*($percentage3/100));
																	
																	//$grandTotal = $this->data['grandTotal'] + $taxable_amount3*($percentage3/100);
																}
															else
																{
																	$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount3*($percentage3/100);
																	$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
																	$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount3;
																	//$grandTotal = $this->data['grandTotal']  + $taxable_amount3*($percentage3/100);
																}
														}
												}
											else
												{
													$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$dynamicval)));
													if($this->data['discount'][$dynamickey])
														{
															$discount3=($totalamount_new3)*($this->data['discount'][$dynamickey]/100);
														}
													$taxable_amount3=$totalamount_new3-$discount3;
													$percentage3=$taxname['AccountsTax']['percent'];
													$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount3*($percentage3/100);
													$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
													$taxarray[$taxname['AccountsTax']['id']]['taxable'] = $taxarray[$taxname['AccountsTax']['id']]['taxable'] + $taxable_amount3;
													//$grandTotal = $this->data['grandTotal']  + $taxable_amount3*($percentage3/100);
												}
										}
										
									}
							
							}	
						
					}
					$subTotalToadd = $this->data['subTotal'];
					$this->set(compact('subTotalToadd'));
		}
		
	
/////////////////////////////////////////////////---EDIT INVOICE---///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
		if($editid)
		{
			/*
			debug($this->data);
			debug($editid);*/
			$this->loadModel('AccountsTaxgroup');
			$this->loadModel('AccountsTaxgroupmapping');
			$this->loadModel('AccountsTax');
			
			
			if($this->data['AccountsClientinvoice']['addtax_recurring'])
				{
					foreach($this->data['AccountsClientinvoice']['addtax_recurring'] as $editkey=>$editval)
						{
							if($editval)
								{
									debug($editval);
									if($this->data['price_unit'][$editkey])
										{
											$price=$this->data['price_unit'][$editkey];
										}
									else
										{
											$price=$this->data['AccountsClientinvoice']['price_unit'.$editkey];
										}
									$totalamount_new=$this->data['AccountsClientinvoice']['quantity_unit'.$editkey]*$this->numberconversion($price);
									debug($totalamount_new);
									debug($this->data['AccountsClientinvoice']['quantity_unit'.$editkey]);
									debug($this->numberconversion($price));
									debug($this->data['price_unit'][$editkey]);
									debug($editkey);
									$expaddtax=explode('-',$editval);
									debug($expaddtax);
									if($expaddtax[1])
										{
											$taxgroup_new=$this->AccountsTaxgroup->find('first',array('AccountsTaxgroup.id'=>$expaddtax[1]));
											debug($taxgroup_new);
											if($taxgroup_new['AccountsTaxgroup']['compounded']=='Y')
												{
													$compounded=1;
													$compounded_taxableamount=null;
												}
											$taxgroupdetailsaddtax=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$expaddtax[1]),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
											debug($taxgroupdetailsaddtax);
											foreach($taxgroupdetailsaddtax as $keyaddtax1=>$valaddtax1)
												{
													$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$valaddtax1['AccountsTaxgroupmapping']['accounts_tax_id'])));
													if($this->data['AccountsClientinvoice']['discount'.$editkey])
														{
															$discount=($totalamount_new)*($this->data['AccountsClientinvoice']['discount'.$editkey]/100);
														}
													debug($totalamount_new);
													debug($this->data['AccountsClientinvoice']['discount'.$editkey]);
													$taxable_amount=$totalamount_new-$discount;
													debug($taxable_amount);
													$percentage=$taxname['AccountsTax']['percent'];
													if($compounded)
														{
															debug($compounded_taxableamount);
															if($compounded_taxableamount)
																{
																	$taxable_amount=$compounded_taxableamount;
																}
															debug($taxable_amount);
															$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount*($percentage/100);
															$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
															$compounded_taxableamount=$taxable_amount+($taxable_amount*($percentage/100));
														}
													else
														{
															$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount*($percentage/100);
															$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
														}
													debug($taxarray);
												}
										}
									else
										{
											$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$editval)));
											if($this->data['AccountsClientinvoice']['discount'.$editkey])
												{
													$discount=($totalamount_new)*($this->data['AccountsClientinvoice']['discount'.$editkey]/100);
												}
											$taxable_amount=$totalamount_new-$discount;
											$percentage=$taxname['AccountsTax']['percent'];
											$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount*($percentage/100);
											$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
											
										}
										
								}
						}
				}
			
			
			if($this->data['addtax'])
				{
					foreach($this->data['addtax'] as $dynamiceditkey=>$dynamiceditval)
						{
							if($dynamiceditval)
								{
									$totalamount_new1=$this->data['quantity_unit'][$dynamiceditkey]*$this->numberconversion($this->data['price_unit'][$dynamiceditkey]);
									$expaddtax1=explode('-',$dynamiceditval);
									if($expaddtax1[1])
										{
											$taxgroup_new1=$this->AccountsTaxgroup->find('first',array('AccountsTaxgroup.id'=>$expaddtax1[1]));
											if($taxgroup_new1['AccountsTaxgroup']['compounded']=='Y')
												{
													$compounded=1;
													$compounded_taxableamount1=null;
												}
											$taxgroupdetailsaddtax1=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$expaddtax1[1]),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
											foreach($taxgroupdetailsaddtax1 as $keyaddtax1=>$valaddtax1)
												{
													$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$valaddtax1['AccountsTaxgroupmapping']['accounts_tax_id'])));
													if($this->data['discount'][$dynamiceditkey])
														{
															$discount1=($totalamount_new1)*($this->data['discount'][$dynamiceditkey]/100);
														}
													$taxable_amount1=$totalamount_new1-$discount1;
													$percentage=$taxname['AccountsTax']['percent'];
													if($compounded)
														{
															if($compounded_taxableamount1)
																{
																	$taxable_amount1=$compounded_taxableamount1;
																}
															$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount1*($percentage/100);
															$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
															$compounded_taxableamount1=$taxable_amount1+($taxable_amount1*($percentage/100));
														}
													else
														{
															$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount1*($percentage/100);
															$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
														}
												}
										}
									else
										{
											$taxname=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$dynamiceditval)));
											if($this->data['discount'][$dynamiceditkey])
												{
													$discount1=($totalamount_new1)*($this->data['discount'][$dynamiceditkey]/100);
												}
											$taxable_amount1=$totalamount_new1-$discount1;
											$percentage=$taxname['AccountsTax']['percent'];
											$taxarray[$taxname['AccountsTax']['id']]['finaltax']=$taxarray[$taxname['AccountsTax']['id']]['finaltax']+$taxable_amount1*($percentage/100);
											$taxarray[$taxname['AccountsTax']['id']]['taxname']=$taxname['AccountsTax']['name'];
										}
								}
						}
				}
		}
	
/////////////////////////////////////////////////---EDIT INVOICE ENDS---///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
/////////////////////////////////////////////////---ADD RECURRING INVOICE---///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		if($recurringid)
		{
			//
			
			debug($recurringid);
			$this->loadModel('AccountsTaxgroup');
			$this->loadModel('AccountsTaxgroupmapping');
			$this->loadModel('AccountsTax');
			
			$decidetaxgroup1=explode('-',$this->data['AccountsClientinvoice']['addtax_recurring'][$recurringid]);
			if($decidetaxgroup1[1])
			{
				$taxgroup1=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$decidetaxgroup1[1])));
				if($taxgroup1['AccountsTaxgroup']['compounded']=='N')
				{
					$groupmap1=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$decidetaxgroup1[1]),'order'=>'AccountsTaxgroupmapping.priority'));
					foreach($groupmap1 as $k=>$v)
					{
						$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$taxarray[$v['AccountsTaxgroupmapping']['accounts_tax_id']]=$taxtype['AccountsTax']['name'];
						$finaltax[$v['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxarray[$v['AccountsTaxgroupmapping']['accounts_tax_id']];
						$finaltax[$v['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$finaltax[$v['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+($this->data['AccountsClientinvoice']['amount'.$recurringid]*$taxtype['AccountsTax']['percent']/100);
					}
					
				}
				else
				{
					$groupmap1=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$decidetaxgroup1[1]),'order'=>'AccountsTaxgroupmapping.priority'));
					$taxable_amount=0;
					foreach($groupmap1 as $k=>$v)
						{
							debug($k);
							debug($v);
							$taxtype=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsTaxgroupmapping']['accounts_tax_id'])));
							$taxarray[$v['AccountsTaxgroupmapping']['accounts_tax_id']]=$taxtype['AccountsTax']['name'];
							
							$finaltax[$v['AccountsTaxgroupmapping']['accounts_tax_id']]['taxname']=$taxarray[$v['AccountsTaxgroupmapping']['accounts_tax_id']];
							if($taxable_amount==0)
							{
								$taxable_amount=$this->data['AccountsClientinvoice']['amount'.$recurringid];
							}
						
							$finaltax[$v['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$finaltax[$v['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+($taxable_amount*$taxtype['AccountsTax']['percent']/100);
							$taxable_amount=$taxable_amount+$finaltax[$v['AccountsTaxgroupmapping']['accounts_tax_id']]['total'];
							debug($taxable_amount);
						}
						
						
				}
			}
			else
			{
				$taxpercentage=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$this->data['AccountsClientinvoice']['addtax_recurring'][$recurringid])));
				$taxarray[$this->data['AccountsClientinvoice']['addtax_recurring'][$recurringid]]['total']=($taxpercentage['AccountsTax']['percent']*$this->data['AccountsClientinvoice']['amount'.$recurringid])/100;
				$finaltax1=$taxarray[$this->data['AccountsClientinvoice']['addtax'.$recurringid]]['finaltax']+($taxpercentage['AccountsTax']['percent']*$total)/100;
				$taxarray[$this->data['AccountsClientinvoice']['addtax_recurring'][$recurringid]]['taxname']=$taxpercentage['AccountsTax']['name'];
				
			}
			foreach($this->data['AccountsClientinvoice']['addtax_recurring'] as $kad=>$vad)
			{
				if($kad!=$recurringid)
				{
					$grouptype=explode('-',$vad);
					if($grouptype[1])
					{
						debug($grouptype);
						$findtaxgroup=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$grouptype[1])));
					//	debug($findtaxgroup['AccountsTaxgroup']['id']);
						$findtaxgroupmap=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$findtaxgroup['AccountsTaxgroup']['id'])));
					//	debug($findtaxgroupmap);
						if($findtaxgroup['AccountsTaxgroup']['compounded']=='N')
						{
							foreach($findtaxgroupmap as $ktaxmap=>$vtaxmap)
								{
									$taxpercent=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
									$taxadd=($taxpercent['AccountsTax']['percent']*$this->data['AccountsClientinvoice']['amount'.$kad])/100;
									$recurringtaxarray[$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id']]['taxtype']=$taxpercent['AccountsTax']['name'];
									$recurringtaxarray[$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$recurringtaxarray[$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxadd;
								}
						}
						else
						{
							foreach($findtaxgroupmap as $ktaxmap=>$vtaxmap)
								{
									$taxpercent=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id'])));
									if($taxable_amount==0)
										{
											$taxable_amount=$this->data['AccountsClientinvoice']['amount'.$kad];
										}
									$taxadd=($taxpercent['AccountsTax']['percent']*$taxable_amount)/100;
									
									$recurringtaxarray[$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id']]['taxtype']=$taxpercent['AccountsTax']['name'];
									$recurringtaxarray[$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id']]['total']=$recurringtaxarray[$vtaxmap['AccountsTaxgroupmapping']['accounts_tax_id']]['total']+$taxadd;
									$taxable_amount=$taxable_amount+$taxadd;
								}
						}
						
						
					}
					else
					{
						$taxpercent=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vad)));
						$taxadd=($taxpercent['AccountsTax']['percent']*$this->data['AccountsClientinvoice']['amount'.$kad])/100;
						$recurringtaxarray[$vad]['taxtype']=$taxpercent['AccountsTax']['name'];
						$recurringtaxarray[$vad]['total']=$recurringtaxarray[$vad]['total']+$taxadd;
					}
					debug($recurringtaxarray);
				}
				
				else
				{
					
					foreach($finaltax as $kre=>$vre)
					{
						debug($kre);
						debug($vre);
						/*foreach($recurringtaxarray as $krec=>$vrec)
						{
							if($kre==$krec)
							{
								$finalrecarray[$kre]['taxname']=$vrec['taxtype'];
								$finalrecarray[$kre]['total']=$vre['total']+$vrec['total'];
							}
						}*/
						$recurringtaxarray[$kre]['taxtype']=$vre['taxname'];
						$recurringtaxarray[$kre]['total']=$recurringtaxarray[$kre]['total']+$vre['total'];
					debug($recurringtaxarray);
					}
				}
			}
			debug($finaltax);
			debug($taxarray);
			debug($recurringtaxarray);
		}
/////////////////////////////////////////////////---ADD RECURRING INVOICE ENDS---///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
		$this->set(compact('finaltax'));
		$this->set(compact('recurringtaxarray'));
		$this->set(compact('taxarray'));
	}
	public function desc_validate($flag=null)
	{
		$len1=strlen($this->data['AccountsClientinvoice']['description1']);
		if($len1>10)
		{
			$validate=1;
			$this->set(compact('validate'));
		}
		else
		{
			$desc1=$this->data['AccountsClientinvoice']['description1'];
			$this->set(compact('desc1'));
		}
	}
	
	public function numberconversion($data=null)
	{
		$numz=explode('.',$data);
		$base=explode(',',$numz[0]);
		$i=0;
		while($base[$i])
		{
			$i++;
		}
		
		$kbc=2*$i-1;
		$num=0;
		for($j=0;$j<=$i-1;$j++)
			{
				$mul=1;
				if($kbc != 1)
					{
						for($pow=1;$pow<=$kbc;$pow++)
							{
								$mul=$mul*10;
							}
					}
				else
					{
						$mul=$mul*1;
					}
				$num=$num+$base[$j]*$mul;
				$kbc=$kbc-2;
				
				
			}
			$dec=$numz[1]/100;
			
			$num1=$num+$dec;
		
		return $num1;
	}
	
	public function servicetax_calc($flag=null)
	{
		
		
		if($this->data['AccountsClientinvoice']['unit_name1'] && $this->data['AccountsClientinvoice']['quantity_unit1'] && $this->data['price_unit1'])
		{
			$x=1;
			$total=0;
			$total=$total+($this->data['AccountsClientinvoice']['quantity_unit1']*$this->numberconversion($this->data['price_unit1']));
			debug($total);
			if($this->data['AccountsClientinvoice']['discount1'])
			{
				$total=$total-$this->data['AccountsClientinvoice']['discount1'];
			}
			if($this->data['AccountsClientinvoice']['addtax1'])
			{
				$total=$total+($this->data['AccountsClientinvoice']['addtax1']*$total)/100;
			}
			$this->set(compact('total','x'));
		}
		if($this->data['AccountsClientinvoice']['unit_name2'] && $this->data['AccountsClientinvoice']['quantity_unit2'] && $this->data['price_unit2'])
		{
			$y=1;
			$total1=0;
			$total1=$total1+($this->data['AccountsClientinvoice']['quantity_unit2']*$this->numberconversion($this->data['price_unit2']));
			if($this->data['AccountsClientinvoice']['discount2'])
			{
				$total1=$total1-$this->data['AccountsClientinvoice']['discount2'];
			}
			if($this->data['AccountsClientinvoice']['addtax2'])
			{
				$total1=$total1+($this->data['AccountsClientinvoice']['addtax2']*$total1)/100;
			}
			$this->set(compact('total1','y'));
		}
		if($this->data['unit_name'] && $this->data['quantity_unit'] && $this->data['price_unit'])
		{
			foreach($this->data['quantity_unit'] as $key=>$v)
			{
				$z=1;
			$total2=0;
			$total2=$total2+($this->data['quantity_unit'][$v]*$this->numberconversion($this->data['price_unit'][$v]));
			if($this->data['discount'])
			{
				$total2=$total2-$this->data['discount'][$v];
			}
			if($this->data['addtax'])
			{
				$total2=$total2+($this->data['addtax'][$v]*$total2)/100;
			}
			$this->set(compact('total2','z'));
			}
			
			
			
		}
		foreach($this->data['ervice_tax'] as $ks=>$vs){
			$taxTotal = $taxTotal + $vs;
		}
		$finalamount = $this->data['subTotal'] + $this->data['AccountsClientinvoice']['latefee'] + $taxTotal;
		debug($finalamount);
		$this->set(compact('finalamount'));
		
	}
	
	public function overlayunit($flag=null)
	{
		//
		$this->loadModel('Currency');
		if($this->data['Type']=='Unit')
		{
			$this->loadModel('Brand');
			$this->loadModel('BillingSlot');
			$billingslots=$this->BillingSlot->find('list',array('fields'=>array('BillingSlot.id','BillingSlot.slot_name')));
			$brands = $this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
			$unitflag=1;
		
		}
		elseif($this->data['Type']=='Service')
		{
			$serviceflag=1;
			$this->loadModel('BillingUnit');
			$bilingunit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
		}
		else
		{
			$packageflag=1;
			$flag=1;
			$this->loadModel('BrandsService');
			$this->loadModel('BrandsServiceunit');
			$this->loadModel('BillingUnit');
			
			$unit = $this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$disp=1;
			$both=1;
			$this->set(compact('unit','disp','flag','both','popupunit'));
		}
		$def_billing=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		$symbol=$def_billing['Currency']['symbol'];
		
		$this->set(compact('unitflag','serviceflag','packageflag','billingslots','bilingunit','billingservice','symbol','brands'));
	}
	public function calcpop($flag=null)
	{
		
		$this->loadModel('Currency');
		$def_billing=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		$symbol=$def_billing['Currency']['symbol'];
		debug($this->data);
		$totalamount=0;
		$totalamount=$this->data['Popupunit']['quantity_pop']*$this->numberconversion($this->data['Popupunit']['price_popup']);
		
		if($this->data['PopupPackage'])
		{
			$totalamount=$totalamount+$this->data['PopupPackage']['quantity1']*$this->numberconversion($this->data['price_popup1']);
			$totalamount=$totalamount+$this->data['PopupPackage']['quantity2']*$this->numberconversion($this->data['price_popup2']);
		}
		if($this->data['PopupService'])
		{
			$totalamount=$totalamount+$this->data['PopupService']['quantity1']*$this->numberconversion($this->data['price_popup1'])+$this->data['PopupService']['quantity2']*$this->numberconversion($this->data['price_popup2']);
		}
		if($this->data['unit_name1'])
		{
			foreach($this->data['unit_name1'] as $k=>$v)
			{
				$totalamount=$totalamount+$this->data['quantity1'][$k]*$this->numberconversion($this->data['price_popup'][$k]);
			}
			
		}
		if($this->data['package_name1'])
		{
			foreach($this->data['package_name1'] as $kks=>$vvs)
			{
				$totalamount=$totalamount+$this->data['package_quantity1'][$kks]*$this->numberconversion($this->data['price_popup'][$kks]);
			}
		}
		$this->set(compact('totalamount','symbol','flag'));
	}
	public function unitadd($flag=null)
	{
		
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsServiceunit');
		if($this->data['Popupunit']['unit_name'])
		{
			if($this->data['Popupunit']['unit_name']){
				if($this->data['Popupunit']['brand']){
					if($this->data['Popupunit']['price_popup']){
						$this->BillingUnit->create();
						$savearray1->data=null;
						$savearray1->data['BillingUnit']['name']=$this->data['Popupunit']['unit_name'];
						$savearray1->data['BillingUnit']['billing_slot_id']=$this->data['Popupunit']['billingslot'];
						$savearray1->data['BillingUnit']['amount']=$this->data['Popupunit']['price_popup'];
						if($this->BillingUnit->save($savearray1->data)){
							$this->Session->setFlash(__('<div class="flashMessageSuccess">A Unit is added.</div>'),true);
							$this->render('add');
						}
					}else{
						$this->Session->setFlash(__('<div class="flashMessageError">Please enter a rate.</div>'),true);
						$this->render('add');
					}
				}else{
					$this->Session->setFlash(__('<div class="flashMessageError">Please select a brand .</div>'),true);
					$this->render('add');
				}
				
			}else{
				$this->Session->setFlash(__('<div class="flashMessageError">Please specify a name for the unit.</div>'),true);
				$this->render('add');
			}
			
		}
		
		elseif($this->data['PopupService']['service_name'])
		{
			$this->BrandsService->create();
			$savearray1->data=null;
			$savearray1->data['BrandsService']['service_name']=$this->data['PopupService']['service_name'];
			$savearray1->data['BrandsService']['totalcost']=$this->data['totalamountpop'];
			
			
			if($this->BrandsService->save($savearray1->data))
			{
				$last=$this->BrandsService->getLastInsertID();
				if($this->data['PopupService']['unit_name1'])
				{
					$this->BrandsServiceunit->create();
					$saveunit->data=null;
					$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
					$saveunit->data['BrandsServiceunit']['billing_unit_id']=$this->data['PopupService']['unit_name1'];
					$saveunit->data['BrandsServiceunit']['quantity']=$this->data['PopupService']['quantity1'];
					$saveunit->data['BrandsServiceunit']['rate']=$this->data['price_popup1'];
					$saveunit->data['BrandsServiceunit']['total']=$this->data['PopupService']['quantity1']*$this->numberconversion($this->data['price_popup1']);
					debug($saveunit->data);
					$this->BrandsServiceunit->save($saveunit->data);
				}
				if($this->data['PopupService']['unit_name2'])
				{
					$this->BrandsServiceunit->create();
					$saveunit->data=null;
					$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
					$saveunit->data['BrandsServiceunit']['billing_unit_id']=$this->data['PopupService']['unit_name2'];
					$saveunit->data['BrandsServiceunit']['quantity']=$this->data['PopupService']['quantity2'];
					$saveunit->data['BrandsServiceunit']['rate']=$this->data['price_popup2'];
					$saveunit->data['BrandsServiceunit']['total']=$this->data['PopupService']['quantity2']*$this->numberconversion($this->data['price_popup2']);
					debug($saveunit->data);
					$this->BrandsServiceunit->save($saveunit->data);
				}
				if($this->data['unit_name1'])
				{
					foreach($this->data['unit_name1'] as $key=>$val)
					{
						$this->BrandsServiceunit->create();
						$saveunit->data=null;
						$saveunit->data['BrandsServiceunit']['brands_service_id']=$last;
						$saveunit->data['BrandsServiceunit']['billing_unit_id']=$val;
						$saveunit->data['BrandsServiceunit']['quantity']=$this->data['quantity1'][$key];
						$saveunit->data['BrandsServiceunit']['rate']=$this->numberconversion($this->data['price_popup'][$key]);
						$saveunit->data['BrandsServiceunit']['total']=$this->data['quantity1'][$key]*$this->numberconversion($this->data['price_popup'][$key]);
						debug($saveunit->data);
						$this->BrandsServiceunit->save($saveunit->data);
					}
					
				}
				$this->Session->setFlash(__('<div class="flashMessageError">Service is added.</div>'),true);
				$this->render('add');
			}
		}
		
		
		elseif($this->data['PopupPackage']['package_name'])
		{
			$this->loadmodel('BrandsPackage');
			$this->loadModel('BrandsPackagedetail');
			
			$this->BrandsPackage->create();
			$savearray1->data=null;
			$savearray1->data['BrandsPackage']['package_name']=$this->data['PopupPackage']['package_name'];
			$savearray1->data['BrandsPackage']['totalcost']=$this->data['totalamountpop'];
			
			if($this->BrandsPackage->save($savearray1->data))
			{
				if($this->data['PopupPackage']['unit_name1'])
				{
					$last=$this->BrandsPackage->getLastInsertID();
					$savearray1->data=null;
					$this->BrandsPackagedetail->create();
					$savearray1->data['BrandsPackagedetail']['brands_package_id']=$last;
					$exp=explode('-',$this->data['PopupPackage']['unit_name1']);
					if($exp[1]=='u')
						{
							$savearray1->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
							$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity1'];
							$savearray1->data['BrandsPackagedetail']['unit_type']='unit';
							$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup1'])*$this->data['PopupPackage']['quantity1'];
					
						}
					if($exp[1]=='s')
						{
							$savearray1->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
							$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity1'];
							$savearray1->data['BrandsPackagedetail']['unit_type']='service';
							$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup1'])*$this->data['PopupPackage']['quantity1'];
					
						}
					$this->BrandsPackagedetail->save($savearray1->data);
				}
				if($this->data['PopupPackage']['unit_name2'])
					{
						$savearray1->data=null;
						$this->BrandsPackagedetail->create();
						$last=$this->BrandsPackage->getLastInsertID();
						$savearray1->data['BrandsPackagedetail']['brands_package_id']=$last;
						$exp=explode('-',$this->data['PopupPackage']['unit_name2']);
						if($exp[1]=='u')
							{
								
								$savearray1->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
								$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity2'];
								$savearray1->data['BrandsPackagedetail']['unit_type']='unit';
								$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup2'])*$this->data['PopupPackage']['quantity2'];
					
							}
						if($exp[1]=='s')
							{
								$savearray1->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
								$savearray1->data['BrandsPackagedetail']['quantity']=$this->data['PopupPackage']['quantity2'];
								$savearray1->data['BrandsPackagedetail']['unit_type']='service';
								$savearray1->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup2'])*$this->data['PopupPackage']['quantity2'];
					
							}
						$this->BrandsPackagedetail->save($savearray1->data);
					}
					if($this->data['package_name1'])
					{
						foreach($this->data['package_name1'] as $kp=>$vp)
						{
							$exp=explode('-',$vp);
							if($exp[1]=='u')
							{
								$savearr->data=null;
								$this->BrandsPackagedetail->create();
								$savearr->data['BrandsPackagedetail']['brands_package_id']=$last;
								$savearr->data['BrandsPackagedetail']['billing_unit_id']=$exp[0];
								$savearr->data['BrandsPackagedetail']['unit_type']='unit';
								$savearr->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup'][$kp])*$this->data['package_quantity1'][$kp];
								$savearr->data['BrandsPackagedetail']['quantity']=$this->data['package_quantity1'][$kp];
							
							}
							if($exp[1]=='s')
							{
								$savearr->data=null;
								$this->BrandsPackagedetail->create();
								$savearr->data['BrandsPackagedetail']['brands_package_id']=$last;
								$savearr->data['BrandsPackagedetail']['brands_service_id']=$exp[0];
								$savearr->data['BrandsPackagedetail']['unit_type']='service';
								$savearr->data['BrandsPackagedetail']['totalcost']=$this->numberconversion($this->data['price_popup'][$kp])*$this->data['package_quantity1'][$kp];
								$savearr->data['BrandsPackagedetail']['quantity']=$this->data['package_quantity1'][$kp];
							}
							
							$this->BrandsPackagedetail->save($savearr->data);
						}
					}
			$this->Session->setFlash(__('<div class="flashMessageSuccess">A Package is added.</div>'),true);
			$this->render('add');
			}
	}
	else{
		$this->Session->setFlash(__('<div class="flashMessageSuccess">Compulsory field missing.</div>'),true);
		$this->render('add');
	}
				
	
		
		
	}
	
	public function addmorepop($flag=null)
	{
		
		$flag++;
		$serviceflag=1;
		$this->loadModel('BillingUnit');
		$bilingunit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
		$this->set(compact('flag','bilingunit','serviceflag'));
	}
	public function addmorepoppack($flag=null,$resourceType=null)
	{
		
		$flag++;
		$packageflag=1;
			$this->loadModel('BrandsService');
			$this->loadModel('BrandsServiceunit');
			$this->loadModel('BillingUnit');
			if($resourceType == "Unit"){
				$unit = $this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			}
			elseif($resourceType == "Service"){
				$unit=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			}
			elseif($resourceType == "both"){
				$serv=$this->BrandsService->find('all',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
				$billingUnit = $this->BillingUnit->find('all',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
				$brands_units = $this->BrandsServiceunit->find('all');
				$final=null;
				foreach($serv as $serv)
					{	
						$final['service'][$serv['BrandsService']['id']]=$serv['BrandsService']['service_name'];
					}
				foreach($billingUnit as $billingUnit){
					$final['units'][$billingUnit['BillingUnit']['id']]=$billingUnit['BillingUnit']['name'];
				}
				$finaal['services'] = 'Services';
				foreach($final['service'] as $keeeeeeey => $valueee ) {
					$finaal[$keeeeeeey."-s"] = '--'.$valueee;
					
				}
				
				$finaal['units'] = 'Units';
				foreach($final['units'] as $keeeeeeey => $valueee ) {
					$finaal[$keeeeeeey."-u"] = '--'.$valueee;
					
				}
				$unit=$finaal;
			}
			else{
				$serv=$this->BrandsService->find('all',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
				$unit = $this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			}
			
			$disp=1;
			$both=1;
			$this->set(compact('unit','disp','flag','both','popupunit','packageflag','resourceType'));
		
		
	}
	
	public function typeselection($flag=null,$id=null)
	{
		if($this->data['AccountsClientinvoice']['type1'])
		{
		if($this->data['AccountsClientinvoice']['type1']=='unit')
		{
			$this->loadModel('BillingUnit');
			$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
			$this->set(compact('unit'));
		}
		if($this->data['AccountsClientinvoice']['type1']=='service')
		{
			$this->loadModel('BrandsService');
			$unit=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
			$this->set(compact('unit'));
		}
		if($this->data['AccountsClientinvoice']['type1']=='package')
		{
			$this->loadModel('BrandsPackage');
			$unit=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
			$this->set(compact('unit'));
		}
		$default=1;
		$this->set(compact('default'));
		}
		if($this->data['AccountsClientinvoice']['type2'])
		{
			if($this->data['AccountsClientinvoice']['type2']=='unit')
				{
					$this->loadModel('BillingUnit');
					$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
					debug($unit);
					$this->set(compact('unit'));
				}
			if($this->data['AccountsClientinvoice']['type2']=='service')
				{
					$this->loadModel('BrandsService');
					$unit=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
					$this->set(compact('unit'));
					debug($unit);
				}
			if($this->data['AccountsClientinvoice']['type2']=='package')
				{
					$this->loadModel('BrandsPackage');
					$unit=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
					$this->set(compact('unit'));
					debug($unit);
				}
				$default=2;
				$this->set(compact('default'));
		}
		
		if($this->data['type'])
		{
			
			foreach($this->data['type'] as $k=>$v)
				{
					if($v=='unit')
					{
						$this->loadModel('BillingUnit');
						$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
						debug($unit);
						$this->set(compact('unit'));
					}
					if($v=='service')
					{
						$this->loadModel('BrandsService');
						$unit=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
						$this->set(compact('unit'));
						debug($unit);
					}
					if($v=='package')
					{
						$this->loadModel('BrandsPackage');
						$unit=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
						$this->set(compact('unit'));
						debug($unit);
					}
					$default=3;
					$this->set(compact('default','flag'));
				}
		}
		if($this->data['AccountsClientinvoice']['type'] && $id)
		{
			
			foreach($this->data['AccountsClientinvoice']['type'] as $k=>$v)
				{
					if($v=='unit')
					{
						$this->loadModel('BillingUnit');
						$unit=$this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
						debug($unit);
						$this->set(compact('unit'));
					}
					if($v=='service')
					{
						$this->loadModel('BrandsService');
						$unit=$this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
						$this->set(compact('unit'));
						debug($unit);
					}
					if($v=='package')
					{
						$this->loadModel('BrandsPackage');
						$unit=$this->BrandsPackage->find('list',array('conditions'=>array('BrandsPackage.active'=>'Y'),'fields'=>array('BrandsPackage.id','BrandsPackage.package_name')));
						$this->set(compact('unit'));
						debug($unit);
					}
					$default=4;
					$this->set(compact('default','flag','id'));
				}
		}
		
		
		
	}
	
	
	
	public function duedate($flag=null,$invoice_date=null)
	{

		if(!$invoice_date)
		{
			
			
			$startdate=date('Y-m-d',strtotime($this->data['AccountsClientinvoice']['invoice_date']));
			$final=explode('-',$startdate);
			if($this->data['AccountsClientinvoice']['term']=='Net 10' ||$this->data['AccountsClientinvoice']['term']=='net10')
				{
					$today = $startdate;
					$s = strtotime($today);
			
				// $yest contains yesterday's date
					$yest = date('Y-m-d', strtotime('+10 day', $s));
					$due=date('Y-M-d',strtotime($yest));
					
		
				}
			if($this->data['AccountsClientinvoice']['term']=='Net 15'||$this->data['AccountsClientinvoice']['term']=='net15')
				{
					
					$today = $startdate;
					$s = strtotime($today);
			
					// $yest contains yesterday's date
					$yest = date('Y-m-d', strtotime('+15 day', $s));
					$due=date('Y-M-d',strtotime($yest));
					
		
				}
			if($this->data['AccountsClientinvoice']['term']=='Due On Receipt')
				{
					$yest = date('Y-M-d', strtotime($startdate));
					$due = $yest;
		 		}
		 	if($this->data['AccountsClientinvoice']['term']=='Due On Specified Date')
				{
					$due = date('Y-M-d');
		 		}
		}
		else
		{
			
			$startdate=date('Y-m-d',strtotime($invoice_date));
			$final=explode('-',$startdate);
			if($this->data['AccountsClientinvoice']['term']=='Net 10')
				{
					$today = $startdate;
					$s = strtotime($today);
			
				// $yest contains yesterday's date
					$yest = date('Y-m-d', strtotime('+10 day', $s));
					$due=date('Y-M-d',strtotime($yest));
					
		
				}
			if($this->data['AccountsClientinvoice']['term']=='Net 15')
				{
					$today = $startdate;
					$s = strtotime($today);
			
				// $yest contains yesterday's date
					$yest = date('Y-M-d', strtotime('+15 day', $s));
					$due=date('Y-M-d',strtotime($yest));
					
			
		 		}
		 		if($this->data['AccountsClientinvoice']['term']=='Due On Receipt')
				{
					$yest = date('Y-M-d', strtotime($startdate));
					$due = $yest;
		 		}
		 		if($this->data['AccountsClientinvoice']['term']=='Due On Specified Date')
				{
					$due = date('Y-M-d');
		 		}
		}
		$this->set(compact('due','flag'));	
		
		
	}
	public function sendmail($invoiceid=null,$clientid=null,$emailtype=null)
	{
		
		////////////////////
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('Client');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('Currency');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->loadModel('Client');
		$this->loadModel('ClientContact');
		$this->loadModel('ClientEmailtype');
		$this->loadModel('Brand');
		$this->AccountsClientinvoicedetail->recursive=0;
		
		$this->AccountsClientinvoice->id = $invoiceid;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		
		$invoicedetails_mail=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoiceid)));
		$invoiceddate=AppModel::dateFormat($invoicedetails_mail['AccountsClientinvoice']['invoiced_date']);
		
		$servicestartdate=AppModel::dateFormat($invoicedetails_mail['AccountsClientinvoice']['service_startdate']);
		
		$branddetail_mail=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$invoicedetails_mail['AccountsClientinvoice']['brand_id'])));
		$brandname=$branddetail_mail['Brand']['brandname'].' Business Wing';
		$brandurl=$branddetail_mail['Brand']['url'];
		$brandemail=$branddetail_mail['Brand']['billing_email'];
		$emailtypes=$this->ClientEmailtype->find('list',array('fields'=>array('ClientEmailtype.id','ClientEmailtype.email_type')));
		$emailtypes_default=$this->ClientEmailtype->find('first',array('conditions'=>array('ClientEmailtype.email_type'=>'New Invoice')));
		$deftypeid=$emailtypes_default['ClientEmailtype']['id'];
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$clientid)));
		$clientcontact=$this->ClientContact->find('all',array('conditions'=>array('ClientContact.client_id'=>$clientid)));
		$this->set(compact('servicestartdate','invoiceddate','brandemail','deftypeid','brandurl','brandname','clientdetails','clientcontact','invoiceid','emailtypes'));
		
		$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		
		$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$invoiceid)));
		foreach($invoicedetails as $k=>$v)
		{
			if(!empty($v['AccountsClientinvoicedetail']['billing_unit_id']) || $v['AccountsClientinvoicedetail']['billing_unit_id']!=0)
			{
				$unit=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v['AccountsClientinvoicedetail']['billing_unit_id']),'fields'=>array('BillingUnit.name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BillingUnit']['name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_service_id']) || $v['AccountsClientinvoicedetail']['brands_service_id']!=0)
			{
				$unit=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v['AccountsClientinvoicedetail']['brands_service_id']),'fields'=>array('BrandsService.service_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsService']['service_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_package_id']) || $v['AccountsClientinvoicedetail']['brands_package_id']!=0)
			{
				$unit=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v['AccountsClientinvoicedetail']['brands_package_id']),'fields'=>array('BrandsPackage.package_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsPackage']['package_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_tax_id']) || $v['AccountsClientinvoicedetail']['accounts_tax_id']!=0)
			{
				$tax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsClientinvoicedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.id','AccountsTax.name','AccountsTax.percent')));
				$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$tax['AccountsTax']['id']]=$tax['AccountsTax']['name'];
				$wt=$v['AccountsClientinvoicedetail']['quantity']*$v['AccountsClientinvoicedetail']['netcost'];
				$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$tax['AccountsTax']['id']]=($v['AccountsClientinvoicedetail']['totalcost']-$wt);
				
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_taxgroup_id']) || $v['AccountsClientinvoicedetail']['accounts_taxgroup_id']!=0)
			{
				$taxgroup=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
				if($taxgroup['AccountsTaxgroup']['compounded']=='Y')
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						if($taxableamount==0)
						{
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						}
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						$taxableamount=$taxableamount+$percent*$taxableamount;
					}
				}
				else
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						
					}
				}
			}
			
			
			
			$download[$v['AccountsClientinvoicedetail']['id']]['description']=$v['AccountsClientinvoicedetail']['description'];
			$download[$v['AccountsClientinvoicedetail']['id']]['quantity']=$v['AccountsClientinvoicedetail']['quantity'];
			$download[$v['AccountsClientinvoicedetail']['id']]['rate']=$v['AccountsClientinvoicedetail']['netcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['amount']=$v['AccountsClientinvoicedetail']['totalcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['discount']=$v['AccountsClientinvoicedetail']['discount'];
			$totalamount=$totalamount+$v['AccountsClientinvoicedetail']['totalcost'];
			
		}
		
		$this->set(compact('download','totalamount'));
		
		
		
		$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoiceid)));
		$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.symbol','Currency.name')));
		if($currencydown['Currency']['name']=='INR')
			{
				$symbol='INR';
			}
		else
			{
				$symbol=$currencydown['Currency']['symbol'];
			}
		
		$this->set(compact('symbol'));
		
		$download_invoice_id=$invoiceid;
		$download_invoice_date=AppModel::dateFormat($accountsClientinvoice['AccountsClientinvoice']['invoiced_date']);
		$download_term_invoice=$accountsClientinvoice['AccountsClientinvoice']['paymentdue_term'];
		$download_invoice_duedate=AppModel::dateFormat($accountsClientinvoice['AccountsClientinvoice']['due_date']);
		$download_invoicedamount=$accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$this->set(compact('download_invoicedamount','download_invoice_id','download_invoice_date','download_term_invoice','download_invoice_duedate'));
		$brandid=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
		$icon_imagepath_url=$brandid['Brand']['icon_imagepath'];
		$icon_imagepath=$brandid['Brand']['icon_imagepath_url'];
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
		$download_clientname=$clientdetails['Client']['first_name'].' '.$clientdetails['Client']['last_name'];
		$download_clientcompanyname=$clientdetails['Client']['client_companyname'];
		$download_clientaddress=$clientdetails['Client']['address'];
		$download_clientcity=$clientdetails['Client']['city'];
		$download_clientstate=$clientdetails['Client']['state'];
		$download_clientcountry=$clientdetails['Client']['country'];
		$download_clientphone=$clientdetails['Client']['phone'];
		$download_clientemail=$clientdetails['Client']['email1'];
		$this->set(compact('download_clientname','download_clientcompanyname','download_clientaddress','download_clientcity','download_clientstate','download_clientcountry','download_clientphone','download_clientemail'));
		$download_invoicesubtotal=0;
		foreach($invoicedetails as $invdeta)
		{
			$download_invoicesubtotal=$download_invoicesubtotal+$invdeta['AccountsClientinvoicedetail']['totalcost'];
			$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])));
		}
		$download_tax=$accountsClientinvoice['AccountsClientinvoice']['invoice_amount']-$download_invoicesubtotal-$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		$download_latefee=	$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		
		$paymentdetail=$this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$invoiceid)));
		$relaxation = $accountsClientinvoice['AccountsClientinvoice']['invoice_amount'] - $accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$download_due=$paymentdetail['AccountsClientpaymentdetail']['due'] - $relaxation ;
		$download_pay=$paymentdetail['AccountsClientpaymentdetail']['paid_amount'];
		
		$this->set(compact('relaxation','download_invoicedamount','download_invoicesubtotal','download_tax','download_latefee','icon_imagepath_url','icon_imagepath','brands','invoicedetails','accountsClientinvoice','clientdetails','flag','taxdetail'));
		$this->layout = 'pdf'; //this will use the pdf.ctp layout 
        $this->render(); 
		
		
		
		
		
		
		
		
		
		
		///////Download Section
		
		
		
		
		
		
		
		
		if($this->data)
			{
				$i=1;
				foreach($this->data['to_address'] as $key=>$val)
					{
						foreach($val as $k=>$v)
							{
								if($v==1)
									{
										$to_add[$i]=$key.'.'.$k;
										$i++;
									}
							}
					}
				$j=1;
				$finalto=$to_add[1];
				foreach($to_add as $kadd=>$kval)
					{
						$finalto=$finalto.','.$kval;
					}
				$to      =$finalto;
				$subject = $this->data['sendInvoice']['sub'];
				if($this->data['sendInvoice']['body'])
					{
						$message = $this->data['sendInvoice']['body'];	
					}
				else
					{
						$message = $this->data['body'];	
					}
				$ccaddress=$this->data['sendInvoice']['cc_address'];
				$path = $_SERVER['DOCUMENT_ROOT'].$this->webroot."app/webroot/files/uploads/invoice/";
    			$file = $path.$invoiceid.'.pdf';
    			$content = chunk_split(base64_encode(file_get_contents($file)));
  				ob_start(); 
    			$uid = md5(uniqid(time()));
   	 			$name = basename($file);
   	 			$header = "From: "."<".$brandname.">\r\n";
    			$header .= "Reply-To: ".$brandemail."\r\n";
    			$header .= "CC: ".$ccaddress."\n";
    			$header .= "MIME-Version: 1.0\r\n";
    			$header .= "Content-Type: multipart/mixed; boundary=\"".$uid."\"\r\n\r\n";
    			$header .= "This is a multi-part message in MIME format.\r\n";
    			$header .= "--".$uid."\r\n";
   	 			$header .= "Content-type:text/plain; charset=iso-8859-1\r\n";
    			$header .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
    			$header .= $message."\r\n\r\n";
    			$header .= "--".$uid."\r\n";
    			$header .= "Content-Type: application/pdf; name=\""."Invoice #".$invoiceid."\"\r\n"; // use different content types here
    			$header .= "Content-Transfer-Encoding: base64\r\n";
    			$header .= "Content-Disposition: attachment; filename=\""."Invoice #".$invoiceid."\"\r\n\r\n";
    			$header .= $content."\r\n\r\n";
   	 			$header .= "--".$uid."--";
				$success = mail($to, $subject, $message, $header);
				
				if($invoiceid && $clientid )
						{
							$this->loadModel('ClientsEmailhistory');
							$this->ClientsEmailhistory->create();
							$savarray->data=null;
							$savarray->data['ClientsEmailhistory']['client_id']=$clientid;
							$savarray->data['ClientsEmailhistory']['accounts_clientinvoice_id']=$invoiceid;
							$savarray->data['ClientsEmailhistory']['subject']=$subject;
							$savarray->data['ClientsEmailhistory']['message']=$message;
							$savarray->data['ClientsEmailhistory']['date']=date('Y-m-d');
							$savarray->data['ClientsEmailhistory']['status']='sent';
							$savarray->data['ClientsEmailhistory']['from_add']=$brandname;
							$savarray->data['ClientsEmailhistory']['client_emailtype_id']=$this->data['sendInvoice']['email_types'];
							if($this->ClientsEmailhistory->save($savarray->data))
								{
									$success=1;
									$this->Session->setFlash(__('<div class="flashMessageSuccess">Mail Sent Successfully</div>'));
									$this->set(compact('success'));
								}
							else
								{
									$error=1;
									$this->Session->setFlash(__('<div class="flashMessageError">Mail Not Sent Successfully</div>'));
									$this->set(compact('error'));
								}
						}
				$this->redirect(array('controller'=>'accounts_clientinvoices','action'=>'view',$invoiceid,4));
			}
		
	}
	public function sendmail_body($invoiceid=null,$clientid=null,$emailtype=null)
	{
		
		if($this->data['sendInvoice']['email_types'])
		{
			$this->loadModel('ClientEmailtype');
			$this->loadModel('Client');
			$this->loadModel('Brand');
			$this->loadModel('Currency');
			$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$clientid)));
			$clientname=$clientdetails['Client']['first_name'].' '.$clientdetails['Client']['last_name'];
			$ivoicedetail=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoiceid)));
			$currencyinfo=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$ivoicedetail['AccountsClientinvoice']['currency_id'])));
			$ymbol_mailcontent=$currencyinfo['Currency']['symbol'];
			$invoiceamount=money_format('%!(.0n',$ivoicedetail['AccountsClientinvoice']['invoice_amount']);
			$invoiceddate1=$ivoicedetail['AccountsClientinvoice']['invoiced_date'];
			$invoiceddate=AppModel::dateFormat($invoiceddate1);
			$duedate1=$ivoicedetail['AccountsClientinvoice']['due_date'];
			$duedate=AppModel::dateFormat($duedate1);
			$servicestartdate1=$ivoicedetail['AccountsClientinvoice']['service_startdate'];
			$brandinfo=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$ivoicedetail['AccountsClientinvoice']['brand_id'])));
			$servicestartdate=AppModel::dateFormat($servicestartdate1);
			$brandname=$brandinfo['Brand']['brandname'] ." Business Wing";
			$brandurl=$brandinfo['Brand']['url'];
			$brandemail=$brandinfo['Brand']['email'];
			$currentdate=date('Y-m-d');
			
			if(strtotime($currentdate)>strtotime($duedate));
			{
				$pendingdays=$this->datecal($duedate,$currentdate);
			}
			
			$type=$this->ClientEmailtype->find('first',array('conditions'=>array('ClientEmailtype.id'=>$this->data['sendInvoice']['email_types'])));
			if($type['ClientEmailtype']['email_type']=='Payment Reminder')
			{
				$body_content='Hi '. $clientname.',

As per our records an invoice with ID #'.$invoiceid.' dated '.$duedate.' is overdue
by '.$pendingdays.'.  Hereby I request you to look into this and arrange the
payment at the earliest.  The invoice is also attached for your
reference.  

To make payment online, click on the following link - 
https://invoice.zoho.com:443/ZB_SecurePaymentOption.cc?InvoiceID='.$invoiceid.'
.  

Feel free to e-mail  us for any clarification.


Thank you very much for your business!
'.$brandname.'
Email: '.$brandemail.'
';
			}
			elseif($type['ClientEmailtype']['email_type']=='Payment Acknowledgement')
			{
				$body_content='Dear '. $clientname.', 

We have received your payment of  '.$ymbol_mailcontent.$invoiceamount.'  against the invoice
'.$invoiceid.' dated '.$invoiceddate.'.
Thanks for the payment and your business. We look forward to your
continued patronage.



Thank you very much for your business!
'.$brandname.'
Email: '.$brandemail.'';
				
			}
			elseif($type['ClientEmailtype']['email_type']=='New Invoice')
			{
				$body_content='Hi '.$clientname.',

We hope you are doing well,and satisfied with our services.

We have generated an Invoice #'.$invoiceid.'  dated '.$invoiceddate.'  for the upcoming billing cycle starting '.$servicestartdate.'.Please feel free to 
email us at '.$brandemail.' in case you need any clarification.
To make payment online, click on the following link - 
https://invoice.zoho.com:443/ZB_SecurePaymentOption.cc?InvoiceID='.$invoiceid.'
.    


Assuring you of our best services at all times.  

Thank you very much for your business!
'.$brandname.'
Email: '.$brandemail.'
';
			}
			else
			{
				$errormsg=1;
				$this->set(compact('errormsg'));
			}
			
		}
		
$this->set(compact('body_content'));
	}
	 function datecal($date1=null,$date2=null) {
		//to calculate difference between two dates
		$diff = abs(strtotime($date2) - strtotime($date1));
		$years = floor($diff / (365*60*60*24));
		$months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
		$days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
		if($years>0 && $months>0 && $days>0)
			{
				if($years>1 && $months>1 && $days>1)
					{
						$exp = $years." Years ".$months." Months ".$days." Days ";
					}
				elseif($years<=1 && $months>1 && $days>1)
					{
						$exp = $years." Year ".$months." Months ".$days." Days ";
					}
				elseif($years>1 && $months<=1 && $days>1)
					{
						$exp = $years." Years ".$months." Month ".$days." Days ";
					}
				elseif($years>1 && $months>1 && $days<=1)
					{
						$exp = $years." Years ".$months." Months ".$days." Day ";
					}
				elseif($years>1 && $months<=1 && $days<=1)
					{
						$exp = $years." Years ".$months." Month ".$days." Day ";
					}
				elseif($years<=1 && $months<=1 && $days>1)
					{
						$exp = $years." Year ".$months." Month ".$days." Days ";
					}
				elseif($years<=1 && $months>1 && $days<=1)
					{
						$exp = $years." Year ".$months." Months ".$days." Day ";
					}
				else
					{
						$exp = $years." Year ".$months." Month ".$days." Day ";
					}
					
			}
		else
			{
				$exp = $years." Year ".$months." Month ".$days." Day ";
			}
		
		return($exp);
	}
	public function addnewcontact($invoiceid=null,$clientid=null)
	{
		
		$this->loadModel('ClientContact');
		$savecontact->data=null;
		$this->ClientContact->create();
		$savecontact->data['ClientContact']['person_name']=$this->data['AddContact']['person'];
		$savecontact->data['ClientContact']['phone']=$this->data['AddContact']['phone'];
		$savecontact->data['ClientContact']['email_contact']=$this->data['AddContact']['email'];
		$savecontact->data['ClientContact']['designation']=$this->data['AddContact']['desig'];
		$savecontact->data['ClientContact']['client_id']=$clientid;
		$this->ClientContact->save($savecontact->data);
		$this->redirect(array('controller'=>'accounts_clientinvoices','action'=>'sendmail',$invoiceid,$clientid));
		
	}
	public function addattachment($flag=null,$invoiceid=null)
	{
		++$flag;
		$this->set(compact('flag'));
	}
	public function bottom($flag=null,$invoiceid=null)
	{
		$this->set(compact('flag'));
	}
	public function remindcustomer($flag=null)
	{
		
		$this->loadModel('Client');
		$this->loadModel('Brand');
		foreach($this->data['DeleteInvoice'] as $k=>$v)
			{
				if($v==1)
					{   
						
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('Currency');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->AccountsClientinvoicedetail->recursive=0;
		
		$this->AccountsClientinvoice->id = $k;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		
		$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		
		$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$k)));
		foreach($invoicedetails as $k=>$v)
		{
			if(!empty($v['AccountsClientinvoicedetail']['billing_unit_id']) || $v['AccountsClientinvoicedetail']['billing_unit_id']!=0)
			{
				$unit=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v['AccountsClientinvoicedetail']['billing_unit_id']),'fields'=>array('BillingUnit.name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BillingUnit']['name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_service_id']) || $v['AccountsClientinvoicedetail']['brands_service_id']!=0)
			{
				$unit=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v['AccountsClientinvoicedetail']['brands_service_id']),'fields'=>array('BrandsService.service_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsService']['service_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_package_id']) || $v['AccountsClientinvoicedetail']['brands_package_id']!=0)
			{
				$unit=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v['AccountsClientinvoicedetail']['brands_package_id']),'fields'=>array('BrandsPackage.package_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsPackage']['package_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_tax_id']) || $v['AccountsClientinvoicedetail']['accounts_tax_id']!=0)
			{
				$tax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsClientinvoicedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.id','AccountsTax.name','AccountsTax.percent')));
				$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$tax['AccountsTax']['id']]=$tax['AccountsTax']['name'];
				$wt=$v['AccountsClientinvoicedetail']['quantity']*$v['AccountsClientinvoicedetail']['netcost'];
				$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$tax['AccountsTax']['id']]=($v['AccountsClientinvoicedetail']['totalcost']-$wt);
				
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_taxgroup_id']) || $v['AccountsClientinvoicedetail']['accounts_taxgroup_id']!=0)
			{
				$taxgroup=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
				if($taxgroup['AccountsTaxgroup']['compounded']=='Y')
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						if($taxableamount==0)
						{
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						}
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						$taxableamount=$taxableamount+$percent*$taxableamount;
					}
				}
				else
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						
					}
				}
			}
			
			
			
			$download[$v['AccountsClientinvoicedetail']['id']]['description']=$v['AccountsClientinvoicedetail']['description'];
			$download[$v['AccountsClientinvoicedetail']['id']]['quantity']=$v['AccountsClientinvoicedetail']['quantity'];
			$download[$v['AccountsClientinvoicedetail']['id']]['rate']=$v['AccountsClientinvoicedetail']['netcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['amount']=$v['AccountsClientinvoicedetail']['totalcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['discount']=$v['AccountsClientinvoicedetail']['discount'];
			$totalamount=$totalamount+$v['AccountsClientinvoicedetail']['totalcost'];
			
		}
		
		$this->set(compact('download','totalamount'));
		
		
		
		$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$k)));
		$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.symbol','Currency.name')));
		if($currencydown['Currency']['name']=='INR')
			{
				$symbol='INR';
			}
		else
			{
				$symbol=$currencydown['Currency']['symbol'];
			}
		
		$this->set(compact('symbol'));
		
		$download_invoice_id=$k;
		$download_invoice_date=AppModel::dateFormat($accountsClientinvoice['AccountsClientinvoice']['invoiced_date']);
		$download_term_invoice=$accountsClientinvoice['AccountsClientinvoice']['paymentdue_term'];
		$download_invoice_duedate=AppModel::dateFormat($accountsClientinvoice['AccountsClientinvoice']['due_date']);
		$download_invoicedamount=$accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$this->set(compact('download_invoicedamount','download_invoice_id','download_invoice_date','download_term_invoice','download_invoice_duedate'));
		$brandid=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
		$icon_imagepath_url=$brandid['Brand']['icon_imagepath'];
		$icon_imagepath=$brandid['Brand']['icon_imagepath_url'];
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
		$download_clientname=$clientdetails['Client']['first_name'].' '.$clientdetails['Client']['last_name'];
		$download_clientcompanyname=$clientdetails['Client']['client_companyname'];
		$download_clientaddress=$clientdetails['Client']['address'];
		$download_clientcity=$clientdetails['Client']['city'];
		$download_clientstate=$clientdetails['Client']['state'];
		$download_clientcountry=$clientdetails['Client']['country'];
		$download_clientphone=$clientdetails['Client']['phone'];
		$download_clientemail=$clientdetails['Client']['email1'];
		$this->set(compact('download_clientname','download_clientcompanyname','download_clientaddress','download_clientcity','download_clientstate','download_clientcountry','download_clientphone','download_clientemail'));
		$download_invoicesubtotal=0;
		foreach($invoicedetails as $invdeta)
		{
			$download_invoicesubtotal=$download_invoicesubtotal+$invdeta['AccountsClientinvoicedetail']['totalcost'];
			$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])));
		}
		$download_tax=$accountsClientinvoice['AccountsClientinvoice']['invoice_amount']-$download_invoicesubtotal-$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		$download_latefee=	$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		
		$paymentdetail=$this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$k)));
		$relaxation = $accountsClientinvoice['AccountsClientinvoice']['invoice_amount'] - $accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$download_due=$paymentdetail['AccountsClientpaymentdetail']['due'] - $relaxation ;
		$download_pay=$paymentdetail['AccountsClientpaymentdetail']['paid_amount'];
		
		$this->set(compact('relaxation','download_invoicedamount','download_invoicesubtotal','download_tax','download_latefee','icon_imagepath_url','icon_imagepath','brands','invoicedetails','accountsClientinvoice','clientdetails','flag','taxdetail'));
		$this->layout = 'pdf'; //this will use the pdf.ctp layout 
        $this->render(); 
		
		
		
		
		
		
		
		
		
		
		///////Download Section
						
						
						
						
						
						
						
						$invoicedetails=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$k)));
						$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$invoicedetails['AccountsClientinvoice']['client_id'])));
						$brand_reminder=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$invoicedetails['AccountsClientinvoice']['brand_id'])));
						$brandname[$k]=$brand_reminder['Brand']['brandname'].'Business Wing';
						$brandname_url[$k]=$brand_reminder['Brand']['url'];
						$brandname_email[$k]=$brand_reminder['Brand']['email'];
						$invoiceid=$k;
						$clientid=$clientdetails['Client']['id'];
						if(strtotime($invoicedetails['AccountsClientinvoice']['due_date'])<strtotime(date('Y-m-d')))
							{
								$datediff=$this->datecal($invoicedetails['AccountsClientinvoice']['due_date'],date('Y-m-d'));
								$findno=explode('/',$datediff);
								if($findno[0])
									{
										if($findno[0]<=1)
											{
												$msg=$findno[0].'Year';
											}
										else
											{
												$msg=$findno[0].'Years';
											}
				   					}
				   				if($findno[1])
				  	 				{
										if($findno[1]<=1)
											{
												$msg1=$findno[1].'month';
											}
										else
											{
												$msg1=$findno[1].'months';
											}
				  					}
				  				if($findno[2])
				  					{
										if($findno[2]<=1)
											{
												$msg2=$findno[2].'day';
											}
										else
											{
												$msg2=$findno[2].'days';
											}
				  					}
				  				$remindcustomer[$k]['nosofdays']='is overdue by'.$msg.$msg1.$msg2;
							}
						else
							{
								$remindcustomer[$k]['nosofdays']='is due on'.AppModel::dateFormat($invoicedetails['AccountsClientinvoice']['due_date']);
							}
						$remindcustomer[$k]['InvoiceId']=$k;
						$remindcustomer[$k]['clientName']=$clientdetails['Client']['first_name'] .' '. $clientdetails['Client']['last_name'];
						$remindcustomer[$k]['to_address']=$clientdetails['Client']['email1'];
						$remindcustomer[$k]['subject']='Payment Reminder';
						$remindcustomer[$k]['cc']='saurabh@carmatec.com';
						
			}
		}
		$this->set(compact('remindcustomer'));
		foreach($remindcustomer as $k=>$v)
			{
			
			
				/*$to=$v['to_address'];*/
				$to=$v['to_address'];
				$subject = 'Payment Reminder';
				$message = 'Hi '.$v['clientName'].',
As per our records an invoice with ID '.$k.' dated '.AppModel::dateFormat($invoicedetails['AccountsClientinvoice']['invoiced_date']).' '.$remindcustomer[$k]['nosofdays'].' .  Hereby I request you to look into this and arrange the
payment at the earliest.  The invoice is also attached for your
reference.  

To make payment online, click on the following link - 
href="https://invoice.zoho.com:443/ZB_SecurePaymentOption.cc?CInvoiceID='.$k.'
".  

Feel free to e-mail  us for any clarification.


Regards
'.$brandname[$k].'
'.'Email : '.$brandname_email[$k].' 
		

';
				
				$ccaddress='saurabh@carmatec.com';
				$path = $_SERVER['DOCUMENT_ROOT']."accounts/app/webroot/files/uploads/invoice/";
    			$file = $path.$k.'.pdf';
    			$content = chunk_split(base64_encode(file_get_contents($file)));
  				ob_start(); 
    			$uid = md5(uniqid(time()));
   	 			$name = basename($file);
    			$header = "From: "." <".$brandname_email[$k].">\r\n";
    			$header .= "Reply-To: ".$brandname_email[$k]."\r\n";
    			$header .= "CC: ".$ccaddress."\n";
    			$header .= "MIME-Version: 1.0\r\n";
    			$header .= "Content-Type: multipart/mixed; boundary=\"".$uid."\"\r\n\r\n";
    			$header .= "This is a multi-part message in MIME format.\r\n";
    			$header .= "--".$uid."\r\n";
   	 			$header .= "Content-type:text/plain; charset=iso-8859-1\r\n";
    			$header .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
    			$header .= $message."\r\n\r\n";
    			$header .= "--".$uid."\r\n";
    			$header .= "Content-Type: application/pdf; name=\""."Invoice-".$k."\"\r\n"; // use different content types here
    			$header .= "Content-Transfer-Encoding: base64\r\n";
    			$header .= "Content-Disposition: attachment; filename=\""."Invoice-".$k."\"\r\n\r\n";
    			$header .= $content."\r\n\r\n";
   	 			$header .= "--".$uid."--";
				$success = mail($to, $subject, $message, $header);
			
			
			
			
			if($success==1)
			{
				$this->loadModel('ClientsEmailhistory');
				$this->ClientsEmailhistory->create();
				$savarray->data=null;
				$savarray->data['ClientsEmailhistory']['client_id']=$v['clientId'];
				$savarray->data['ClientsEmailhistory']['accounts_clientinvoice_id']=$v['InvoiceId'];
				$savarray->data['ClientsEmailhistory']['subject']=$subject;
				$savarray->data['ClientsEmailhistory']['staff_id']=$this->Session->read('Auth.User.staff_id');
				$savarray->data['ClientsEmailhistory']['message']=$message;
				$savarray->data['ClientsEmailhistory']['date']=date('Y-m-d');
				$savarray->data['ClientsEmailhistory']['status']='sent';
				$savarray->data['ClientsEmailhistory']['client_emailtype_id']='2';
				$this->ClientsEmailhistory->save($savarray->data);
				$this->Session->setFlash(__('<div class="flashMessageSuccess">Mail Sent Successfully</div>'));
				$this->set(compact('success'));
			}
			else
			{
				$error=1;
				$this->Session->setFlash(__('<div class="flashMessageError">Mail Sent Unsuccessfull</div>'));
				$this->set(compact('error'));
			}
		}
		$this->redirect(array('controller'=>'accounts_clientinvoices','action'=>'index',$success,$error));
		
	}
	
	
	public function remindcustomerind($invoiceid=null,$clientid=null,$flag=null)
	{
		/**********************************************************************
		 *           TESTING MAIL                                                         *
		 *                                                                    *
		 * ********************************************************************
		 */
		
		
		
		
		
		
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('Currency');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->AccountsClientinvoicedetail->recursive=0;
		
		$this->AccountsClientinvoice->id = $invoiceid;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		
		$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		
		$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$invoiceid)));
		foreach($invoicedetails as $k=>$v)
		{
			if(!empty($v['AccountsClientinvoicedetail']['billing_unit_id']) || $v['AccountsClientinvoicedetail']['billing_unit_id']!=0)
			{
				$unit=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v['AccountsClientinvoicedetail']['billing_unit_id']),'fields'=>array('BillingUnit.name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BillingUnit']['name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_service_id']) || $v['AccountsClientinvoicedetail']['brands_service_id']!=0)
			{
				$unit=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v['AccountsClientinvoicedetail']['brands_service_id']),'fields'=>array('BrandsService.service_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsService']['service_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_package_id']) || $v['AccountsClientinvoicedetail']['brands_package_id']!=0)
			{
				$unit=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v['AccountsClientinvoicedetail']['brands_package_id']),'fields'=>array('BrandsPackage.package_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsPackage']['package_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_tax_id']) || $v['AccountsClientinvoicedetail']['accounts_tax_id']!=0)
			{
				$tax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsClientinvoicedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.id','AccountsTax.name','AccountsTax.percent')));
				$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$tax['AccountsTax']['id']]=$tax['AccountsTax']['name'];
				$wt=$v['AccountsClientinvoicedetail']['quantity']*$v['AccountsClientinvoicedetail']['netcost'];
				$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$tax['AccountsTax']['id']]=($v['AccountsClientinvoicedetail']['totalcost']-$wt);
				
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_taxgroup_id']) || $v['AccountsClientinvoicedetail']['accounts_taxgroup_id']!=0)
			{
				$taxgroup=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
				if($taxgroup['AccountsTaxgroup']['compounded']=='Y')
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						if($taxableamount==0)
						{
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						}
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						$taxableamount=$taxableamount+$percent*$taxableamount;
					}
				}
				else
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						
					}
				}
			}
			
			
			
			$download[$v['AccountsClientinvoicedetail']['id']]['description']=$v['AccountsClientinvoicedetail']['description'];
			$download[$v['AccountsClientinvoicedetail']['id']]['quantity']=$v['AccountsClientinvoicedetail']['quantity'];
			$download[$v['AccountsClientinvoicedetail']['id']]['rate']=$v['AccountsClientinvoicedetail']['netcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['amount']=$v['AccountsClientinvoicedetail']['totalcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['discount']=$v['AccountsClientinvoicedetail']['discount'];
			$totalamount=$totalamount+$v['AccountsClientinvoicedetail']['totalcost'];
			
		}
		
		$this->set(compact('download','totalamount'));
		$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoiceid)));
		$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.symbol','Currency.name')));
		if($currencydown['Currency']['name']=='INR')
			{
				$symbol='INR';
			}
		else
			{
				$symbol=$currencydown['Currency']['symbol'];
			}
		
		$this->set(compact('symbol'));
		
		$download_invoice_id=$invoiceid;
		$download_invoice_date=AppModel::dateFormat($accountsClientinvoice['AccountsClientinvoice']['invoiced_date']);
		$download_term_invoice=$accountsClientinvoice['AccountsClientinvoice']['paymentdue_term'];
		$download_invoice_duedate=AppModel::dateFormat($accountsClientinvoice['AccountsClientinvoice']['due_date']);
		$download_invoicedamount=$accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$this->set(compact('download_invoicedamount','download_invoice_id','download_invoice_date','download_term_invoice','download_invoice_duedate'));
		$brandid=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
		$icon_imagepath_url=$brandid['Brand']['icon_imagepath'];
		$icon_imagepath=$brandid['Brand']['icon_imagepath_url'];
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
		$download_clientname=$clientdetails['Client']['first_name'].' '.$clientdetails['Client']['last_name'];
		$download_clientcompanyname=$clientdetails['Client']['client_companyname'];
		$download_clientaddress=$clientdetails['Client']['address'];
		$download_clientcity=$clientdetails['Client']['city'];
		$download_clientstate=$clientdetails['Client']['state'];
		$download_clientcountry=$clientdetails['Client']['country'];
		$download_clientphone=$clientdetails['Client']['phone'];
		$download_clientemail=$clientdetails['Client']['email1'];
		$this->set(compact('download_clientname','download_clientcompanyname','download_clientaddress','download_clientcity','download_clientstate','download_clientcountry','download_clientphone','download_clientemail'));
		$download_invoicesubtotal=0;
		foreach($invoicedetails as $invdeta)
		{
			$download_invoicesubtotal=$download_invoicesubtotal+$invdeta['AccountsClientinvoicedetail']['totalcost'];
			$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])));
		}
		$download_tax=$accountsClientinvoice['AccountsClientinvoice']['invoice_amount']-$download_invoicesubtotal-$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		$download_latefee=	$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		
		$paymentdetail=$this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$invoiceid)));
		$relaxation = $accountsClientinvoice['AccountsClientinvoice']['invoice_amount'] - $accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$download_due=$paymentdetail['AccountsClientpaymentdetail']['due'] - $relaxation ;
		$download_pay=$paymentdetail['AccountsClientpaymentdetail']['paid_amount'];
		
		$this->set(compact('relaxation','download_invoicedamount','download_invoicesubtotal','download_tax','download_latefee','icon_imagepath_url','icon_imagepath','brands','invoicedetails','accountsClientinvoice','clientdetails','flag','taxdetail'));
		$this->layout = 'pdf'; //this will use the pdf.ctp layout 
        $this->render(); 
		
		
		
		
		
		
		
		
		
		
		///////Download Section
		
		
		
		
		$this->loadModel('Client');
		$this->loadModel('ClientContact');
		$this->loadModel('ClientEmailtype');
		$this->loadModel('Brand');
		$invoicedetails=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$invoiceid)));
		$brand_reminder=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$invoicedetails['AccountsClientinvoice']['brand_id'])));
		$brandname=$brand_reminder['Brand']['brandname'].'Business Wing';
		$brandname_url=$brand_reminder['Brand']['url'];
		$brandname_email=$brand_reminder['Brand']['email'];
		
		$emailtypes=$this->ClientEmailtype->find('list',array('fields'=>array('ClientEmailtype.id','ClientEmailtype.email_type')));
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$clientid)));
		$clientcontact=$this->ClientContact->find('all',array('conditions'=>array('ClientContact.client_id'=>$clientid)));
		$this->set(compact('clientdetails','clientcontact','invoiceid','emailtypes'));
		if($this->data)
		{
			$i=1;
			foreach($this->data['to_address'] as $key=>$val)
			{
				
				foreach($val as $k=>$v)
				{
					if($v==1)
					{
						$to_add[$i]=$key.'.'.$k;
						$i++;
					}
				}
			}
			$j=1;
			$finalto=$to_add[1];
			foreach($to_add as $kadd=>$kval)
			{
				
				$finalto=$finalto.','.$kval;
				
			}
			
				
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	
	$to      =$finalto;
	$subject = $this->data['sendInvoice']['sub'];
	if($this->data['sendInvoice']['body'])
	{
		$message = $this->data['sendInvoice']['body'];	
	}
	else
	{
		$message = $this->data['body'];	
	}
	if(strtotime($invoicedetails['AccountsClientinvoice']['due_date'])<strtotime(date('Y-m-d')))
						{
							$datediff=$this->datecal($invoicedetails['AccountsClientinvoice']['due_date'],date('Y-m-d'));
							$findno=explode('/',$datediff);
							if($findno[0])
								{
									if($findno[0]<=1)
										{
											$msg=$findno[0].'Year';
										}
									else
										{
											$msg=$findno[0].'Years';
										}
				   				}
				   			if($findno[1])
				  	 			{
									if($findno[1]<=1)
										{
											$msg1=$findno[1].'month';
										}
									else
										{
											$msg1=$findno[1].'months';
										}
				  				}
				  			if($findno[2])
				  				{
									if($findno[2]<=1)
										{
											$msg2=$findno[2].'day';
										}
									else
										{
											$msg2=$findno[2].'days';
										}
				  				}
				  			$nosofdays='is overdue by'.$msg.$msg1.$msg2;
						}
					else
						{
							$nosofdays='is due on'.AppModel::dateFormat($invoicedetails['AccountsClientinvoice']['due_date']);
						}
	$ccaddress=$this->data['sendInvoice']['cc_address'];
	$path = $_SERVER['DOCUMENT_ROOT']."accounts/app/webroot/files/uploads/invoice/";
	
	/*$filename =  $data['fileName2']['name'];*/
    $file = $path.$invoiceid.'.pdf';
    $content = chunk_split(base64_encode(file_get_contents($file)));
  	ob_start(); 
    $uid = md5(uniqid(time()));
    $name = basename($file);
    $header = "From: "." <".$brandname.">\r\n";
    $header .= "Reply-To: ".$brandname_email."\r\n";
    $header .= "CC: ".$ccaddress."\n";
    $header .= "MIME-Version: 1.0\r\n";
    
    $header .= "Content-Type: multipart/mixed; boundary=\"".$uid."\"\r\n\r\n";
    $header .= "This is a multi-part message in MIME format.\r\n";
    $header .= "--".$uid."\r\n";
    $header .= "Content-type:text/plain; charset=iso-8859-1\r\n";
    $header .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
    //$header .= "Content-Transfer-Encoding: base64\r\n\r\n";
    $header .= $message."\r\n\r\n";
    $header .= "--".$uid."\r\n";
    $header .= "Content-Type: application/pdf; name=\"".$invoiceid."\"\r\n"; // use different content types here
    /*$header .= "Content-Transfer-Encoding: base64\r\n";*/
    $header .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
    $header .= "Content-Disposition: attachment; filename=\""."Invoice-".$invoiceid."\"\r\n\r\n";
    $header .= $content."\r\n\r\n";
    $header .= "--".$uid."--";
    
	$success = mail($to, $subject, $message, $header);
    
    
    
    
				
				

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	//END
	
	if($invoiceid && $clientid )
	{
		
		$this->loadModel('ClientsEmailhistory');
		$this->ClientsEmailhistory->create();
		$savarray->data=null;
		$savarray->data['ClientsEmailhistory']['client_id']=$clientid;
		$savarray->data['ClientsEmailhistory']['accounts_clientinvoice_id']=$invoiceid;
		$savarray->data['ClientsEmailhistory']['subject']=$subject;
		$savarray->data['ClientsEmailhistory']['from_add']=$this->data['sendInvoice']['from_address'];
		$savarray->data['ClientsEmailhistory']['message']=$message;
		$savarray->data['ClientsEmailhistory']['date']=date('Y-m-d');
		$savarray->data['ClientsEmailhistory']['from_add']=$brandname;
		$savarray->data['ClientsEmailhistory']['status']='sent';
		$savarray->data['ClientsEmailhistory']['client_emailtype_id']='2';
	
	if($this->ClientsEmailhistory->save($savarray->data))
	{
		$success=1;
		$this->Session->setFlash(__('<div class="flashMessageSuccess">Mail Sent Successfully</div>'));
		
		$this->set(compact('success'));
	}
	else
	{
		$error=1;
		$this->Session->setFlash(__('<div class="flashMessageError">Mail Not Sent Successfully</div>'));
		$this->set(compact('error'));
	}
	
	}
			$this->redirect(array('controller'=>'accounts_clientinvoices','action'=>'view',$invoiceid,4));
		}////
		
		
		
		
		$bodycontent='Hi '.$download_clientname.',

As per our records an invoice with ID'.$invoiceid.' dated '. AppModel::dateFormat($invoicedetails['AccountsClientinvoice']['invoiced_date']) .' '.$nosofdays.'.  Hereby I request you to look into this and arrange the
payment at the earliest.  The invoice is also attached for your
reference.  

To make payment online, click on the following link - 
href="https://invoice.zoho.com:443/ZB_SecurePaymentOption.cc?InvoiceID='.$invoiceid.'
".  

Feel free to e-mail  us for any clarification.


Regards
'.$brandname.'
Email: '.$brandname_email.' 
';
$this->set(compact('bodycontent'));
		
		
		
		
		
		
		
		
		
		
		/**********************************************************************
		 *           TESTING MAIL ENDS                                                        *
		 *                                                                    *
		 * ********************************************************************
		 */
		
		
}
	
	
	function download_inv($id = null,$flag=null,$invoice_id=null){
		
		//Function to download Invoice.
		
		
		
		
		
		//
		$this->loadModel('AccountsClientinvoicedetail');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('AccountsTax');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$this->loadModel('BrandsPackage');
		$this->loadModel('Currency');
		$this->loadModel('AccountsTax');
		$this->loadModel('AccountsTaxgroup');
		$this->loadModel('AccountsTaxgroupmapping');
		$this->AccountsClientinvoicedetail->recursive=0;
		
		$this->AccountsClientinvoice->id = $id;
		if (!$this->AccountsClientinvoice->exists()) {
			throw new NotFoundException(__('Invalid accounts clientinvoice'));
		}
		
		$brands=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		
		$invoicedetails=$this->AccountsClientinvoicedetail->find('all',array('conditions'=>array('AccountsClientinvoicedetail.accounts_clientinvoice_id'=>$id)));
		foreach($invoicedetails as $k=>$v)
		{
			if(!empty($v['AccountsClientinvoicedetail']['billing_unit_id']) || $v['AccountsClientinvoicedetail']['billing_unit_id']!=0)
			{
				$unit=$this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$v['AccountsClientinvoicedetail']['billing_unit_id']),'fields'=>array('BillingUnit.name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BillingUnit']['name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_service_id']) || $v['AccountsClientinvoicedetail']['brands_service_id']!=0)
			{
				$unit=$this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$v['AccountsClientinvoicedetail']['brands_service_id']),'fields'=>array('BrandsService.service_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsService']['service_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['brands_package_id']) || $v['AccountsClientinvoicedetail']['brands_package_id']!=0)
			{
				$unit=$this->BrandsPackage->find('first',array('conditions'=>array('BrandsPackage.id'=>$v['AccountsClientinvoicedetail']['brands_package_id']),'fields'=>array('BrandsPackage.package_name')));
				$download[$v['AccountsClientinvoicedetail']['id']]['unit']=$unit['BrandsPackage']['package_name'];
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_tax_id']) || $v['AccountsClientinvoicedetail']['accounts_tax_id']!=0)
			{
				$tax=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$v['AccountsClientinvoicedetail']['accounts_tax_id']),'fields'=>array('AccountsTax.id','AccountsTax.name','AccountsTax.percent')));
				$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$tax['AccountsTax']['id']]=$tax['AccountsTax']['name'];
				$wt=$v['AccountsClientinvoicedetail']['quantity']*$v['AccountsClientinvoicedetail']['netcost'];
				$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$tax['AccountsTax']['id']]=($v['AccountsClientinvoicedetail']['totalcost']-$wt);
				
			}
			if(!empty($v['AccountsClientinvoicedetail']['accounts_taxgroup_id']) || $v['AccountsClientinvoicedetail']['accounts_taxgroup_id']!=0)
			{
				$taxgroup=$this->AccountsTaxgroup->find('first',array('conditions'=>array('AccountsTaxgroup.id'=>$v['AccountsClientinvoicedetail']['accounts_taxgroup_id'])));
				if($taxgroup['AccountsTaxgroup']['compounded']=='Y')
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						if($taxableamount==0)
						{
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						}
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						$taxableamount=$taxableamount+$percent*$taxableamount;
					}
				}
				else
				{
					$map=$this->AccountsTaxgroupmapping->find('all',array('conditions'=>array('AccountsTaxgroupmapping.accounts_taxgroup_id'=>$taxgroup['AccountsTaxgroup']['id']),'order'=>array('AccountsTaxgroupmapping.priority ASC')));
					$taxableamount=0;
					foreach($map as $kt=>$vt)
					{
						$taxm=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$vt['AccountsTaxgroupmapping']['accounts_tax_id'])));
						$percent=($taxm['AccountsTax']['percent'])/100;
						
							$taxableamount=$v['AccountsClientinvoicedetail']['netcost']*$v['AccountsClientinvoicedetail']['quantity'];
						
						$download[$v['AccountsClientinvoicedetail']['id']]['taxname'][$taxm['AccountsTax']['id']]=$taxm['AccountsTax']['name'];
						$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]=$download[$v['AccountsClientinvoicedetail']['id']]['taxamount'][$taxm['AccountsTax']['id']]+$percent*$taxableamount;
						
					}
				}
			}
			//$download[$v['AccountsClientinvoicedetail']['id']]['taxname']
			
			
			
			$download[$v['AccountsClientinvoicedetail']['id']]['description']=$v['AccountsClientinvoicedetail']['description'];
			$download[$v['AccountsClientinvoicedetail']['id']]['quantity']=$v['AccountsClientinvoicedetail']['quantity'];
			$download[$v['AccountsClientinvoicedetail']['id']]['rate']=$v['AccountsClientinvoicedetail']['netcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['amount']=$v['AccountsClientinvoicedetail']['totalcost'];
			$download[$v['AccountsClientinvoicedetail']['id']]['discount']=$v['AccountsClientinvoicedetail']['discount'];
			$totalamount=$totalamount+$v['AccountsClientinvoicedetail']['totalcost'];
			
		}
		
		$this->set(compact('download','totalamount'));
		
		
		
		$accountsClientinvoice=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$id)));
		if($accountsClientinvoice['AccountsClientinvoice']['currency_id'])
			{
				$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$accountsClientinvoice['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.symbol','Currency.name')));
			}
		else
			{
				$currencydown=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y'),'fields'=>array('Currency.symbol','Currency.name')));
			}
		
		if($currencydown['Currency']['name']=='INR')
			{
				$symbol='INR';
			}
		else
			{
				$symbol=$currencydown['Currency']['symbol'];
			}
		
		$this->set(compact('symbol'));
		
		$download_invoice_id=$id;
		$download_invoice_date=$accountsClientinvoice['AccountsClientinvoice']['invoiced_date'];
		$download_term_invoice=$accountsClientinvoice['AccountsClientinvoice']['paymentdue_term'];
		$download_invoice_duedate=$accountsClientinvoice['AccountsClientinvoice']['due_date'];
		
		$download_invoicedamount=$accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$this->set(compact('download_invoicedamount','download_invoice_id','download_invoice_date','download_term_invoice','download_invoice_duedate'));
		$brandid=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$accountsClientinvoice['AccountsClientinvoice']['brand_id'])));
		$icon_imagepath_url=$brandid['Brand']['icon_imagepath'];
		$icon_imagepath=$brandid['Brand']['icon_imagepath_url'];
		
		$clientdetails=$this->Client->find('first',array('conditions'=>array('Client.id'=>$accountsClientinvoice['AccountsClientinvoice']['client_id'])));
		$download_clientname=$clientdetails['Client']['salutation'].' '.$clientdetails['Client']['first_name'].' '.$clientdetails['Client']['last_name'];
		$download_clientcompanyname=$clientdetails['Client']['client_companyname'];
		$download_clientaddress=$clientdetails['Client']['address'];
		$download_clientcity=$clientdetails['Client']['city'];
		$download_clientstate=$clientdetails['Client']['state'];
		$download_clientcountry=$clientdetails['Client']['country'];
		$download_clientphone=$clientdetails['Client']['phone'];
		$download_clientemail=$clientdetails['Client']['email1'];
		$this->set(compact('download_clientname','download_clientcompanyname','download_clientaddress','download_clientcity','download_clientstate','download_clientcountry','download_clientphone','download_clientemail'));
		$download_invoicesubtotal=0;
		foreach($invoicedetails as $invdeta)
		{
			$download_invoicesubtotal=$download_invoicesubtotal+$invdeta['AccountsClientinvoicedetail']['totalcost'];
			$taxdetail[$invdeta['AccountsClientinvoicedetail']['id']]=$this->AccountsTax->find('first',array('conditions'=>array('AccountsTax.id'=>$invdeta['AccountsClientinvoicedetail']['accounts_tax_id'])));
		}
		$download_tax=$accountsClientinvoice['AccountsClientinvoice']['invoice_amount']-$download_invoicesubtotal-$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		$download_latefee=	$accountsClientinvoice['AccountsClientinvoice']['late_feedetails'];
		
		$paymentdetail=$this->AccountsClientpaymentdetail->find('first',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$id)));
		$relaxation = $accountsClientinvoice['AccountsClientinvoice']['invoice_amount'] - $accountsClientinvoice['AccountsClientinvoice']['ajusted_invoiceamount'];
		$download_due=$paymentdetail['AccountsClientpaymentdetail']['due'] - $relaxation ;
		$download_pay=$paymentdetail['AccountsClientpaymentdetail']['paid_amount'];
		
		$this->set(compact('relaxation','download_due','download_pay','download_invoicedamount','download_invoicesubtotal','download_tax','download_latefee','icon_imagepath_url','icon_imagepath','brands','invoicedetails','accountsClientinvoice','clientdetails','flag','taxdetail'));
		$this->layout = 'pdf'; //this will use the pdf.ctp layout 
        $this->render(); 
		
		
		
		
	}
	public function paymentLogForInvoice($id = null){
		/*configure::write('debug',2);*/
		$this->loadModel('AccountsClientpaymentdetail');
		$paymentLog = $this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$id)));
		debug($paymentLog);
		return $paymentLog;
	}
	
	function clientpayinvoice($flag,$due,$clientid,$currencyid)
		{
			//configure::write('debug',2);
			debug($this->data);
			$this->loadModel('AccountsClientinvoice');
			$this->loadModel('Client');
			$this->loadModel('Brand');
			$this->loadModel('AccountsAccount');
			$this->loadModel('AccountsLedger');
			$this->loadModel('AccountsClientpaymentdetail');
			$this->loadModel('Currency');
			$this->loadModel('AccountType');
			$this->loadModel('AccountsGoldenrule');
			$this->loadModel('AccountsclientpaymentLedgermapping');
			/*$this->AccountsClientpaymentdetail->recursive = 0;*/
			
			if($this->data)
				{
					if($this->data['DeleteInvoiceData']['paymode'][$flag] && $this->data['DeleteInvoiceData']['rcved'][$flag] &&$this->data['DeleteInvoiceData']['paydate'][$flag] &&$this->data['DeleteInvoiceData']['accoun'][$flag])
						{
							
							$converted_amount = $this->numberconversion($this->data['DeleteInvoiceData']['rcved'][$flag]);
							$client_paymentdesc=$this->Client->find('first',array('conditions'=>array('Client.id'=>$clientid)));
							$invoice_currency=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$flag)));
							$clientCurrencyDetail = $invoice_currency['AccountsClientinvoice']['currency_id'];
							$client_payment=$client_paymentdesc['Client']['client_companyname'];
							$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
							$accountsdetail = 	$accounts_accounts['AccountsAccount']['closing_balance']; 	
							if(!empty($accountsdetail)){
								$bbaalance_pay = $accounts_accounts['AccountsAccount']['closing_balance'];
							}else{
								$bbaalance_pay = $accounts_accounts['AccountsAccount']['opening_balance'];
							}
							$this->AccountsLedger->create();
							$saveaccount->data=null;
							$saveaccount->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];;
							$saveaccount->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
							$saveaccount->data['AccountsLedger']['debit']=$converted_amount;
							$saveaccount->data['AccountsLedger']['is_neutral']='Y';
							$bal=$bbaalance_pay-$converted_amount;
							$saveaccount->data['AccountsLedger']['accounts_clientinvoice_id']=$flag;
							$saveaccount->data['AccountsLedger']['cheque_no']=$client_payment." Invoice #".$flag." received via ".$this->data['ClientPay']['paymode'][$flag];
							if($this->AccountsLedger->save($saveaccount->data)){
								$ledgerLastEntry1 = $this->AccountsLedger->getLastInsertID();
								$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry1;
								$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry1;
								$this->AccountsLedger->save($ledgerPay->data);
								$closingBalance->data = null;
								$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
								$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
								$this->AccountsAccount->save($closingBalance->data);
								
								/**Log Code**/
									$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],0,$saveaccount->data['AccountsLedger']['debit'],$bbaalance_pay,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry1,0,$saveaccount->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice'));
								/**Log Code**/
							}
							$accounts_accounts_bank=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['DeleteInvoiceData']['accoun'][$flag])));
							$this->AccountsLedger->create();
							$savearray->data=null;
							$savearray->data['AccountsLedger']['transaction_id']=$ledgerLastEntry1;
							$savearray->data['AccountsLedger']['accounts_account_id']=$this->data['DeleteInvoiceData']['accoun'][$flag];
							$savearray->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
							$savearray->data['AccountsLedger']['credit']=$converted_amount;
							$ledgeraccount = $accounts_accounts_bank['AccountsAccount']['closing_balance'];
							if($ledgeraccount)
							{
									$ledgerbal=$ledgeraccount;
									$bal=$accounts_accounts_bank['AccountsAccount']['closing_balance']+$converted_amount;
							}
							
							else
							{
								$openingbal=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['DeleteInvoiceData']['accoun'][$flag]),'fields'=>array('AccountsAccount.opening_balance')));
								$bal=$openingbal['AccountsAccount']['opening_balance']+$converted_amount;
							}
							$savearray->data['AccountsLedger']['accounts_clientinvoice_id']=$flag;
							$savearray->data['AccountsLedger']['cheque_no']=$client_payment." Invoice #".$flag." received via ".$this->data['DeleteInvoiceData']['paymode'][$flag];
							if($this->AccountsLedger->save($savearray->data))
							{
								/*changes*/
										$closingBalance->data = null;
										$closingBalance->data['AccountsAccount']['id'] = $this->data['DeleteInvoiceData']['accoun'][$flag];
										$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
										$this->AccountsAccount->save($closingBalance->data);
								/*changes end 25/07/2014*/
								$ledgerLastEntry2 = $this->AccountsLedger->getLastInsertID();
								
								
								/**Log Code**/
									$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],$savearray->data['AccountsLedger']['credit'],0,$accounts_accounts_bank['AccountsAccount']['closing_balance'],$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry2,0,$savearray->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice'));
								/**Log Code**/
								
								if($this->data['DeleteInvoiceData']['bankcharges'][$flag]){
									$accounts_accounts_charges=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
									$accountsdetail_charges = 	$accounts_accounts_charges['AccountsAccount']['closing_balance']; 	
									if(!empty($accountsdetail_charges)){
										$bbaalance_pay = $accounts_accounts_charges['AccountsAccount']['closing_balance'];
									}else{
										$bbaalance_pay = $accounts_accounts_charges['AccountsAccount']['opening_balance'];
									}
									$this->AccountsLedger->create();
									$savechargesaccount->data=null;
									$savechargesaccount->data['AccountsLedger']['accounts_account_id']=$accounts_accounts_charges['AccountsAccount']['id'];;
									$savechargesaccount->data['AccountsLedger']['transaction_id']=$ledgerLastEntry1;
									$savechargesaccount->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
									$savechargesaccount->data['AccountsLedger']['debit']=$this->numberconversion($this->data['DeleteInvoiceData']['bankcharges'][$flag]);
									$savechargesaccount->data['AccountsLedger']['is_neutral']='Y';
									$bal=$bbaalance_pay-$this->numberconversion($this->data['DeleteInvoiceData']['bankcharges'][$flag]);
									$savechargesaccount->data['AccountsLedger']['accounts_clientinvoice_id']=$flag;
									$savechargesaccount->data['AccountsLedger']['cheque_no']=$client_payment." Invoice #".$flag." received via ".$this->data['ClientPay']['paymode'][$flag];
									if($this->AccountsLedger->save($savechargesaccount->data)){
										/*changes*/
										$closingBalance->data = null;
										$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts_charges['AccountsAccount']['id'];
										$closingBalance->data['AccountsAccount']['closing_balance'] = $bbaalance_pay - $this->numberconversion($this->data['DeleteInvoiceData']['bankcharges'][$flag]);
										$this->AccountsAccount->save($closingBalance->data);
										/*changes end 25/07/2014*/
										$ledgerLastEntry3 = $this->AccountsLedger->getLastInsertID();
										
										/**Log Code**/
											$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],0,$savechargesaccount->data['AccountsLedger']['debit'],$bbaalance_pay,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry3,0,$savechargesaccount->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice'));
										/**Log Code**/
										
										
										$accounts_accounts_bank_charges = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Bank Interest')));
										$this->AccountsLedger->create();
										$savechargearray->data=null;
										$savechargearray->data['AccountsLedger']['transaction_id'] = $ledgerLastEntry1;
										$savechargearray->data['AccountsLedger']['accounts_account_id'] = $accounts_accounts_bank_charges['AccountsAccount']['id'];
										$savechargearray->data['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
										$savechargearray->data['AccountsLedger']['credit'] = $this->numberconversion($this->data['DeleteInvoiceData']['bankcharges'][$flag]);
										$ledgeraccount_interest = $accounts_accounts_bank_charges['AccountsAccount']['closing_balance'];
										if($ledgeraccount_interest){
											$ledgerbal = $ledgeraccount_interest;
											$bal = $accounts_accounts_bank_charges['AccountsAccount']['closing_balance']+$this->numberconversion($this->data['DeleteInvoiceData']['bankcharges'][$flag]);
										}
										else{
											$openingbal_interest=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Bank Interest'),'fields'=>array('AccountsAccount.opening_balance')));
											$bal=$openingbal_interest['AccountsAccount']['opening_balance']+$this->numberconversion($this->data['DeleteInvoiceData']['bankcharges'][$flag]);
										}
										$savechargearray->data['AccountsLedger']['accounts_clientinvoice_id'] = $flag;
										$savechargearray->data['AccountsLedger']['cheque_no'] = $client_payment." Invoice #".$flag." received via ".$this->data['DeleteInvoiceData']['bankcharges'][$flag];
										$this->AccountsLedger->save($savechargearray->data);
										$ledgerLastEntry4 = $this->AccountsLedger->getLastInsertID();
										/*changes*/
										$closingBalance->data = null;
										$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts_bank_charges['AccountsAccount']['id'];
										$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
										$this->AccountsAccount->save($closingBalance->data);
										/*changes end 25/07/2014*/
										
										
										/**Log Code**/
											$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],$savechargearray->data['AccountsLedger']['credit'],0,$accounts_accounts_bank_charges['AccountsAccount']['closing_balance'],$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry4,0,$savechargearray->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice'));
										/**Log Code**/
										
									}
								}
								
								
								if(($this->data['DeleteInvoiceData']['flexible_rate'][$flag]) && ($this->data['DeleteInvoiceData']['flexible_rate_sign'][$flag])){
									$accounts_accounts_chargesflex=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
									$accountsdetail_chargesflex = 	$accounts_accounts_chargesflex['AccountsAccount']['closing_balance']; 	
			
									if(!empty($accountsdetail_chargesflex)){
										$bbaalance_pay = $accounts_accounts_chargesflex['AccountsAccount']['closing_balance'];
									}else{
										$bbaalance_pay = $accounts_accounts_chargesflex['AccountsAccount']['opening_balance'];
									}
									$this->AccountsLedger->create();
									$savechargesaccountflex->data=null;
									$savechargesaccountflex->data['AccountsLedger']['accounts_account_id']=$accounts_accounts_chargesflex['AccountsAccount']['id'];;
									$savechargesaccountflex->data['AccountsLedger']['transaction_id']=$ledgerLastEntry1;
									$savechargesaccountflex->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
									if($this->data['DeleteInvoiceData']['flexible_rate_sign'][$flag] == '+'){
										$savechargesaccountflex->data['AccountsLedger']['credit']=$this->numberconversion($this->data['DeleteInvoiceData']['flexible_rate'][$flag]);
										$bal=$bbaalance_pay-$converted_amount;
									}elseif($this->data['DeleteInvoiceData']['flexible_rate_sign'][$flag] == '-'){
										$savechargesaccountflex->data['AccountsLedger']['debit']=$this->numberconversion($this->data['DeleteInvoiceData']['flexible_rate'][$flag]);
										$bal=$bbaalance_pay + $converted_amount;
									}
									$savechargesaccountflex->data['AccountsLedger']['is_neutral']='Y';
									
									$savechargesaccountflex->data['AccountsLedger']['accounts_clientinvoice_id']=$flag;
									$savechargesaccountflex->data['AccountsLedger']['cheque_no']=$client_payment." Invoice #".$flag." received via ".$this->data['ClientPay']['paymode'][$flag];
									if($this->AccountsLedger->save($savechargesaccountflex->data)){
										$ledgerLastEntry5 = $this->AccountsLedger->getLastInsertID();
										
										/*changes 24/7/2014*/
										$closingBalance->data = null;
										$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts_chargesflex['AccountsAccount']['id'];
										$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
										$this->AccountsAccount->save($closingBalance->data);
										/*changes 24/7/2014*/
										
										/**Log Code**/
											$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],$savechargesaccountflex->data['AccountsLedger']['credit'],$savechargesaccountflex->data['AccountsLedger']['debit'],$bbaalance_pay,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry5,0,$savechargesaccountflex->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice'));
										/**Log Code**/
										
										$accounts_accounts_bank_charges = $this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Bank Interest')));
										$this->AccountsLedger->create();
										$savechargearrayflex1->data=null;
										$savechargearrayflex1->data['AccountsLedger']['transaction_id'] = $ledgerLastEntry1;
										$savechargearrayflex1->data['AccountsLedger']['accounts_account_id'] = $accounts_accounts_bank_charges['AccountsAccount']['id'];
										$savechargearrayflex1->data['AccountsLedger']['date'] = date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
										if($this->data['DeleteInvoiceData']['flexible_rate_sign'][$flag] == '+'){
										$savechargearrayflex1->data['AccountsLedger']['debit']=$this->numberconversion($this->data['DeleteInvoiceData']['flexible_rate'][$flag]);
										}elseif($this->data['DeleteInvoiceData']['flexible_rate_sign'][$flag] == '-'){
											$savechargearrayflex1->data['AccountsLedger']['credit']=$tis->numberconversion($this->data['DeleteInvoiceData']['flexible_rate'][$flag]);
										}
										$ledgeraccount_interestflex = $accounts_accounts_bank_charges['AccountsAccount']['closing_balance'];
										if($ledgeraccount_interestflex){
											$ledgerbal = $ledgeraccount_interestflex;
											$bal = $accounts_accounts_bank_charges['AccountsAccount']['closing_balance']+$this->numberconversion($this->data['DeleteInvoiceData']['flexible_rate'][$flag]);
										}
										else{
											$openingbal_interestflex=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Bank Interest'),'fields'=>array('AccountsAccount.opening_balance')));
											$bal=$openingbal_interestflex['AccountsAccount']['opening_balance']+$this->numberconversion($this->data['DeleteInvoiceData']['flexible_rate'][$flag]);
										}
										$savechargearrayflex1->data['AccountsLedger']['accounts_clientinvoice_id'] = $flag;
										$savechargearrayflex1->data['AccountsLedger']['cheque_no'] = $client_payment." Invoice #".$flag." received via ".$this->data['DeleteInvoiceData']['bankcharges'][$flag];
										$this->AccountsLedger->save($savechargearrayflex1->data);
										$ledgerLastEntry6 = $this->AccountsLedger->getLastInsertID();
										/*changes 24/7/2014*/
										$closingBalance->data = null;
										$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts_bank_charges['AccountsAccount']['id'];
										$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
										$this->AccountsAccount->save($closingBalance->data);
										/*changes 24/7/2014*/
										
										/**Log Code**/
											$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],$savechargearrayflex1->data['AccountsLedger']['credit'],$savechargearrayflex1->data['AccountsLedger']['debit'],$accounts_accounts_bank_charges['AccountsAccount']['closing_balance'],$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry6,0,$savechargearrayflex1->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice'));
										/**Log Code**/
										
									}
								}
								/*
								 * changes 24/7/2014
								 * $closingBalance->data = null;
								$closingBalance->data['AccountsAccount']['id'] = $this->data['DeleteInvoiceData']['accoun'][$flag];
								$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
								$this->AccountsAccount->save($closingBalance->data);*/
								
								
								
								$paydetail=$this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$flag),'fields'=>array('AccountsClientpaymentdetail.id','AccountsClientpaymentdetail.paid_amount')));
								foreach($paydetail as $keypay =>$valpay){
									$paid = $paid+$valpay['AccountsClientpaymentdetail']['paid_amount'];
								}
								/* converting accounting value to client currency */	
								
								$addPayTotal = $paid+$this->data['DeleteInvoiceData']['rcved'][$flag];
								$paidTotal = $this->accountingCurrencyToClientCurrency($clientCurrencyDetail,$addPayTotal);
								
								/*ends */
								$savearray1->data['AccountsClientinvoice']['id']=$flag;
								$savearray1->data['AccountsClientinvoice']['paid_on']=date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
								$savearray1->data['AccountsClientinvoice']['payment_recieveddate']=date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
								$savearray1->data['AccountsClientinvoice']['amount_recieved']=$paidTotal;
								if($this->data['DeleteInvoiceData']['yes'][$flag] == 'y'){
									$savearray1->data['AccountsClientinvoice']['paid']='Y';
									$savearray1->data['AccountsClientinvoice']['status']='closed';
									debug('123');
								}else{
									$savearray1->data['AccountsClientinvoice']['paid']='N';
									debug('1234');
								}
								debug($savearray1->data);
								if($this->AccountsClientinvoice->save($savearray1->data)){
									$this->AccountsClientpaymentdetail->create();
									$savearray11->data['AccountsClientpaymentdetail']['client_id']=$clientid;
									$savearray11->data['AccountsClientpaymentdetail']['accounts_clientinvoice_id']=$flag;
									if($this->data['DeleteInvoiceData']['yes'][$flag] == 'y'){
										$savearray11->data['AccountsClientpaymentdetail']['paid']='Y';
									}
									$savearray11->data['AccountsClientpaymentdetail']['paid_amount']=$this->numberconversion($this->data['DeleteInvoiceData']['rcved'][$flag]);
									$savearray11->data['AccountsClientpaymentdetail']['received_date']=date('Y-m-d',strtotime($this->data['DeleteInvoiceData']['paydate'][$flag]));
									$savearray11->data['AccountsClientpaymentdetail']['paymode']=$this->data['DeleteInvoiceData']['paymode'][$flag];
									$savearray11->data['AccountsClientpaymentdetail']['paymentdetails']=$this->data['DeleteInvoiceData']['details'][$flag];
									$savearray11->data['AccountsClientpaymentdetail']['accounts_ledger_id']=$ledgerLastEntry1;
									$savearray11->data['AccountsClientpaymentdetail']['bank_charges'] = $this->data['DeleteInvoiceData']['bankcharges'][$flag];
									$savearray11->data['AccountsClientpaymentdetail']['currency_rate'] = $this->data['DeleteInvoiceData']['convrate'][$flag];
									$savearray11->data['AccountsClientpaymentdetail']['flexible_rate'] = $this->numberconversion($this->data['DeleteInvoiceData']['flexible_rate'][$flag]);
									$savearray11->data['AccountsClientpaymentdetail']['flexible_rate_sign'] = $this->data['DeleteInvoiceData']['flexible_rate_sign'][$flag];
									$savearray11->data['AccountsClientpaymentdetail']['bank_id'] = $this->data['DeleteInvoiceData']['accoun'][$flag];
									debug($savearray11->data);
									if($this->AccountsClientpaymentdetail->save($savearray11->data)){
										$lastPaymentLogId = $this->AccountsClientpaymentdetail->getLastInsertID();
										if($ledgerLastEntry1){
											$this->AccountsclientpaymentLedgermapping->create();
											$saveArrayMapping->data = null;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_clientpaymentdetail_id'] = $lastPaymentLogId;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_ledger_id'] = $ledgerLastEntry1;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['entrytype'] = 'payment';
											$this->AccountsclientpaymentLedgermapping->save($saveArrayMapping->data);
											
										}if($ledgerLastEntry2){
											$this->AccountsclientpaymentLedgermapping->create();
											$saveArrayMapping->data = null;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_clientpaymentdetail_id'] = $lastPaymentLogId;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_ledger_id'] = $ledgerLastEntry2;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['entrytype'] = 'payment';
											$this->AccountsclientpaymentLedgermapping->save($saveArrayMapping->data);
										}if($ledgerLastEntry3){
											$this->AccountsclientpaymentLedgermapping->create();
											$saveArrayMapping->data = null;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_clientpaymentdetail_id'] = $lastPaymentLogId;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_ledger_id'] = $ledgerLastEntry3;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['entrytype'] = 'bank';
											$this->AccountsclientpaymentLedgermapping->save($saveArrayMapping->data);
										}if($ledgerLastEntry4){
											$this->AccountsclientpaymentLedgermapping->create();
											$saveArrayMapping->data = null;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_clientpaymentdetail_id'] = $lastPaymentLogId;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_ledger_id'] = $ledgerLastEntry4;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['entrytype'] = 'bank';
											$this->AccountsclientpaymentLedgermapping->save($saveArrayMapping->data);
										}if($ledgerLastEntry5){
											$this->AccountsclientpaymentLedgermapping->create();
											$saveArrayMapping->data = null;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_clientpaymentdetail_id'] = $lastPaymentLogId;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_ledger_id'] = $ledgerLastEntry5;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['entrytype'] = 'rate';
											$this->AccountsclientpaymentLedgermapping->save($saveArrayMapping->data);
											
										}if($ledgerLastEntry6){
											$this->AccountsclientpaymentLedgermapping->create();
											$saveArrayMapping->data = null;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_clientpaymentdetail_id'] = $lastPaymentLogId;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['accounts_ledger_id'] = $ledgerLastEntry6;
											$saveArrayMapping->data['AccountsclientpaymentLedgermapping']['entrytype'] = 'rate';
											$this->AccountsclientpaymentLedgermapping->save($saveArrayMapping->data);
										}
										
										$this->Session->setFlash(__('<div class=flashMessageSuccess>The Payment  Updated.</div>'));
									}else{
										
										$this->Session->setFlash(__('<div class=flashMessageError>The Payment  Updation Failed.Please Try Again.</div>'));
									}
										$this->Session->setFlash(__('<div class=flashMessageSuccess>The accounts clientinvoice  saved.</div>'));
								}else{
									
										$this->Session->setFlash(__('<div class=flashMessageError>The accounts clientinvoice could not be saved. Please, try again.</div>'));
									}
								
							}
							else
							{
								
								$this->Session->setFlash(__('<div class=flashMessageError>Ledger Not Updated</div>'));
							}
							
						}
					else
						{
							
							$this->Session->setFlash(__('<div class=flashMessageError>Compulsory Fields Missing.</div>'));
						}
					$this->redirect(array('action' => 'index'));
				}
					
			
		}
	
	
	function clientpay($flag,$due,$clientid,$currencyid)
	{
		
		$this->loadModel('AccountsClientinvoice');
		$this->loadModel('Client');
		$this->loadModel('Brand');
		$this->loadModel('AccountsAccount');
		$this->loadModel('AccountsLedger');
		$this->loadModel('AccountsClientpaymentdetail');
		$this->loadModel('Currency');
		$this->loadModel('AccountType');
		$this->loadModel('AccountsGoldenrule');
		$this->AccountsClientpaymentdetail->recursive=0;
		if($this->data)
		{
			if($this->data['ClientPay']['paymode'][$flag] && $this->data['ClientPay']['rcved'][$flag] &&$this->data['ClientPay']['paydate'][$flag] &&$this->data['ClientPay']['accoun'][$flag])
				{
					if($this->data['ClientPay']['convrate'][$flag])
						{
							$converted_amount=$this->data['ClientPay']['convrate'][$flag]*$this->data['ClientPay']['rcved'][$flag];
						}
					else
						{
							/*
							 ***********************************Spot Conversion Logic ****************************************************** 
							 ***************************************************************************************************************
						   */
							$invoice_currency=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$flag)));
							$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
							if(($billingcurrency['Currency']['id']!=$this->data['AccountsClientinvoice']['currency']) && (($this->data['AccountsClientinvoice']['currency']!=null)))
								{
									$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$invoice_currency['AccountsClientinvoice']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
									$from=$fromcur['Currency']['name'];
									$to=$billingcurrency['Currency']['name'];
									$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
									$handle = @fopen($url, 'r');
									if ($handle) 
										{
		    								$result = fgets($handle, 4096);
		    								fclose($handle);
										}
									$allData = explode(',',$result);  //Get all the contents to an array 
									if($allData['1']==0)
										{
											$allData['1']=1;
										}
									$converted_amount=$this->data['ClientPay']['rcved'][$flag]*$allData['1'];
									$symbol=$fromcur['Currency']['symbol'];
									$this->set(compact('symbol'));
											
								}
								else
									{
										$converted_amount=$this->data['ClientPay']['rcved'][$flag];
									}
								 	/**************************************************************************************************************
								 	 **********************************Spot Conversion Logic ****************************************************** 
								 	***************************************************************************************************************
								 	*/
						}
					$client_paymentdesc=$this->Client->find('first',array('conditions'=>array('Client.id'=>$clientid)));
					$client_payment=$client_paymentdesc['Client']['client_companyname'];
					$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
					$accounts_accounts=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.account_name'=>'Accounts Receivable')));
					$accountsdetail = $accounts_accounts['AccountsAccount']['closing_balance'];			 	
					if(!empty($accountsdetail)){
						$bbaalance_pay = $accountsdetail['AccountsAccount']['closing_balance'];
					}else{
						$bbaalance_pay = $accounts_accounts['AccountsAccount']['opening_balance'];
					}
					$this->AccountsLedger->create();
					$saveaccount->data=null;
					$saveaccount->data['AccountsLedger']['accounts_account_id']=$accounts_accounts['AccountsAccount']['id'];
					$saveaccount->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['ClientPay']['paydate'][$flag]));
					$saveaccount->data['AccountsLedger']['debit']=$converted_amount;
					$saveaccount->data['AccountsLedger']['is_neutral']='Y';
					$saveaccount->data['AccountsLedger']['cheque_no']=$client_payment." Invoice #".$flag." received via ".$this->data['ClientPay']['paymode'][$flag];
					$saveaccount->data['AccountsLedger']['accounts_clientinvoice_id']=$flag;
					$bal=$bbaalance_pay-$converted_amount;
					$this->AccountsLedger->save($saveaccount->data);
					/* To Insert a proper transaction id code change wrt to latest ledger entry*/
					$ledgerLastEntry1 = $this->AccountsLedger->getLastInsertID();
					$ledgerPay->data['AccountsLedger']['id']=$ledgerLastEntry1;
					$ledgerPay->data['AccountsLedger']['transaction_id']=$ledgerLastEntry1;
					$this->AccountsLedger->save($ledgerPay->data);
					/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
					$closingBalance->data = null;
					$closingBalance->data['AccountsAccount']['id'] = $accounts_accounts['AccountsAccount']['id'];
					$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
					$this->AccountsAccount->save($closingBalance->data);
					
					/**Log Code**/
						$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],0,$saveaccount->data['AccountsLedger']['debit'],$bbaalance_pay,$closingBalance->data['AccountsAccount']['closing_balance'],$ledgerLastEntry1,0,$saveaccount->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice function clientpay'));
					/**Log Code**/
					
					
					
					$accounts_accounts_bank=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['ClientPay']['accoun'][$flag])));
					$paydetail=$this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.accounts_clientinvoice_id'=>$flag),'fields'=>array('AccountsClientpaymentdetail.id','AccountsClientpaymentdetail.paid_amount')));
					foreach($paydetail as $keypay =>$valpay)
						{
							$paid=$paid+$valpay['AccountsClientpaymentdetail']['paid_amount'];
						}
					$this->AccountsLedger->create();
					$savearray->data=null;
					$savearray->data['AccountsLedger']['transaction_id']=$ledgerLastEntry1;
					$savearray->data['AccountsLedger']['accounts_account_id']=$this->data['ClientPay']['accoun'][$flag];
					$savearray->data['AccountsLedger']['date']=date('Y-m-d',strtotime($this->data['ClientPay']['paydate'][$flag]));
					$savearray->data['AccountsLedger']['credit']=$converted_amount;
					$ledgeraccount=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['ClientPay']['accoun'][$flag]),'fields'=>array('AccountsLedger.closing_balance'),'order'=>array('AccountsAccount.id DESC')));
					if($ledgeraccount)
					{
							$ledgerbal=$ledgeraccount;
							$bal=$ledgerbal['AccountsAccount']['closing_balance']+$converted_amount;
					}
					
					else
					{
						$openingbal=$this->AccountsAccount->find('first',array('conditions'=>array('AccountsAccount.id'=>$this->data['ClientPay']['accoun'][$flag]),'fields'=>array('AccountsAccount.opening_balance')));
						$bal=$openingbal['AccountsAccount']['opening_balance']+$converted_amount;
					}
					$savearray->data['AccountsLedger']['accounts_clientinvoice_id'] = $flag;
					$savearray->data['AccountsLedger']['cheque_no']=$client_payment." Invoice #".$flag." received via ".$this->data['ClientPay']['paymode'][$flag];
					if($this->AccountsLedger->save($savearray->data))
					{
						$lastInsertIDDDDDD = $this->AccountsLedger->getLastInsertId();
						/* To Insert a proper closing_balance code change wrt to latest ledger entry*/
						$closingBalance->data = null;
						$closingBalance->data['AccountsAccount']['id'] = $this->data['ClientPay']['accoun'][$flag];
						$closingBalance->data['AccountsAccount']['closing_balance'] = $bal;
						$this->AccountsAccount->save($closingBalance->data);
						
						/**Log Code**/
							$this->requestAction(array('controller'=>'ClientContacts','action'=>'log_entries',$closingBalance->data['AccountsAccount']['id'],$savearray->data['AccountsLedger']['credit'],0,$ledgerbal['AccountsAccount']['closing_balance'],$closingBalance->data['AccountsAccount']['closing_balance'],$lastInsertIDDDDDD,0,$savearray->data['AccountsLedger']['accounts_clientinvoice_id'],'Pay Invoice','Pay invoice function clientpay'));
						/**Log Code**/
						
						$savearray1->data['AccountsClientinvoice']['id']=$flag;
						$savearray1->data['AccountsClientinvoice']['paid_on']=date('Y-m-d',strtotime($this->data['ClientPay']['paydate'][$flag]));
						$savearray1->data['AccountsClientinvoice']['payment_recieveddate']=date('Y-m-d',strtotime($this->data['ClientPay']['paydate'][$flag]));
						$savearray1->data['AccountsClientinvoice']['amount_recieved']=$paid+$this->data['ClientPay']['rcved'][$flag];
						if($this->AccountsClientinvoice->save($savearray1->data))
						{
							$this->AccountsClientpaymentdetail->create();
							$savearray11->data['AccountsClientpaymentdetail']['client_id']=$clientid;
							$savearray11->data['AccountsClientpaymentdetail']['accounts_clientinvoice_id']=$flag;
							if($due<=$this->data['ClientPay']['rcved'][$flag])
							{
								$savearray11->data['AccountsClientpaymentdetail']['paid']='Y';
							}
							$savearray11->data['AccountsClientpaymentdetail']['paid_amount']=$this->data['ClientPay']['rcved'][$flag];
							$savearray11->data['AccountsClientpaymentdetail']['received_date']=date('Y-m-d',strtotime($this->data['ClientPay']['paydate'][$flag]));
							$savearray11->data['AccountsClientpaymentdetail']['paymode']=$this->data['ClientPay']['paymode'][$flag];
							$savearray11->data['AccountsClientpaymentdetail']['paymentdetails']=$this->data['ClientPay']['details'][$flag];
							$savearray11->data['AccountsClientpaymentdetail']['accounts_ledger_id']=$ledgerLastEntry1;
							if($this->AccountsClientpaymentdetail->save($savearray11->data))
							{
								$invoicePaymentdetailStatus =  $this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.id'=>$flag)));
								$savearray111->data['AccountsClientinvoice']['id']=$flag;
								if($invoicePaymentdetailStatus['AccountsClientinvoice']['amount_recieved'] >= $invoicePaymentdetailStatus['AccountsClientinvoice']['ajusted_invoiceamount'])
									{
										$savearray111->data['AccountsClientinvoice']['paid']='Y';
										$savearray111->data['AccountsClientinvoice']['status']='closed';
									}
								else
									{
										$savearray111->data['AccountsClientinvoice']['paid']='N';
									}
								$this->AccountsClientinvoice->save($savearray111->data);
								$this->Session->setFlash(__('The Payment  Updated.'));
							}
							else
							{
								
								$this->Session->setFlash(__('The Payment  Updation Failed.Please Try Again.'));
							}
							$this->Session->setFlash(__('The accounts clientinvoice  saved.'));
						}
						else
						{
							
							$this->Session->setFlash(__('The accounts clientinvoice could not be saved. Please, try again.'));
						}
					}
					else
					{
						
						$this->Session->setFlash(__('Ledger Not Updated'));
					}
					
				}
			else
				{
					
					$this->Session->setFlash(__('Compulsory Fields Missing.'));
				}
		}
		
		if($this->data['sort']['sortbybrand'])
		{
			//$this->paginate = array('conditions'=>array('AccountsClientpaymentdetail.paid !='=>'Y','AccountsClientpaymentdetail.brand_id'=>$this->data['sort']['sortbybrand']));
			$paymentdetail=$this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.paid !='=>'Y','AccountsClientpaymentdetail.brand_id'=>$this->data['sort']['sortbybrand'])));
		}
		else
		{
			if($clientid)
				{
					
					$paymentdetail=$this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.paid !='=>'Y'/*,'AccountsClientpaymentdetail.client_id'=>$clientid*/)));
					$this->paginate = $paymentdetail;
					$controller='accounts_clientinvoices';
					$view='view';
					$this->set(compact('controller','view'));
					if(!$paymentdetail)
						{
								$error=1;
								$this->set(compact('error'));
								$this->Session->setFlash(_('<div classs="flashMessageError">No Records Found</div>'),true);
								return;							
						}
				}
			else
				{
					$controller='clients';
					$view='index';
					$this->set(compact('controller','view'));
					$paymentdetail=$this->AccountsClientpaymentdetail->find('all',array('conditions'=>array('AccountsClientpaymentdetail.paid !='=>'Y','AccountsClientpaymentdetail.client_id !='=>null)));
					$this->paginate = $paymentdetail;
					
				}
			
		}
		
		foreach($paymentdetail as $kp=>$vp)
		{
			
			if($this->data['sort']['sortbystatus'])
			{
				$invoice_details=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.void'=>'N','AccountsClientinvoice.paid !='=>'Y','AccountsClientinvoice.id'=>$vp['AccountsClientpaymentdetail']['accounts_clientinvoice_id'],'AccountsClientinvoice.status'=>$this->data['sort']['sortbystatus'])));
			
			}
			else
			{
				$invoice_details=$this->AccountsClientinvoice->find('first',array('conditions'=>array('AccountsClientinvoice.void'=>'N','AccountsClientinvoice.paid !='=>'Y','AccountsClientinvoice.id'=>$vp['AccountsClientpaymentdetail']['accounts_clientinvoice_id'])));
			}
			
			$currency=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$vp['AccountsClientpaymentdetail']['currency_id'])));
			
					$branddetail=$this->Brand->find('first',array('conditions'=>array('Brand.id'=>$invoice_details['AccountsClientinvoice']['brand_id'])));
			
					$clientdetail=$this->Client->find('first',array('conditions'=>array('Client.id'=>$invoice_details['AccountsClientinvoice']['client_id'])));
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['brandid']=$branddetail['Brand']['id'];
		
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['brandname']=$branddetail['Brand']['brandname'];
			
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['clientid']=$clientdetail['Client']['id'];
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['clientname']=$clientdetail['Client']['client_companyname'];
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['invoicedate']=$invoice_details['AccountsClientinvoice']['invoiced_date'];
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['invoiceamount']=$invoice_details['AccountsClientinvoice']['invoice_amount'];
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['duedate']=$invoice_details['AccountsClientinvoice']['due_date'];
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['amount']=$vp['AccountsClientpaymentdetail']['due'];
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['symbol']=$currency['Currency']['symbol'];
					$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['currencyid']=$currency['Currency']['id'];
					
					 /**********************************Spot Conversion Logic ****************************************************** 
					  ***************************************************************************************************************
					 */
					$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_currency'=>'Y')));
					if(($billingcurrency['Currency']['id']!=$vp['AccountsClientpaymentdetail']['currency_id']) && (($vp['AccountsClientpaymentdetail']['currency_id']!=null)))
						{
							$fromcur=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$vp['AccountsClientpaymentdetail']['currency_id']),'fields'=>array('Currency.name','Currency.symbol')));
							$from=$fromcur['Currency']['name'];
							$to=$billingcurrency['Currency']['name'];
							$url = 'http://download.finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s='. $from . $to .'=X';
							$handle = @fopen($url, 'r');
							if ($handle) 
								{
										$result = fgets($handle, 4096);
										fclose($handle);
								}
							$allData = explode(',',$result);  //Get all the contents to an array 
							$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['convrate']=$allData['1'];
							
							
						}
					else
						{
							$reqdetails[$invoice_details['AccountsClientinvoice']['id']]['convrate']=1;
							
						}
			/**************************************************************************************************************
			 **********************************Spot Conversion Logic ******************************************************
			 */ 
		}
		
		$this->set('invdetail',$this->paginate());
		$allbrand=$this->Brand->find('list',array('fields'=>array('Brand.id','Brand.brandname')));
		$accountlist=$this->AccountsAccount->find('list',array('conditions'=>array('AccountsAccount.asset_type'=>'Bank'),'fields'=>array('AccountsAccount.id','AccountsAccount.account_name')));
		$this->set(compact('reqdetails','accountlist','allbrand'));
		
	}
	
	function paymode($flag,$invoiceid)
	{
		
		if($this->data['ClientPay']['paymode'][$flag]=='Cheque')
		{
			$details=$this->data['ClientPay']['paymode'][$flag];
			$this->set(compact('flag','details'));
		}
		if($invoiceid)
		{
			foreach($this->data['DeleteInvoiceData']['paymode'] as $kflag=>$vflag)
			{
				if($vflag=='Cheque')
					{
						$details=$vflag;
						$flag=$kflag;
						$this->set(compact('flag','details'));
					}
			}
		
		}
		
	}
	public function popupcheckpackage($flag=null)
		{
			$this->loadModel('BillingUnit');
			$this->loadModel('BrandsService');
			$this->loadModel('BrandsServiceunit');
			if(($this->data['PopupPackage']['unit_check']) && (!$this->data['PopupPackage']['service_check'])){
				$unit = $this->BillingUnit->find('list',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
				$resourceType = "Unit";
				$this->set(compact('unit','resourceType'));
			}
			elseif(($this->data['PopupPackage']['service_check']) && (!$this->data['PopupPackage']['unit_check'])){
				$unit = $this->BrandsService->find('list',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
				$resourceType = "Service";
				$this->set(compact('unit','resourceType'));
			}
			else{
				$serv=$this->BrandsService->find('all',array('conditions'=>array('BrandsService.active'=>'Y'),'fields'=>array('BrandsService.id','BrandsService.service_name')));
				$billingUnit = $this->BillingUnit->find('all',array('conditions'=>array('BillingUnit.active'=>'Y'),'fields'=>array('BillingUnit.id','BillingUnit.name')));
				$brands_units = $this->BrandsServiceunit->find('all');
				$final=null;
				foreach($serv as $serv)
					{	
						$final['service'][$serv['BrandsService']['id']]=$serv['BrandsService']['service_name'];
					}
				foreach($billingUnit as $billingUnit){
					$final['units'][$billingUnit['BillingUnit']['id']]=$billingUnit['BillingUnit']['name'];
				}
				$finaal['services'] = 'Services';
				foreach($final['service'] as $keeeeeeey => $valueee ) {
					$finaal[$keeeeeeey."-s"] = '--'.$valueee;
					
				}
				
				$finaal['units'] = 'Units';
				foreach($final['units'] as $keeeeeeey => $valueee ) {
					$finaal[$keeeeeeey."-u"] = '--'.$valueee;
					
				}
				
				$unit=$finaal;
				$resourceType = "both";
				$this->set(compact('unit','resourceType','flag'));
			}
		}
	public function checkboxupdateprice($flag = null){
		
		$this->loadModel('BillingUnit');
		$this->loadModel('BrandsService');
		$billingcurrency=$this->Currency->find('first',array('conditions'=>array('Currency.default_billing_currency'=>'Y')));
		if(($this->data['PopupPackage']['unit_check']) && (!$this->data['PopupPackage']['service_check'])){
			if($this->data['PopupPackage']['unit_name1']){
				$billingUnit = $this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupPackage']['unit_name1']),'fields'=>array('BillingUnit.amount')));
				$price_name1 = $billingUnit['BillingUnit']['amount'];
				$popuppackage1 = 1;
			}
			if($this->data['PopupPackage']['unit_name2']){
				$billingUnit = $this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$this->data['PopupPackage']['unit_name2']),'fields'=>array('BillingUnit.amount')));
				$price_name2 = $billingUnit['BillingUnit']['amount'];
				$popuppackage2 = 1;
			}
			
			
		}
		elseif((!$this->data['PopupPackage']['unit_check']) && ($this->data['PopupPackage']['service_check'])){
			if($this->data['PopupPackage']['unit_name1']){
				$billingUnit = $this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['PopupPackage']['unit_name1']),'fields'=>array('BrandsService.totalcost')));
				$price_name1 = $billingUnit['BrandsService']['totalcost'];
				$popuppackage1 = 1;
			}
			if($this->data['PopupPackage']['unit_name2']){
				$billingUnit = $this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$this->data['PopupPackage']['unit_name2']),'fields'=>array('BrandsService.totalcost')));
				$price_name2 = $billingUnit['BrandsService']['totalcost'];
				$popuppackage2 = 1;
			}
		}
		elseif(($this->data['PopupPackage']['unit_check']) && ($this->data['PopupPackage']['service_check'])){
			if($this->data['PopupPackage']['unit_name1']){
				$exp = explode('-',$this->data['PopupPackage']['unit_name1']);
				if($exp['1'] == 'u'){
				$billingUnit = $this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$exp['0']),'fields'=>array('BillingUnit.amount')));
				$price_name1 = $billingUnit['BillingUnit']['amount'];
				$popuppackage1 = 1;	
				}
				else{
				
				$billingUnit = $this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$exp['0']),'fields'=>array('BrandsService.totalcost')));
				$price_name1 = $billingUnit['BrandsService']['totalcost'];
				$popuppackage1 = 1;
				}
				
				
			}
			if($this->data['PopupPackage']['unit_name2']){
				$exp = explode('-',$this->data['PopupPackage']['unit_name2']);
				if($exp['1'] == 'u'){
				$billingUnit = $this->BillingUnit->find('first',array('conditions'=>array('BillingUnit.id'=>$exp['0']),'fields'=>array('BillingUnit.amount')));
				$price_name2 = $billingUnit['BillingUnit']['amount'];
				$popuppackage2 = 1;	
				}
				else{
				$billingUnit = $this->BrandsService->find('first',array('conditions'=>array('BrandsService.id'=>$exp['0']),'fields'=>array('BrandsService.totalcost')));
				$price_name2 = $billingUnit['BrandsService']['totalcost'];
				$popuppackage2 = 1;
				
				}
			}
		}
		$this->set(compact('price_name1','price_name2','popuppackage2','popuppackage1'));
	}
	function currsymbol()
	{
		
		$this->loadModel('Currency');
		$this->loadModel('Client');
		if($this->data['AccountsClientinvoice']['currency'])
			{
				$currencysymbol=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$this->data['AccountsClientinvoice']['currency']),'fields'=>array('Currency.symbol')));
			}
		else
			{
				$clientInfo=$this->Client->find('first',array('conditions'=>array('Client.id'=>$this->data['client'],'Client.status'=>'Y')));
				$currencysymbol=$this->Currency->find('first',array('conditions'=>array('Currency.id'=>$clientInfo['Client']['currency_id']),'fields'=>array('Currency.symbol')));
			}
		
		$symbol=$currencysymbol['Currency']['symbol'];
		$this->set(compact('symbol'));
	}
	
	
	
	function testrest(){
		$recipes=null;
		$recipes['0']['id']=1;
		$recipes['0']['name']='xyz';
		$this->set(array(
            'recipes' => $recipes,
            '_serialize' => array('recipes')
        ));
		//$this->set(compact('recipes'));
		
	}
	
	
	
	
}